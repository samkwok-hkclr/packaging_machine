
testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f44c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a0  0800f5fc  0800f5fc  0001f5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb9c  0800fb9c  0002036c  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb9c  0800fb9c  0001fb9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fba4  0800fba4  0002036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fba4  0800fba4  0001fba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fba8  0800fba8  0001fba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  0800fbac  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002036c  2**0
                  CONTENTS
 10 .bss          00000a74  20000370  20000370  00020370  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000de4  20000de4  00020370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002036c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002039c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00028a6b  00000000  00000000  000203df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000621d  00000000  00000000  00048e4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a28  00000000  00000000  0004f068  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000014ae  00000000  00000000  00050a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002beba  00000000  00000000  00051f3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00028533  00000000  00000000  0007ddf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000f456d  00000000  00000000  000a632b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007530  00000000  00000000  0019a898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001a1dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000370 	.word	0x20000370
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800f5e4 	.word	0x0800f5e4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000374 	.word	0x20000374
 80001ec:	0800f5e4 	.word	0x0800f5e4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2uiz>:
 8000b4c:	004a      	lsls	r2, r1, #1
 8000b4e:	d211      	bcs.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d211      	bcs.n	8000b7a <__aeabi_d2uiz+0x2e>
 8000b56:	d50d      	bpl.n	8000b74 <__aeabi_d2uiz+0x28>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d40e      	bmi.n	8000b80 <__aeabi_d2uiz+0x34>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7e:	d102      	bne.n	8000b86 <__aeabi_d2uiz+0x3a>
 8000b80:	f04f 30ff 	mov.w	r0, #4294967295
 8000b84:	4770      	bx	lr
 8000b86:	f04f 0000 	mov.w	r0, #0
 8000b8a:	4770      	bx	lr

08000b8c <__aeabi_uldivmod>:
 8000b8c:	b953      	cbnz	r3, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b8e:	b94a      	cbnz	r2, 8000ba4 <__aeabi_uldivmod+0x18>
 8000b90:	2900      	cmp	r1, #0
 8000b92:	bf08      	it	eq
 8000b94:	2800      	cmpeq	r0, #0
 8000b96:	bf1c      	itt	ne
 8000b98:	f04f 31ff 	movne.w	r1, #4294967295
 8000b9c:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba0:	f000 b970 	b.w	8000e84 <__aeabi_idiv0>
 8000ba4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ba8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bac:	f000 f806 	bl	8000bbc <__udivmoddi4>
 8000bb0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bb8:	b004      	add	sp, #16
 8000bba:	4770      	bx	lr

08000bbc <__udivmoddi4>:
 8000bbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc0:	9e08      	ldr	r6, [sp, #32]
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4604      	mov	r4, r0
 8000bc6:	460f      	mov	r7, r1
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d14a      	bne.n	8000c62 <__udivmoddi4+0xa6>
 8000bcc:	428a      	cmp	r2, r1
 8000bce:	4694      	mov	ip, r2
 8000bd0:	d965      	bls.n	8000c9e <__udivmoddi4+0xe2>
 8000bd2:	fab2 f382 	clz	r3, r2
 8000bd6:	b143      	cbz	r3, 8000bea <__udivmoddi4+0x2e>
 8000bd8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bdc:	f1c3 0220 	rsb	r2, r3, #32
 8000be0:	409f      	lsls	r7, r3
 8000be2:	fa20 f202 	lsr.w	r2, r0, r2
 8000be6:	4317      	orrs	r7, r2
 8000be8:	409c      	lsls	r4, r3
 8000bea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bee:	fa1f f58c 	uxth.w	r5, ip
 8000bf2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bf6:	0c22      	lsrs	r2, r4, #16
 8000bf8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bfc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c00:	fb01 f005 	mul.w	r0, r1, r5
 8000c04:	4290      	cmp	r0, r2
 8000c06:	d90a      	bls.n	8000c1e <__udivmoddi4+0x62>
 8000c08:	eb1c 0202 	adds.w	r2, ip, r2
 8000c0c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c10:	f080 811c 	bcs.w	8000e4c <__udivmoddi4+0x290>
 8000c14:	4290      	cmp	r0, r2
 8000c16:	f240 8119 	bls.w	8000e4c <__udivmoddi4+0x290>
 8000c1a:	3902      	subs	r1, #2
 8000c1c:	4462      	add	r2, ip
 8000c1e:	1a12      	subs	r2, r2, r0
 8000c20:	b2a4      	uxth	r4, r4
 8000c22:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c26:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c2a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c2e:	fb00 f505 	mul.w	r5, r0, r5
 8000c32:	42a5      	cmp	r5, r4
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x90>
 8000c36:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c3e:	f080 8107 	bcs.w	8000e50 <__udivmoddi4+0x294>
 8000c42:	42a5      	cmp	r5, r4
 8000c44:	f240 8104 	bls.w	8000e50 <__udivmoddi4+0x294>
 8000c48:	4464      	add	r4, ip
 8000c4a:	3802      	subs	r0, #2
 8000c4c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c50:	1b64      	subs	r4, r4, r5
 8000c52:	2100      	movs	r1, #0
 8000c54:	b11e      	cbz	r6, 8000c5e <__udivmoddi4+0xa2>
 8000c56:	40dc      	lsrs	r4, r3
 8000c58:	2300      	movs	r3, #0
 8000c5a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c62:	428b      	cmp	r3, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0xbc>
 8000c66:	2e00      	cmp	r6, #0
 8000c68:	f000 80ed 	beq.w	8000e46 <__udivmoddi4+0x28a>
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c72:	4608      	mov	r0, r1
 8000c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c78:	fab3 f183 	clz	r1, r3
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	d149      	bne.n	8000d14 <__udivmoddi4+0x158>
 8000c80:	42ab      	cmp	r3, r5
 8000c82:	d302      	bcc.n	8000c8a <__udivmoddi4+0xce>
 8000c84:	4282      	cmp	r2, r0
 8000c86:	f200 80f8 	bhi.w	8000e7a <__udivmoddi4+0x2be>
 8000c8a:	1a84      	subs	r4, r0, r2
 8000c8c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c90:	2001      	movs	r0, #1
 8000c92:	4617      	mov	r7, r2
 8000c94:	2e00      	cmp	r6, #0
 8000c96:	d0e2      	beq.n	8000c5e <__udivmoddi4+0xa2>
 8000c98:	e9c6 4700 	strd	r4, r7, [r6]
 8000c9c:	e7df      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000c9e:	b902      	cbnz	r2, 8000ca2 <__udivmoddi4+0xe6>
 8000ca0:	deff      	udf	#255	; 0xff
 8000ca2:	fab2 f382 	clz	r3, r2
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	f040 8090 	bne.w	8000dcc <__udivmoddi4+0x210>
 8000cac:	1a8a      	subs	r2, r1, r2
 8000cae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb2:	fa1f fe8c 	uxth.w	lr, ip
 8000cb6:	2101      	movs	r1, #1
 8000cb8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cbc:	fb07 2015 	mls	r0, r7, r5, r2
 8000cc0:	0c22      	lsrs	r2, r4, #16
 8000cc2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cc6:	fb0e f005 	mul.w	r0, lr, r5
 8000cca:	4290      	cmp	r0, r2
 8000ccc:	d908      	bls.n	8000ce0 <__udivmoddi4+0x124>
 8000cce:	eb1c 0202 	adds.w	r2, ip, r2
 8000cd2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cd6:	d202      	bcs.n	8000cde <__udivmoddi4+0x122>
 8000cd8:	4290      	cmp	r0, r2
 8000cda:	f200 80cb 	bhi.w	8000e74 <__udivmoddi4+0x2b8>
 8000cde:	4645      	mov	r5, r8
 8000ce0:	1a12      	subs	r2, r2, r0
 8000ce2:	b2a4      	uxth	r4, r4
 8000ce4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ce8:	fb07 2210 	mls	r2, r7, r0, r2
 8000cec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cf0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cf4:	45a6      	cmp	lr, r4
 8000cf6:	d908      	bls.n	8000d0a <__udivmoddi4+0x14e>
 8000cf8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cfc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d00:	d202      	bcs.n	8000d08 <__udivmoddi4+0x14c>
 8000d02:	45a6      	cmp	lr, r4
 8000d04:	f200 80bb 	bhi.w	8000e7e <__udivmoddi4+0x2c2>
 8000d08:	4610      	mov	r0, r2
 8000d0a:	eba4 040e 	sub.w	r4, r4, lr
 8000d0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d12:	e79f      	b.n	8000c54 <__udivmoddi4+0x98>
 8000d14:	f1c1 0720 	rsb	r7, r1, #32
 8000d18:	408b      	lsls	r3, r1
 8000d1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d22:	fa05 f401 	lsl.w	r4, r5, r1
 8000d26:	fa20 f307 	lsr.w	r3, r0, r7
 8000d2a:	40fd      	lsrs	r5, r7
 8000d2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d36:	fa1f fe8c 	uxth.w	lr, ip
 8000d3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d3e:	0c1c      	lsrs	r4, r3, #16
 8000d40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d44:	fb08 f50e 	mul.w	r5, r8, lr
 8000d48:	42a5      	cmp	r5, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d52:	d90b      	bls.n	8000d6c <__udivmoddi4+0x1b0>
 8000d54:	eb1c 0404 	adds.w	r4, ip, r4
 8000d58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d5c:	f080 8088 	bcs.w	8000e70 <__udivmoddi4+0x2b4>
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	f240 8085 	bls.w	8000e70 <__udivmoddi4+0x2b4>
 8000d66:	f1a8 0802 	sub.w	r8, r8, #2
 8000d6a:	4464      	add	r4, ip
 8000d6c:	1b64      	subs	r4, r4, r5
 8000d6e:	b29d      	uxth	r5, r3
 8000d70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d74:	fb09 4413 	mls	r4, r9, r3, r4
 8000d78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x1da>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d8c:	d26c      	bcs.n	8000e68 <__udivmoddi4+0x2ac>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	d96a      	bls.n	8000e68 <__udivmoddi4+0x2ac>
 8000d92:	3b02      	subs	r3, #2
 8000d94:	4464      	add	r4, ip
 8000d96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	42ac      	cmp	r4, r5
 8000da4:	46c8      	mov	r8, r9
 8000da6:	46ae      	mov	lr, r5
 8000da8:	d356      	bcc.n	8000e58 <__udivmoddi4+0x29c>
 8000daa:	d053      	beq.n	8000e54 <__udivmoddi4+0x298>
 8000dac:	b156      	cbz	r6, 8000dc4 <__udivmoddi4+0x208>
 8000dae:	ebb0 0208 	subs.w	r2, r0, r8
 8000db2:	eb64 040e 	sbc.w	r4, r4, lr
 8000db6:	fa04 f707 	lsl.w	r7, r4, r7
 8000dba:	40ca      	lsrs	r2, r1
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	4317      	orrs	r7, r2
 8000dc0:	e9c6 7400 	strd	r7, r4, [r6]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dcc:	f1c3 0120 	rsb	r1, r3, #32
 8000dd0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dd4:	fa20 f201 	lsr.w	r2, r0, r1
 8000dd8:	fa25 f101 	lsr.w	r1, r5, r1
 8000ddc:	409d      	lsls	r5, r3
 8000dde:	432a      	orrs	r2, r5
 8000de0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000de4:	fa1f fe8c 	uxth.w	lr, ip
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1510 	mls	r5, r7, r0, r1
 8000df0:	0c11      	lsrs	r1, r2, #16
 8000df2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000df6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dfa:	428d      	cmp	r5, r1
 8000dfc:	fa04 f403 	lsl.w	r4, r4, r3
 8000e00:	d908      	bls.n	8000e14 <__udivmoddi4+0x258>
 8000e02:	eb1c 0101 	adds.w	r1, ip, r1
 8000e06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e0a:	d22f      	bcs.n	8000e6c <__udivmoddi4+0x2b0>
 8000e0c:	428d      	cmp	r5, r1
 8000e0e:	d92d      	bls.n	8000e6c <__udivmoddi4+0x2b0>
 8000e10:	3802      	subs	r0, #2
 8000e12:	4461      	add	r1, ip
 8000e14:	1b49      	subs	r1, r1, r5
 8000e16:	b292      	uxth	r2, r2
 8000e18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000e20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e24:	fb05 f10e 	mul.w	r1, r5, lr
 8000e28:	4291      	cmp	r1, r2
 8000e2a:	d908      	bls.n	8000e3e <__udivmoddi4+0x282>
 8000e2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e34:	d216      	bcs.n	8000e64 <__udivmoddi4+0x2a8>
 8000e36:	4291      	cmp	r1, r2
 8000e38:	d914      	bls.n	8000e64 <__udivmoddi4+0x2a8>
 8000e3a:	3d02      	subs	r5, #2
 8000e3c:	4462      	add	r2, ip
 8000e3e:	1a52      	subs	r2, r2, r1
 8000e40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e44:	e738      	b.n	8000cb8 <__udivmoddi4+0xfc>
 8000e46:	4631      	mov	r1, r6
 8000e48:	4630      	mov	r0, r6
 8000e4a:	e708      	b.n	8000c5e <__udivmoddi4+0xa2>
 8000e4c:	4639      	mov	r1, r7
 8000e4e:	e6e6      	b.n	8000c1e <__udivmoddi4+0x62>
 8000e50:	4610      	mov	r0, r2
 8000e52:	e6fb      	b.n	8000c4c <__udivmoddi4+0x90>
 8000e54:	4548      	cmp	r0, r9
 8000e56:	d2a9      	bcs.n	8000dac <__udivmoddi4+0x1f0>
 8000e58:	ebb9 0802 	subs.w	r8, r9, r2
 8000e5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e60:	3b01      	subs	r3, #1
 8000e62:	e7a3      	b.n	8000dac <__udivmoddi4+0x1f0>
 8000e64:	4645      	mov	r5, r8
 8000e66:	e7ea      	b.n	8000e3e <__udivmoddi4+0x282>
 8000e68:	462b      	mov	r3, r5
 8000e6a:	e794      	b.n	8000d96 <__udivmoddi4+0x1da>
 8000e6c:	4640      	mov	r0, r8
 8000e6e:	e7d1      	b.n	8000e14 <__udivmoddi4+0x258>
 8000e70:	46d0      	mov	r8, sl
 8000e72:	e77b      	b.n	8000d6c <__udivmoddi4+0x1b0>
 8000e74:	3d02      	subs	r5, #2
 8000e76:	4462      	add	r2, ip
 8000e78:	e732      	b.n	8000ce0 <__udivmoddi4+0x124>
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e70a      	b.n	8000c94 <__udivmoddi4+0xd8>
 8000e7e:	4464      	add	r4, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e742      	b.n	8000d0a <__udivmoddi4+0x14e>

08000e84 <__aeabi_idiv0>:
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop

08000e88 <CO_getUint8>:
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t
CO_getUint8(const void* buf) {
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	781b      	ldrb	r3, [r3, #0]
    uint8_t value;
    (void)memmove((void*)&value, buf, sizeof(value));
 8000e94:	73fb      	strb	r3, [r7, #15]
    return value;
 8000e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <CO_setUint8>:
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t
CO_setUint8(void* buf, uint8_t value) {
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
 8000eb0:	78fa      	ldrb	r2, [r7, #3]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	701a      	strb	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000eb6:	2301      	movs	r3, #1
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <CO_setUint32>:
    return (uint8_t)(sizeof(value));
}

/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t
CO_setUint32(void* buf, uint32_t value) {
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8000ed4:	2304      	movs	r3, #4
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <OD_getIndex>:
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t
OD_getIndex(const OD_entry_t* entry) {
 8000ee2:	b480      	push	{r7}
 8000ee4:	b083      	sub	sp, #12
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d002      	beq.n	8000ef6 <OD_getIndex+0x14>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	881b      	ldrh	r3, [r3, #0]
 8000ef4:	e000      	b.n	8000ef8 <OD_getIndex+0x16>
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	370c      	adds	r7, #12
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr

08000f04 <OD_extension_init>:
 * NULL, extension will be removed.
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d101      	bne.n	8000f18 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8000f14:	2305      	movs	r3, #5
 8000f16:	e003      	b.n	8000f20 <OD_extension_init+0x1c>
    }
    entry->extension = extension;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	683a      	ldr	r2, [r7, #0]
 8000f1c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <OD_get_u32>:
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b086      	sub	sp, #24
 8000f30:	af02      	add	r7, sp, #8
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	607a      	str	r2, [r7, #4]
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	460b      	mov	r3, r1
 8000f3a:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000f3c:	7af9      	ldrb	r1, [r7, #11]
 8000f3e:	683b      	ldr	r3, [r7, #0]
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2304      	movs	r3, #4
 8000f44:	687a      	ldr	r2, [r7, #4]
 8000f46:	68f8      	ldr	r0, [r7, #12]
 8000f48:	f001 fb94 	bl	8002674 <OD_get_value>
 8000f4c:	4603      	mov	r3, r0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3710      	adds	r7, #16
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <OD_read_1014_default>:
 * Custom functions for read/write OD object "COB-ID EMCY"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1014_default(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000f56:	b580      	push	{r7, lr}
 8000f58:	b086      	sub	sp, #24
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	60f8      	str	r0, [r7, #12]
 8000f5e:	60b9      	str	r1, [r7, #8]
 8000f60:	607a      	str	r2, [r7, #4]
 8000f62:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count < sizeof(uint32_t))
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d00c      	beq.n	8000f84 <OD_read_1014_default+0x2e>
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	7d1b      	ldrb	r3, [r3, #20]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d108      	bne.n	8000f84 <OD_read_1014_default+0x2e>
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <OD_read_1014_default+0x2e>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	d902      	bls.n	8000f84 <OD_read_1014_default+0x2e>
        || (countRead == NULL)) {
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d101      	bne.n	8000f88 <OD_read_1014_default+0x32>
        return ODR_DEV_INCOMPAT;
 8000f84:	2309      	movs	r3, #9
 8000f86:	e01a      	b.n	8000fbe <OD_read_1014_default+0x68>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0U : 0x80000000U;
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <OD_read_1014_default+0x44>
 8000f96:	2300      	movs	r3, #0
 8000f98:	e001      	b.n	8000f9e <OD_read_1014_default+0x48>
 8000f9a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8000f9e:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + (uint32_t)em->nodeId;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000fa6:	3380      	adds	r3, #128	; 0x80
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
    (void)CO_setUint32(buf, COB_IDEmergency32);
 8000fae:	6939      	ldr	r1, [r7, #16]
 8000fb0:	68b8      	ldr	r0, [r7, #8]
 8000fb2:	f7ff ff87 	bl	8000ec4 <CO_setUint32>

    *countRead = sizeof(uint32_t);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	2204      	movs	r2, #4
 8000fba:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3718      	adds	r7, #24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <OD_read_1003>:
 * Custom functions for read/write OD object _OD_statusBits_, optional
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_1003(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8000fc6:	b580      	push	{r7, lr}
 8000fc8:	b086      	sub	sp, #24
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	60f8      	str	r0, [r7, #12]
 8000fce:	60b9      	str	r1, [r7, #8]
 8000fd0:	607a      	str	r2, [r7, #4]
 8000fd2:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL) || ((count < 4U) && (stream->subIndex > 0U))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d00f      	beq.n	8000ffa <OD_read_1003+0x34>
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00c      	beq.n	8000ffa <OD_read_1003+0x34>
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d009      	beq.n	8000ffa <OD_read_1003+0x34>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	d803      	bhi.n	8000ff4 <OD_read_1003+0x2e>
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	7d1b      	ldrb	r3, [r3, #20]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <OD_read_1003+0x34>
        || (count < 1U)) {
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d101      	bne.n	8000ffe <OD_read_1003+0x38>
        return ODR_DEV_INCOMPAT;
 8000ffa:	2309      	movs	r3, #9
 8000ffc:	e04d      	b.n	800109a <OD_read_1003+0xd4>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2U) {
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	7f1b      	ldrb	r3, [r3, #28]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d801      	bhi.n	8001010 <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 800100c:	2309      	movs	r3, #9
 800100e:	e044      	b.n	800109a <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0U) {
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	7d1b      	ldrb	r3, [r3, #20]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d10b      	bne.n	8001030 <OD_read_1003+0x6a>
        (void)CO_setUint8(buf, em->fifoCount);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101e:	4619      	mov	r1, r3
 8001020:	68b8      	ldr	r0, [r7, #8]
 8001022:	f7ff ff3f 	bl	8000ea4 <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	2201      	movs	r2, #1
 800102a:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 800102c:	2300      	movs	r3, #0
 800102e:	e034      	b.n	800109a <OD_read_1003+0xd4>
    } else if (stream->subIndex <= em->fifoCount) {
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	7d1a      	ldrb	r2, [r3, #20]
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	f893 3020 	ldrb.w	r3, [r3, #32]
 800103a:	429a      	cmp	r2, r3
 800103c:	d82c      	bhi.n	8001098 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - (int16_t)stream->subIndex;
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	7f5b      	ldrb	r3, [r3, #29]
 8001042:	b29a      	uxth	r2, r3
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	7d1b      	ldrb	r3, [r3, #20]
 8001048:	b29b      	uxth	r3, r3
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	b29b      	uxth	r3, r3
 800104e:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 8001050:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001054:	2b00      	cmp	r3, #0
 8001056:	da07      	bge.n	8001068 <OD_read_1003+0xa2>
            index += (int16_t)em->fifoSize;
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	7f1b      	ldrb	r3, [r3, #28]
 800105c:	b29a      	uxth	r2, r3
 800105e:	8afb      	ldrh	r3, [r7, #22]
 8001060:	4413      	add	r3, r2
 8001062:	b29b      	uxth	r3, r3
 8001064:	82fb      	strh	r3, [r7, #22]
 8001066:	e007      	b.n	8001078 <OD_read_1003+0xb2>
        } else if (index >= (int16_t)(em->fifoSize)) {
 8001068:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	7f12      	ldrb	r2, [r2, #28]
 8001070:	4293      	cmp	r3, r2
 8001072:	db01      	blt.n	8001078 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 8001074:	2309      	movs	r3, #9
 8001076:	e010      	b.n	800109a <OD_read_1003+0xd4>
        } else { /* MISRA C 2004 14.10 */
        }
        (void)CO_setUint32(buf, em->fifo[index].msg);
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	699a      	ldr	r2, [r3, #24]
 800107c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001080:	00db      	lsls	r3, r3, #3
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4619      	mov	r1, r3
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	f7ff ff1b 	bl	8000ec4 <CO_setUint32>

        *countRead = sizeof(uint32_t);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2204      	movs	r2, #4
 8001092:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8001094:	2300      	movs	r3, #0
 8001096:	e000      	b.n	800109a <OD_read_1003+0xd4>
    } else {
        return ODR_NO_DATA;
 8001098:	2319      	movs	r3, #25
    }
}
 800109a:	4618      	mov	r0, r3
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <OD_write_1003>:

static ODR_t
OD_write_1003(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b086      	sub	sp, #24
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	60f8      	str	r0, [r7, #12]
 80010aa:	60b9      	str	r1, [r7, #8]
 80010ac:	607a      	str	r2, [r7, #4]
 80010ae:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != 1U) || (countWritten == NULL)) {
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d00c      	beq.n	80010d0 <OD_write_1003+0x2e>
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	7d1b      	ldrb	r3, [r3, #20]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d108      	bne.n	80010d0 <OD_write_1003+0x2e>
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d005      	beq.n	80010d0 <OD_write_1003+0x2e>
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d102      	bne.n	80010d0 <OD_write_1003+0x2e>
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <OD_write_1003+0x32>
        return ODR_DEV_INCOMPAT;
 80010d0:	2309      	movs	r3, #9
 80010d2:	e012      	b.n	80010fa <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0U) {
 80010d4:	68b8      	ldr	r0, [r7, #8]
 80010d6:	f7ff fed7 	bl	8000e88 <CO_getUint8>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 80010e0:	230f      	movs	r3, #15
 80010e2:	e00a      	b.n	80010fa <OD_write_1003+0x58>
    }

    CO_EM_t* em = (CO_EM_t*)stream->object;
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	2200      	movs	r2, #0
 80010ee:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <CO_EM_init>:
           OD_entry_t* OD_statusBits,
#endif
#if (((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0) || defined CO_DOXYGEN
           CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#endif
           const uint8_t nodeId, uint32_t* errInfo) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b088      	sub	sp, #32
 8001108:	af02      	add	r7, sp, #8
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
 8001110:	603b      	str	r3, [r7, #0]
    (void)nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001112:	2300      	movs	r3, #0
 8001114:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((em == NULL) || (OD_1001_errReg == NULL)
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d01a      	beq.n	8001152 <CO_EM_init+0x4e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d017      	beq.n	8001152 <CO_EM_init+0x4e>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
        || ((fifo == NULL) && (fifoSize >= 2U))
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d103      	bne.n	8001130 <CO_EM_init+0x2c>
 8001128:	f897 3020 	ldrb.w	r3, [r7, #32]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d810      	bhi.n	8001152 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
        || (OD_1014_cobIdEm == NULL) || (CANdevTx == NULL) || (nodeId < 1U) || (nodeId > 127U)
 8001130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00d      	beq.n	8001152 <CO_EM_init+0x4e>
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00a      	beq.n	8001152 <CO_EM_init+0x4e>
 800113c:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <CO_EM_init+0x4e>
 8001144:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8001148:	2b00      	cmp	r3, #0
 800114a:	db02      	blt.n	8001152 <CO_EM_init+0x4e>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
        || (OD_1003_preDefErr == NULL)
 800114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800114e:	2b00      	cmp	r3, #0
 8001150:	d102      	bne.n	8001158 <CO_EM_init+0x54>
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
        || (CANdevRx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e0a7      	b.n	80012a8 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    (void)memset(em, 0, sizeof(CO_EM_t));
 8001158:	2250      	movs	r2, #80	; 0x50
 800115a:	2100      	movs	r1, #0
 800115c:	68f8      	ldr	r0, [r7, #12]
 800115e:	f00d fe03 	bl	800ed68 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	68ba      	ldr	r2, [r7, #8]
 8001166:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8001168:	2300      	movs	r3, #0
 800116a:	2201      	movs	r2, #1
 800116c:	2100      	movs	r1, #0
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f001 fafa 	bl	8002768 <OD_getPtr>
 8001174:	4602      	mov	r2, r0
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	68db      	ldr	r3, [r3, #12]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d10c      	bne.n	800119c <CO_EM_init+0x98>
        if (errInfo != NULL) {
 8001182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <CO_EM_init+0x92>
            *errInfo = OD_getIndex(OD_1001_errReg);
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff feaa 	bl	8000ee2 <OD_getIndex>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001194:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001196:	f06f 030b 	mvn.w	r3, #11
 800119a:	e085      	b.n	80012a8 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	701a      	strb	r2, [r3, #0]

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    em->fifo = fifo;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	683a      	ldr	r2, [r7, #0]
 80011a8:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011b0:	771a      	strb	r2, [r3, #28]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    ODR_t odRet;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80011b2:	f107 0210 	add.w	r2, r7, #16
 80011b6:	2301      	movs	r3, #1
 80011b8:	2100      	movs	r1, #0
 80011ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011bc:	f7ff feb6 	bl	8000f2c <OD_get_u32>
 80011c0:	4603      	mov	r3, r0
 80011c2:	75bb      	strb	r3, [r7, #22]
    if ((odRet != ODR_OK) || ((COB_IDEmergency32 & 0x7FFFF800U) != 0U)) {
 80011c4:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d104      	bne.n	80011d6 <CO_EM_init+0xd2>
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4b38      	ldr	r3, [pc, #224]	; (80012b0 <CO_EM_init+0x1ac>)
 80011d0:	4013      	ands	r3, r2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d010      	beq.n	80011f8 <CO_EM_init+0xf4>
        if (errInfo != NULL) {
 80011d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d006      	beq.n	80011ea <CO_EM_init+0xe6>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80011dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80011de:	f7ff fe80 	bl	8000ee2 <OD_getIndex>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e8:	601a      	str	r2, [r3, #0]
        }
        /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK) {
 80011ea:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 80011f2:	f06f 030b 	mvn.w	r3, #11
 80011f6:	e057      	b.n	80012a8 <CO_EM_init+0x1a4>
     * memory. In that case it is necessary to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) {
        producerCanId += nodeId;
    }
#else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + (uint16_t)nodeId;
 80011f8:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	3380      	adds	r3, #128	; 0x80
 8001200:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000U) == 0U;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	0fdb      	lsrs	r3, r3, #31
 8001208:	b2db      	uxtb	r3, r3
 800120a:	461a      	mov	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	68fa      	ldr	r2, [r7, #12]
 8001214:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	4a26      	ldr	r2, [pc, #152]	; (80012b4 <CO_EM_init+0x1b0>)
 800121a:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	4a26      	ldr	r2, [pc, #152]	; (80012b8 <CO_EM_init+0x1b4>)
 8001220:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	3330      	adds	r3, #48	; 0x30
 8001226:	4619      	mov	r1, r3
 8001228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800122a:	f7ff fe6b 	bl	8000f04 <OD_extension_init>
 800122e:	4603      	mov	r3, r0
 8001230:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001232:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00c      	beq.n	8001254 <CO_EM_init+0x150>
        if (errInfo != NULL) {
 800123a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123c:	2b00      	cmp	r3, #0
 800123e:	d006      	beq.n	800124e <CO_EM_init+0x14a>
            *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8001240:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001242:	f7ff fe4e 	bl	8000ee2 <OD_getIndex>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800124c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800124e:	f06f 030b 	mvn.w	r3, #11
 8001252:	e029      	b.n	80012a8 <CO_EM_init+0x1a4>
    }
#endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800125a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, producerCanId, false, 8U, false);
 800125e:	8aba      	ldrh	r2, [r7, #20]
 8001260:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001262:	2300      	movs	r3, #0
 8001264:	9301      	str	r3, [sp, #4]
 8001266:	2308      	movs	r3, #8
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	68b8      	ldr	r0, [r7, #8]
 800126e:	f006 f8e9 	bl	8007444 <CO_CANtxBufferInit>
 8001272:	4602      	mov	r2, r0
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	62da      	str	r2, [r3, #44]	; 0x2c

    if (em->CANtxBuff == NULL) {
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	2b00      	cmp	r3, #0
 800127e:	d102      	bne.n	8001286 <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	e010      	b.n	80012a8 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT */
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4a0b      	ldr	r2, [pc, #44]	; (80012bc <CO_EM_init+0x1b8>)
 8001290:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4a0a      	ldr	r2, [pc, #40]	; (80012c0 <CO_EM_init+0x1bc>)
 8001296:	649a      	str	r2, [r3, #72]	; 0x48
    (void)OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	3340      	adds	r3, #64	; 0x40
 800129c:	4619      	mov	r1, r3
 800129e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012a0:	f7ff fe30 	bl	8000f04 <OD_extension_init>
    em->pFunctSignalRx = NULL;
    /* configure SDO server CAN reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CO_CAN_ID_EMERGENCY, 0x780, false, (void*)em, CO_EM_receive);
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80012a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3718      	adds	r7, #24
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	7ffff800 	.word	0x7ffff800
 80012b4:	08000f57 	.word	0x08000f57
 80012b8:	0800227f 	.word	0x0800227f
 80012bc:	08000fc7 	.word	0x08000fc7
 80012c0:	080010a3 	.word	0x080010a3

080012c4 <CO_EM_process>:
    }
}
#endif

void
CO_EM_process(CO_EM_t* em, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b088      	sub	sp, #32
 80012c8:	af02      	add	r7, sp, #8
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) == 0
    (void)timeDifference_us; /* may be unused */
#endif

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	8a5b      	ldrh	r3, [r3, #18]
 80012d8:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	8a1b      	ldrh	r3, [r3, #16]
 80012de:	8aba      	ldrh	r2, [r7, #20]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	f000 80a3 	beq.w	800142c <CO_EM_process+0x168>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	8a1a      	ldrh	r2, [r3, #16]
 80012ea:	8abb      	ldrh	r3, [r7, #20]
 80012ec:	4053      	eors	r3, r2
 80012ee:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	8aba      	ldrh	r2, [r7, #20]
 80012f4:	821a      	strh	r2, [r3, #16]

        if ((CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U) {
 80012f6:	8a7a      	ldrh	r2, [r7, #18]
 80012f8:	f240 1301 	movw	r3, #257	; 0x101
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d010      	beq.n	8001324 <CO_EM_process+0x60>
            CO_error(em, (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0U, CO_EM_CAN_BUS_WARNING,
 8001302:	8aba      	ldrh	r2, [r7, #20]
 8001304:	f240 1301 	movw	r3, #257	; 0x101
 8001308:	4013      	ands	r3, r2
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4619      	mov	r1, r3
 8001316:	2300      	movs	r3, #0
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	2201      	movs	r2, #1
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 f91b 	bl	800155a <CO_error>
                     CO_EMC_NO_ERROR, 0);
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PASSIVE) != 0U) {
 8001324:	8a7b      	ldrh	r3, [r7, #18]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d010      	beq.n	8001350 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0U, CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 800132e:	8abb      	ldrh	r3, [r7, #20]
 8001330:	f003 0302 	and.w	r3, r3, #2
 8001334:	2b00      	cmp	r3, #0
 8001336:	bf14      	ite	ne
 8001338:	2301      	movne	r3, #1
 800133a:	2300      	moveq	r3, #0
 800133c:	b2db      	uxtb	r3, r3
 800133e:	4619      	mov	r1, r3
 8001340:	2300      	movs	r3, #0
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f248 1320 	movw	r3, #33056	; 0x8120
 8001348:	2207      	movs	r2, #7
 800134a:	68f8      	ldr	r0, [r7, #12]
 800134c:	f000 f905 	bl	800155a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_BUS_OFF) != 0U) {
 8001350:	8a7b      	ldrh	r3, [r7, #18]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d010      	beq.n	800137c <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0U, CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);
 800135a:	8abb      	ldrh	r3, [r7, #20]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	bf14      	ite	ne
 8001364:	2301      	movne	r3, #1
 8001366:	2300      	moveq	r3, #0
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4619      	mov	r1, r3
 800136c:	2300      	movs	r3, #0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	f248 1340 	movw	r3, #33088	; 0x8140
 8001374:	2212      	movs	r2, #18
 8001376:	68f8      	ldr	r0, [r7, #12]
 8001378:	f000 f8ef 	bl	800155a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_OVERFLOW) != 0U) {
 800137c:	8a7b      	ldrh	r3, [r7, #18]
 800137e:	f003 0308 	and.w	r3, r3, #8
 8001382:	2b00      	cmp	r3, #0
 8001384:	d010      	beq.n	80013a8 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0U, CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 8001386:	8abb      	ldrh	r3, [r7, #20]
 8001388:	f003 0308 	and.w	r3, r3, #8
 800138c:	2b00      	cmp	r3, #0
 800138e:	bf14      	ite	ne
 8001390:	2301      	movne	r3, #1
 8001392:	2300      	moveq	r3, #0
 8001394:	b2db      	uxtb	r3, r3
 8001396:	4619      	mov	r1, r3
 8001398:	2300      	movs	r3, #0
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f248 1310 	movw	r3, #33040	; 0x8110
 80013a0:	2214      	movs	r2, #20
 80013a2:	68f8      	ldr	r0, [r7, #12]
 80013a4:	f000 f8d9 	bl	800155a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRTX_PDO_LATE) != 0U) {
 80013a8:	8a7b      	ldrh	r3, [r7, #18]
 80013aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d010      	beq.n	80013d4 <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0U, CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);
 80013b2:	8abb      	ldrh	r3, [r7, #20]
 80013b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bf14      	ite	ne
 80013bc:	2301      	movne	r3, #1
 80013be:	2300      	moveq	r3, #0
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	4619      	mov	r1, r3
 80013c4:	2300      	movs	r3, #0
 80013c6:	9300      	str	r3, [sp, #0]
 80013c8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80013cc:	2215      	movs	r2, #21
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f000 f8c3 	bl	800155a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_PASSIVE) != 0U) {
 80013d4:	8a7b      	ldrh	r3, [r7, #18]
 80013d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d010      	beq.n	8001400 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0U, CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);
 80013de:	8abb      	ldrh	r3, [r7, #20]
 80013e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	bf14      	ite	ne
 80013e8:	2301      	movne	r3, #1
 80013ea:	2300      	moveq	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	4619      	mov	r1, r3
 80013f0:	2300      	movs	r3, #0
 80013f2:	9300      	str	r3, [sp, #0]
 80013f4:	f248 1320 	movw	r3, #33056	; 0x8120
 80013f8:	2206      	movs	r2, #6
 80013fa:	68f8      	ldr	r0, [r7, #12]
 80013fc:	f000 f8ad 	bl	800155a <CO_error>
        }
        if ((CANerrStChanged & CO_CAN_ERRRX_OVERFLOW) != 0U) {
 8001400:	8a7b      	ldrh	r3, [r7, #18]
 8001402:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001406:	2b00      	cmp	r3, #0
 8001408:	d010      	beq.n	800142c <CO_EM_process+0x168>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0U, CO_EM_CAN_RXB_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);
 800140a:	8abb      	ldrh	r3, [r7, #20]
 800140c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001410:	2b00      	cmp	r3, #0
 8001412:	bf14      	ite	ne
 8001414:	2301      	movne	r3, #1
 8001416:	2300      	moveq	r3, #0
 8001418:	b2db      	uxtb	r3, r3
 800141a:	4619      	mov	r1, r3
 800141c:	2300      	movs	r3, #0
 800141e:	9300      	str	r3, [sp, #0]
 8001420:	f248 1310 	movw	r3, #33040	; 0x8110
 8001424:	2213      	movs	r2, #19
 8001426:	68f8      	ldr	r0, [r7, #12]
 8001428:	f000 f897 	bl	800155a <CO_error>
        }
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC) {
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	795b      	ldrb	r3, [r3, #5]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <CO_EM_process+0x17c>
        errorRegister |= (uint8_t)CO_ERR_REG_GENERIC_ERR;
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	f043 0301 	orr.w	r3, r3, #1
 800143e:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE) {
        errorRegister |= (uint8_t)CO_ERR_REG_TEMPERATURE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION) {
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	789b      	ldrb	r3, [r3, #2]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d103      	bne.n	8001450 <CO_EM_process+0x18c>
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	78db      	ldrb	r3, [r3, #3]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <CO_EM_process+0x194>
        errorRegister |= (uint8_t)CO_ERR_REG_COMMUNICATION;
 8001450:	7dfb      	ldrb	r3, [r7, #23]
 8001452:	f043 0310 	orr.w	r3, r3, #16
 8001456:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE) {
        errorRegister |= (uint8_t)CO_ERR_REG_DEV_PROFILE;
    }
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER) {
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	7a1b      	ldrb	r3, [r3, #8]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d103      	bne.n	8001468 <CO_EM_process+0x1a4>
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	7a5b      	ldrb	r3, [r3, #9]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <CO_EM_process+0x1ac>
        errorRegister |= (uint8_t)CO_ERR_REG_MANUFACTURER;
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800146e:	75fb      	strb	r3, [r7, #23]
    }
    *em->errorRegister = errorRegister;
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	7dfa      	ldrb	r2, [r7, #23]
 8001476:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d067      	beq.n	800154e <CO_EM_process+0x28a>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    if (em->fifoSize >= 2U) {
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	7f1b      	ldrb	r3, [r3, #28]
 8001482:	2b01      	cmp	r3, #1
 8001484:	d965      	bls.n	8001552 <CO_EM_process+0x28e>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	7f9b      	ldrb	r3, [r3, #30]
 800148a:	747b      	strb	r3, [r7, #17]

        if (!em->CANtxBuff->bufferFull && (fifoPpPtr != em->fifoWrPtr)
            && (em->inhibitEmTimer >= em->inhibitEmTime_us)) {
            em->inhibitEmTimer = 0;
#else
        if ((!em->CANtxBuff->bufferFull) && (fifoPpPtr != em->fifoWrPtr)) {
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d15d      	bne.n	8001552 <CO_EM_process+0x28e>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	7f5b      	ldrb	r3, [r3, #29]
 800149a:	7c7a      	ldrb	r2, [r7, #17]
 800149c:	429a      	cmp	r2, r3
 800149e:	d058      	beq.n	8001552 <CO_EM_process+0x28e>
#endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t)errorRegister << 16;
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	699a      	ldr	r2, [r3, #24]
 80014a4:	7c7b      	ldrb	r3, [r7, #17]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4413      	add	r3, r2
 80014aa:	6819      	ldr	r1, [r3, #0]
 80014ac:	7dfb      	ldrb	r3, [r7, #23]
 80014ae:	041a      	lsls	r2, r3, #16
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	6998      	ldr	r0, [r3, #24]
 80014b4:	7c7b      	ldrb	r3, [r7, #17]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4403      	add	r3, r0
 80014ba:	430a      	orrs	r2, r1
 80014bc:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            (void)memcpy((void*)em->CANtxBuff->data, (void*)&em->fifo[fifoPpPtr].msg, sizeof(em->CANtxBuff->data));
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014c2:	1d58      	adds	r0, r3, #5
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	699a      	ldr	r2, [r3, #24]
 80014c8:	7c7b      	ldrb	r3, [r7, #17]
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	4413      	add	r3, r2
 80014ce:	2208      	movs	r2, #8
 80014d0:	4619      	mov	r1, r3
 80014d2:	f00d fcd4 	bl	800ee7e <memcpy>
            (void)CO_CANsend(em->CANdevTx, em->CANtxBuff);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	695a      	ldr	r2, [r3, #20]
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014de:	4619      	mov	r1, r3
 80014e0:	4610      	mov	r0, r2
 80014e2:	f006 f829 	bl	8007538 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
#endif

            /* increment pointer */
            fifoPpPtr++;
 80014e6:	7c7b      	ldrb	r3, [r7, #17]
 80014e8:	3301      	adds	r3, #1
 80014ea:	747b      	strb	r3, [r7, #17]
            em->fifoPpPtr = (fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0U;
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	7f1b      	ldrb	r3, [r3, #28]
 80014f0:	7c7a      	ldrb	r2, [r7, #17]
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d201      	bcs.n	80014fa <CO_EM_process+0x236>
 80014f6:	7c7a      	ldrb	r2, [r7, #17]
 80014f8:	e000      	b.n	80014fc <CO_EM_process+0x238>
 80014fa:	2200      	movs	r2, #0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all messages from fifo buffer are processed */
            if (em->fifoOverflow == 1U) {
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	7fdb      	ldrb	r3, [r3, #31]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d10c      	bne.n	8001522 <CO_EM_process+0x25e>
                em->fifoOverflow = 2;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2202      	movs	r2, #2
 800150c:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL, CO_EMC_GENERIC, 0);
 800150e:	2300      	movs	r3, #0
 8001510:	9300      	str	r3, [sp, #0]
 8001512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001516:	2220      	movs	r2, #32
 8001518:	2101      	movs	r1, #1
 800151a:	68f8      	ldr	r0, [r7, #12]
 800151c:	f000 f81d 	bl	800155a <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8001520:	e017      	b.n	8001552 <CO_EM_process+0x28e>
            } else if ((em->fifoOverflow == 2U) && (em->fifoPpPtr == em->fifoWrPtr)) {
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	7fdb      	ldrb	r3, [r3, #31]
 8001526:	2b02      	cmp	r3, #2
 8001528:	d113      	bne.n	8001552 <CO_EM_process+0x28e>
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	7f9a      	ldrb	r2, [r3, #30]
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	7f5b      	ldrb	r3, [r3, #29]
 8001532:	429a      	cmp	r2, r3
 8001534:	d10d      	bne.n	8001552 <CO_EM_process+0x28e>
                em->fifoOverflow = 0;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2200      	movs	r2, #0
 800153a:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 800153c:	2300      	movs	r3, #0
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	2300      	movs	r3, #0
 8001542:	2220      	movs	r2, #32
 8001544:	2100      	movs	r1, #0
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 f807 	bl	800155a <CO_error>
    return;
 800154c:	e001      	b.n	8001552 <CO_EM_process+0x28e>
        return;
 800154e:	bf00      	nop
 8001550:	e000      	b.n	8001554 <CO_EM_process+0x290>
    return;
 8001552:	bf00      	nop
}
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <CO_error>:

void
CO_error(CO_EM_t* em, bool_t setError, const uint8_t errorBit, uint16_t errorCode, uint32_t infoCode) {
 800155a:	b480      	push	{r7}
 800155c:	b08d      	sub	sp, #52	; 0x34
 800155e:	af00      	add	r7, sp, #0
 8001560:	60f8      	str	r0, [r7, #12]
 8001562:	60b9      	str	r1, [r7, #8]
 8001564:	4611      	mov	r1, r2
 8001566:	461a      	mov	r2, r3
 8001568:	460b      	mov	r3, r1
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) {
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	2b00      	cmp	r3, #0
 8001574:	f000 80a6 	beq.w	80016c4 <CO_error+0x16a>
        return;
    }

    uint8_t index = errorBit >> 3;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1U << (errorBit & 0x7U);
 8001580:	79fb      	ldrb	r3, [r7, #7]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	2201      	movs	r2, #1
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)) {
 8001590:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001594:	2b09      	cmp	r3, #9
 8001596:	d90a      	bls.n	80015ae <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8001598:	2305      	movs	r3, #5
 800159a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1U << (CO_EM_WRONG_ERROR_REPORT & 0x7U);
 800159e:	2301      	movs	r3, #1
 80015a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 80015a4:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 80015a8:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t* errorStatusBits = &em->errorStatusBits[index];
 80015ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4413      	add	r3, r2
 80015b6:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 80015b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ba:	781a      	ldrb	r2, [r3, #0]
 80015bc:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80015c0:	4013      	ands	r3, r2
 80015c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d004      	beq.n	80015d6 <CO_error+0x7c>
        if (errorStatusBitMasked != 0U) {
 80015cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d006      	beq.n	80015e2 <CO_error+0x88>
            return;
 80015d4:	e079      	b.n	80016ca <CO_error+0x170>
        }
    } else {
        if (errorStatusBitMasked == 0U) {
 80015d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d074      	beq.n	80016c8 <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 80015de:	2300      	movs	r3, #0
 80015e0:	80bb      	strh	r3, [r7, #4]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    /* prepare emergency message. Error register will be added in post-process */
    uint32_t errMsg = ((uint32_t)errorBit << 24) | CO_SWAP_16(errorCode);
 80015e2:	79fb      	ldrb	r3, [r7, #7]
 80015e4:	061a      	lsls	r2, r3, #24
 80015e6:	88bb      	ldrh	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	623b      	str	r3, [r7, #32]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 80015ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015ee:	61fb      	str	r3, [r7, #28]
#endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80015f4:	f3ef 8210 	mrs	r2, PRIMASK
 80015f8:	617a      	str	r2, [r7, #20]
  return(result);
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 80015fe:	b672      	cpsid	i
}
 8001600:	bf00      	nop
    if (setError) {
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d008      	beq.n	800161a <CO_error+0xc0>
        *errorStatusBits |= bitmask;
 8001608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800160a:	781a      	ldrb	r2, [r3, #0]
 800160c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001610:	4313      	orrs	r3, r2
 8001612:	b2da      	uxtb	r2, r3
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	701a      	strb	r2, [r3, #0]
 8001618:	e00b      	b.n	8001632 <CO_error+0xd8>
    } else {
        *errorStatusBits &= ~bitmask;
 800161a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	b25a      	sxtb	r2, r3
 8001620:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8001624:	43db      	mvns	r3, r3
 8001626:	b25b      	sxtb	r3, r3
 8001628:	4013      	ands	r3, r2
 800162a:	b25b      	sxtb	r3, r3
 800162c:	b2da      	uxtb	r2, r3
 800162e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001630:	701a      	strb	r2, [r3, #0]
    }

#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    if (em->fifoSize >= 2U) {
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	7f1b      	ldrb	r3, [r3, #28]
 8001636:	2b01      	cmp	r3, #1
 8001638:	d93c      	bls.n	80016b4 <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	7f5b      	ldrb	r3, [r3, #29]
 800163e:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1U;
 8001640:	7efb      	ldrb	r3, [r7, #27]
 8001642:	3301      	adds	r3, #1
 8001644:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	7f1b      	ldrb	r3, [r3, #28]
 800164c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001650:	429a      	cmp	r2, r3
 8001652:	d302      	bcc.n	800165a <CO_error+0x100>
            fifoWrPtrNext = 0;
 8001654:	2300      	movs	r3, #0
 8001656:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	7f9b      	ldrb	r3, [r3, #30]
 800165e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001662:	429a      	cmp	r2, r3
 8001664:	d103      	bne.n	800166e <CO_error+0x114>
            em->fifoOverflow = 1;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	2201      	movs	r2, #1
 800166a:	77da      	strb	r2, [r3, #31]
 800166c:	e022      	b.n	80016b4 <CO_error+0x15a>
        } else {
            em->fifo[fifoWrPtr].msg = errMsg;
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	7efb      	ldrb	r3, [r7, #27]
 8001674:	00db      	lsls	r3, r3, #3
 8001676:	4413      	add	r3, r2
 8001678:	6a3a      	ldr	r2, [r7, #32]
 800167a:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	699a      	ldr	r2, [r3, #24]
 8001680:	7efb      	ldrb	r3, [r7, #27]
 8001682:	00db      	lsls	r3, r3, #3
 8001684:	4413      	add	r3, r2
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	605a      	str	r2, [r3, #4]
#endif
            em->fifoWrPtr = fifoWrPtrNext;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001690:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1U)) {
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001698:	461a      	mov	r2, r3
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	7f1b      	ldrb	r3, [r3, #28]
 800169e:	3b01      	subs	r3, #1
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <CO_error+0x15a>
                em->fifoCount++;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016aa:	3301      	adds	r3, #1
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f883 2020 	strb.w	r2, [r3, #32]
            }
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ba:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f383 8810 	msr	PRIMASK, r3
}
 80016c2:	e002      	b.n	80016ca <CO_error+0x170>
        return;
 80016c4:	bf00      	nop
 80016c6:	e000      	b.n	80016ca <CO_error+0x170>
            return;
 80016c8:	bf00      	nop
    if ((em->pFunctSignalPre != NULL) && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
#endif
#endif
}
 80016ca:	3734      	adds	r7, #52	; 0x34
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <CO_getUint32>:
CO_getUint32(const void* buf) {
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80016e0:	60fb      	str	r3, [r7, #12]
    return value;
 80016e2:	68fb      	ldr	r3, [r7, #12]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	3714      	adds	r7, #20
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <OD_getIndex+0x14>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	e000      	b.n	8001706 <OD_getIndex+0x16>
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
 800171a:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001722:	2305      	movs	r3, #5
 8001724:	e003      	b.n	800172e <OD_extension_init+0x1c>
    entry->extension = extension;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800172c:	2300      	movs	r3, #0
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 800173a:	b580      	push	{r7, lr}
 800173c:	b086      	sub	sp, #24
 800173e:	af02      	add	r7, sp, #8
 8001740:	60f8      	str	r0, [r7, #12]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	460b      	mov	r3, r1
 8001748:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800174a:	7af9      	ldrb	r1, [r7, #11]
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	9300      	str	r3, [sp, #0]
 8001750:	2304      	movs	r3, #4
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	68f8      	ldr	r0, [r7, #12]
 8001756:	f000 ff8d 	bl	8002674 <OD_get_value>
 800175a:	4603      	mov	r3, r0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_HBcons_receive(void* object, void* msg) {
 8001764:	b480      	push	{r7}
 8001766:	b087      	sub	sp, #28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t* HBconsNode = object;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	3305      	adds	r3, #5
 800177c:	60fb      	str	r3, [r7, #12]

    if (DLC == 1U) {
 800177e:	7cfb      	ldrb	r3, [r7, #19]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d107      	bne.n	8001794 <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	b25a      	sxtb	r2, r3
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	2201      	movs	r2, #1
 8001792:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8001794:	bf00      	nop
 8001796:	371c      	adds	r7, #28
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr

080017a0 <OD_write_1016>:
 * Custom function for writing OD object "Consumer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1016(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b088      	sub	sp, #32
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	60f8      	str	r0, [r7, #12]
 80017a8:	60b9      	str	r1, [r7, #8]
 80017aa:	607a      	str	r2, [r7, #4]
 80017ac:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t* HBcons = stream->object;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61fb      	str	r3, [r7, #28]

    if ((stream == NULL) || (buf == NULL) || (stream->subIndex < 1U)
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d012      	beq.n	80017e0 <OD_write_1016+0x40>
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d00f      	beq.n	80017e0 <OD_write_1016+0x40>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	7d1b      	ldrb	r3, [r3, #20]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d00b      	beq.n	80017e0 <OD_write_1016+0x40>
        || (stream->subIndex > HBcons->numberOfMonitoredNodes) || (count != sizeof(uint32_t))
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	7d1a      	ldrb	r2, [r3, #20]
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	7a1b      	ldrb	r3, [r3, #8]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d805      	bhi.n	80017e0 <OD_write_1016+0x40>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	d102      	bne.n	80017e0 <OD_write_1016+0x40>
        || (countWritten == NULL)) {
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <OD_write_1016+0x44>
        return ODR_DEV_INCOMPAT;
 80017e0:	2309      	movs	r3, #9
 80017e2:	e020      	b.n	8001826 <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 80017e4:	68b8      	ldr	r0, [r7, #8]
 80017e6:	f7ff ff75 	bl	80016d4 <CO_getUint32>
 80017ea:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	0c1b      	lsrs	r3, r3, #16
 80017f0:	75fb      	strb	r3, [r7, #23]
    uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1U, nodeId, consumer_time);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	7d1b      	ldrb	r3, [r3, #20]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	b2d9      	uxtb	r1, r3
 80017fe:	8abb      	ldrh	r3, [r7, #20]
 8001800:	7dfa      	ldrb	r2, [r7, #23]
 8001802:	69f8      	ldr	r0, [r7, #28]
 8001804:	f000 f8be 	bl	8001984 <CO_HBconsumer_initEntry>
 8001808:	4603      	mov	r3, r0
 800180a:	74fb      	strb	r3, [r7, #19]
    if (ret != CO_ERROR_NO) {
 800180c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8001814:	2308      	movs	r3, #8
 8001816:	e006      	b.n	8001826 <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	68b9      	ldr	r1, [r7, #8]
 800181e:	68f8      	ldr	r0, [r7, #12]
 8001820:	f000 fd2d 	bl	800227e <OD_writeOriginal>
 8001824:	4603      	mov	r3, r0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <CO_HBconsumer_init>:
#endif

CO_ReturnError_t
CO_HBconsumer_init(CO_HBconsumer_t* HBcons, CO_EM_t* em, CO_HBconsNode_t* monitoredNodes, uint8_t monitoredNodesCount,
                   OD_entry_t* OD_1016_HBcons, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdxStart, uint32_t* errInfo) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b088      	sub	sp, #32
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	60b9      	str	r1, [r7, #8]
 800183a:	607a      	str	r2, [r7, #4]
 800183c:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if ((HBcons == NULL) || (em == NULL) || (monitoredNodes == NULL) || (OD_1016_HBcons == NULL)
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00b      	beq.n	800185c <CO_HBconsumer_init+0x2c>
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <CO_HBconsumer_init+0x2c>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d005      	beq.n	800185c <CO_HBconsumer_init+0x2c>
 8001850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <CO_HBconsumer_init+0x2c>
        || (CANdevRx == NULL)) {
 8001856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001858:	2b00      	cmp	r3, #0
 800185a:	d102      	bne.n	8001862 <CO_HBconsumer_init+0x32>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800185c:	f04f 33ff 	mov.w	r3, #4294967295
 8001860:	e087      	b.n	8001972 <CO_HBconsumer_init+0x142>
    }

    /* Configure object variables */
    (void)memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8001862:	2230      	movs	r2, #48	; 0x30
 8001864:	2100      	movs	r1, #0
 8001866:	68f8      	ldr	r0, [r7, #12]
 8001868:	f00d fa7e 	bl	800ed68 <memset>
    HBcons->em = em;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800187c:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001882:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
                                         ? (OD_1016_HBcons->subEntriesCount - 1U)
                                         : monitoredNodesCount;
 8001884:	78fa      	ldrb	r2, [r7, #3]
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8001886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001888:	789b      	ldrb	r3, [r3, #2]
 800188a:	3b01      	subs	r3, #1
                                         : monitoredNodesCount;
 800188c:	4293      	cmp	r3, r2
 800188e:	bf28      	it	cs
 8001890:	4613      	movcs	r3, r2
    HBcons->numberOfMonitoredNodes = ((OD_1016_HBcons->subEntriesCount - 1U) < monitoredNodesCount)
 8001892:	b2da      	uxtb	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	721a      	strb	r2, [r3, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001898:	2300      	movs	r3, #0
 800189a:	77fb      	strb	r3, [r7, #31]
 800189c:	e041      	b.n	8001922 <CO_HBconsumer_init+0xf2>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1U, &val, true);
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	3301      	adds	r3, #1
 80018a2:	b2d9      	uxtb	r1, r3
 80018a4:	f107 0214 	add.w	r2, r7, #20
 80018a8:	2301      	movs	r3, #1
 80018aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018ac:	f7ff ff45 	bl	800173a <OD_get_u32>
 80018b0:	4603      	mov	r3, r0
 80018b2:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 80018b4:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d00c      	beq.n	80018d6 <CO_HBconsumer_init+0xa6>
            if (errInfo != NULL) {
 80018bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d006      	beq.n	80018d0 <CO_HBconsumer_init+0xa0>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 80018c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80018c4:	f7ff ff14 	bl	80016f0 <OD_getIndex>
 80018c8:	4603      	mov	r3, r0
 80018ca:	461a      	mov	r2, r3
 80018cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018ce:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80018d0:	f06f 030b 	mvn.w	r3, #11
 80018d4:	e04d      	b.n	8001972 <CO_HBconsumer_init+0x142>
        }

        uint8_t nodeId = (uint8_t)((val >> 16) & 0xFFU);
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	0c1b      	lsrs	r3, r3, #16
 80018da:	777b      	strb	r3, [r7, #29]
        uint16_t consumer_time = (uint16_t)(val & 0xFFFFU);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, consumer_time);
 80018e0:	8b7b      	ldrh	r3, [r7, #26]
 80018e2:	7f7a      	ldrb	r2, [r7, #29]
 80018e4:	7ff9      	ldrb	r1, [r7, #31]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f84c 	bl	8001984 <CO_HBconsumer_initEntry>
 80018ec:	4603      	mov	r3, r0
 80018ee:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 80018f0:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d011      	beq.n	800191c <CO_HBconsumer_init+0xec>
            if (errInfo != NULL) {
 80018f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d006      	beq.n	800190c <CO_HBconsumer_init+0xdc>
                *errInfo = OD_getIndex(OD_1016_HBcons);
 80018fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001900:	f7ff fef6 	bl	80016f0 <OD_getIndex>
 8001904:	4603      	mov	r3, r0
 8001906:	461a      	mov	r2, r3
 8001908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800190a:	601a      	str	r2, [r3, #0]
            }
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS) {
 800190c:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001910:	f113 0f0c 	cmn.w	r3, #12
 8001914:	d002      	beq.n	800191c <CO_HBconsumer_init+0xec>
                return ret;
 8001916:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800191a:	e02a      	b.n	8001972 <CO_HBconsumer_init+0x142>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	3301      	adds	r3, #1
 8001920:	77fb      	strb	r3, [r7, #31]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	7a1b      	ldrb	r3, [r3, #8]
 8001926:	7ffa      	ldrb	r2, [r7, #31]
 8001928:	429a      	cmp	r2, r3
 800192a:	d3b8      	bcc.n	800189e <CO_HBconsumer_init+0x6e>
        }
    }

    /* configure extension for OD */
#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    HBcons->OD_1016_extension.object = HBcons;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a11      	ldr	r2, [pc, #68]	; (800197c <CO_HBconsumer_init+0x14c>)
 8001936:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4a11      	ldr	r2, [pc, #68]	; (8001980 <CO_HBconsumer_init+0x150>)
 800193c:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	3320      	adds	r3, #32
 8001942:	4619      	mov	r1, r3
 8001944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001946:	f7ff fee4 	bl	8001712 <OD_extension_init>
 800194a:	4603      	mov	r3, r0
 800194c:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 800194e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d00c      	beq.n	8001970 <CO_HBconsumer_init+0x140>
        if (errInfo != NULL) {
 8001956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001958:	2b00      	cmp	r3, #0
 800195a:	d006      	beq.n	800196a <CO_HBconsumer_init+0x13a>
            *errInfo = OD_getIndex(OD_1016_HBcons);
 800195c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800195e:	f7ff fec7 	bl	80016f0 <OD_getIndex>
 8001962:	4603      	mov	r3, r0
 8001964:	461a      	mov	r2, r3
 8001966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001968:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800196a:	f06f 030b 	mvn.w	r3, #11
 800196e:	e000      	b.n	8001972 <CO_HBconsumer_init+0x142>
    }
#endif

    return CO_ERROR_NO;
 8001970:	2300      	movs	r3, #0
}
 8001972:	4618      	mov	r0, r3
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	080021cf 	.word	0x080021cf
 8001980:	080017a1 	.word	0x080017a1

08001984 <CO_HBconsumer_initEntry>:

static CO_ReturnError_t
CO_HBconsumer_initEntry(CO_HBconsumer_t* HBcons, uint8_t idx, uint8_t nodeId, uint16_t consumerTime_ms) {
 8001984:	b590      	push	{r4, r7, lr}
 8001986:	b08d      	sub	sp, #52	; 0x34
 8001988:	af04      	add	r7, sp, #16
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	4608      	mov	r0, r1
 800198e:	4611      	mov	r1, r2
 8001990:	461a      	mov	r2, r3
 8001992:	4603      	mov	r3, r0
 8001994:	70fb      	strb	r3, [r7, #3]
 8001996:	460b      	mov	r3, r1
 8001998:	70bb      	strb	r3, [r7, #2]
 800199a:	4613      	mov	r3, r2
 800199c:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800199e:	2300      	movs	r3, #0
 80019a0:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if ((HBcons == NULL) || (idx >= HBcons->numberOfMonitoredNodes)) {
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d004      	beq.n	80019b2 <CO_HBconsumer_initEntry+0x2e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7a1b      	ldrb	r3, [r3, #8]
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d302      	bcc.n	80019b8 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80019b2:	f04f 33ff 	mov.w	r3, #4294967295
 80019b6:	e076      	b.n	8001aa6 <CO_HBconsumer_initEntry+0x122>
    }

    /* verify for duplicate entries */
    if ((consumerTime_ms != 0U) && (nodeId != 0U)) {
 80019b8:	883b      	ldrh	r3, [r7, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d024      	beq.n	8001a08 <CO_HBconsumer_initEntry+0x84>
 80019be:	78bb      	ldrb	r3, [r7, #2]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d021      	beq.n	8001a08 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80019c4:	2300      	movs	r3, #0
 80019c6:	77bb      	strb	r3, [r7, #30]
 80019c8:	e019      	b.n	80019fe <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685a      	ldr	r2, [r3, #4]
 80019ce:	7fbb      	ldrb	r3, [r7, #30]
 80019d0:	011b      	lsls	r3, r3, #4
 80019d2:	4413      	add	r3, r2
 80019d4:	f107 0408 	add.w	r4, r7, #8
 80019d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80019da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if ((idx != i) && (node.time_us != 0U) && (node.nodeId == nodeId)) {
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	7fbb      	ldrb	r3, [r7, #30]
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d008      	beq.n	80019f8 <CO_HBconsumer_initEntry+0x74>
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d005      	beq.n	80019f8 <CO_HBconsumer_initEntry+0x74>
 80019ec:	7a3b      	ldrb	r3, [r7, #8]
 80019ee:	78ba      	ldrb	r2, [r7, #2]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d101      	bne.n	80019f8 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 80019f4:	23f4      	movs	r3, #244	; 0xf4
 80019f6:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 80019f8:	7fbb      	ldrb	r3, [r7, #30]
 80019fa:	3301      	adds	r3, #1
 80019fc:	77bb      	strb	r3, [r7, #30]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	7a1b      	ldrb	r3, [r3, #8]
 8001a02:	7fba      	ldrb	r2, [r7, #30]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d3e0      	bcc.n	80019ca <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8001a08:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d148      	bne.n	8001aa2 <CO_HBconsumer_initEntry+0x11e>
        uint16_t COB_ID;

        CO_HBconsNode_t* monitoredNode = &HBcons->monitoredNodes[idx];
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	78fb      	ldrb	r3, [r7, #3]
 8001a16:	011b      	lsls	r3, r3, #4
 8001a18:	4413      	add	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8001a1c:	69bb      	ldr	r3, [r7, #24]
 8001a1e:	78ba      	ldrb	r2, [r7, #2]
 8001a20:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (uint32_t)consumerTime_ms * 1000U;
 8001a22:	883b      	ldrh	r3, [r7, #0]
 8001a24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a28:	fb03 f202 	mul.w	r2, r3, r2
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	22ff      	movs	r2, #255	; 0xff
 8001a34:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if ((monitoredNode->nodeId != 0U) && (monitoredNode->time_us != 0U)) {
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00d      	beq.n	8001a60 <CO_HBconsumer_initEntry+0xdc>
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d009      	beq.n	8001a60 <CO_HBconsumer_initEntry+0xdc>
            COB_ID = monitoredNode->nodeId + (uint16_t)CO_CAN_ID_HEARTBEAT;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	b29b      	uxth	r3, r3
 8001a52:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8001a56:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	709a      	strb	r2, [r3, #2]
 8001a5e:	e007      	b.n	8001a70 <CO_HBconsumer_initEntry+0xec>
        } else {
            COB_ID = 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8001a64:	69bb      	ldr	r3, [r7, #24]
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6998      	ldr	r0, [r3, #24]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	8b9a      	ldrh	r2, [r3, #28]
 8001a78:	78fb      	ldrb	r3, [r7, #3]
 8001a7a:	b29b      	uxth	r3, r3
 8001a7c:	4413      	add	r3, r2
 8001a7e:	b299      	uxth	r1, r3
                                 (void*)&HBcons->monitoredNodes[idx], CO_HBcons_receive);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx, HBcons->CANdevRxIdxStart + idx, COB_ID, 0x7FF, false,
 8001a8a:	8bba      	ldrh	r2, [r7, #28]
 8001a8c:	4c08      	ldr	r4, [pc, #32]	; (8001ab0 <CO_HBconsumer_initEntry+0x12c>)
 8001a8e:	9402      	str	r4, [sp, #8]
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	2300      	movs	r3, #0
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001a9a:	f005 fc75 	bl	8007388 <CO_CANrxBufferInit>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	77fb      	strb	r3, [r7, #31]
    }
    return ret;
 8001aa2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3724      	adds	r7, #36	; 0x24
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd90      	pop	{r4, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	08001765 	.word	0x08001765

08001ab4 <CO_HBconsumer_process>:
}
#endif /* (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI */

void
CO_HBconsumer_process(CO_HBconsumer_t* HBcons, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                      uint32_t* timerNext_us) {
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08e      	sub	sp, #56	; 0x38
 8001ab8:	af02      	add	r7, sp, #8
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d077      	beq.n	8001bc0 <CO_HBconsumer_process+0x10c>
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d073      	beq.n	8001bc0 <CO_HBconsumer_process+0x10c>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001ade:	e068      	b.n	8001bb2 <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001aec:	011b      	lsls	r3, r3, #4
 8001aee:	4413      	add	r3, r2
 8001af0:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	789b      	ldrb	r3, [r3, #2]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d055      	beq.n	8001ba6 <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	68db      	ldr	r3, [r3, #12]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d022      	beq.n	8001b48 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d112      	bne.n	8001b32 <CO_HBconsumer_process+0x7e>
                    if (monitoredNode->pFunctSignalRemoteReset != NULL) {
                        monitoredNode->pFunctSignalRemoteReset(monitoredNode->nodeId, i,
                                                               monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	789b      	ldrb	r3, [r3, #2]
 8001b10:	2b02      	cmp	r3, #2
 8001b12:	d10a      	bne.n	8001b2a <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, CO_EMC_HEARTBEAT, i);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	6818      	ldr	r0, [r3, #0]
 8001b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	f248 1330 	movw	r3, #33072	; 0x8130
 8001b22:	221c      	movs	r2, #28
 8001b24:	2101      	movs	r1, #1
 8001b26:	f7ff fd18 	bl	800155a <CO_error>
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	709a      	strb	r2, [r3, #2]
 8001b30:	e007      	b.n	8001b42 <CO_HBconsumer_process+0x8e>
                        && monitoredNode->pFunctSignalHbStarted != NULL) {
                        monitoredNode->pFunctSignalHbStarted(monitoredNode->nodeId, i,
                                                             monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 8001b32:	69bb      	ldr	r3, [r7, #24]
 8001b34:	2202      	movs	r2, #2
 8001b36:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001b38:	69bb      	ldr	r3, [r7, #24]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2200      	movs	r2, #0
 8001b46:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	789b      	ldrb	r3, [r3, #2]
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d11c      	bne.n	8001b8a <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001b50:	69bb      	ldr	r3, [r7, #24]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	6a3b      	ldr	r3, [r7, #32]
 8001b56:	441a      	add	r2, r3
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	429a      	cmp	r2, r3
 8001b66:	d310      	bcc.n	8001b8a <CO_HBconsumer_process+0xd6>
                    if (monitoredNode->pFunctSignalTimeout != NULL) {
                        monitoredNode->pFunctSignalTimeout(monitoredNode->nodeId, i,
                                                           monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, CO_EMC_HEARTBEAT, i);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6818      	ldr	r0, [r3, #0]
 8001b6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	f248 1330 	movw	r3, #33072	; 0x8130
 8001b76:	221b      	movs	r2, #27
 8001b78:	2101      	movs	r1, #1
 8001b7a:	f7ff fcee 	bl	800155a <CO_error>
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	22ff      	movs	r2, #255	; 0xff
 8001b82:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2203      	movs	r2, #3
 8001b88:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if (monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	789b      	ldrb	r3, [r3, #2]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d001      	beq.n	8001b96 <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 8001b92:	2300      	movs	r3, #0
 8001b94:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001b9c:	2b05      	cmp	r3, #5
 8001b9e:	d003      	beq.n	8001ba8 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba4:	e000      	b.n	8001ba8 <CO_HBconsumer_process+0xf4>
                continue;
 8001ba6:	bf00      	nop
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001ba8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001bac:	3301      	adds	r3, #1
 8001bae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	7a1b      	ldrb	r3, [r3, #8]
 8001bb6:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d390      	bcc.n	8001ae0 <CO_HBconsumer_process+0x2c>
 8001bbe:	e028      	b.n	8001c12 <CO_HBconsumer_process+0x15e>
                }
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    } else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d103      	bne.n	8001bce <CO_HBconsumer_process+0x11a>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	695b      	ldr	r3, [r3, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d021      	beq.n	8001c12 <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001bce:	2300      	movs	r3, #0
 8001bd0:	77fb      	strb	r3, [r7, #31]
 8001bd2:	e015      	b.n	8001c00 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t* const monitoredNode = &HBcons->monitoredNodes[i];
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	685a      	ldr	r2, [r3, #4]
 8001bd8:	7ffb      	ldrb	r3, [r7, #31]
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	4413      	add	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	22ff      	movs	r2, #255	; 0xff
 8001be4:	705a      	strb	r2, [r3, #1]
#if (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_CHANGE) != 0)                                                     \
    || (((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_CALLBACK_MULTI) != 0)
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	2200      	movs	r2, #0
 8001bea:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	789b      	ldrb	r3, [r3, #2]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d002      	beq.n	8001bfa <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	709a      	strb	r2, [r3, #2]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8001bfa:	7ffb      	ldrb	r3, [r7, #31]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	77fb      	strb	r3, [r7, #31]
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	7a1b      	ldrb	r3, [r3, #8]
 8001c04:	7ffa      	ldrb	r2, [r7, #31]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d3e4      	bcc.n	8001bd4 <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	62bb      	str	r3, [r7, #40]	; 0x28
    } else { /* MISRA C 2004 14.10 */
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d114      	bne.n	8001c44 <CO_HBconsumer_process+0x190>
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d011      	beq.n	8001c44 <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	6818      	ldr	r0, [r3, #0]
 8001c24:	2300      	movs	r3, #0
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	2300      	movs	r3, #0
 8001c2a:	221b      	movs	r2, #27
 8001c2c:	2100      	movs	r1, #0
 8001c2e:	f7ff fc94 	bl	800155a <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	6818      	ldr	r0, [r3, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	221c      	movs	r2, #28
 8001c3e:	2100      	movs	r1, #0
 8001c40:	f7ff fc8b 	bl	800155a <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c48:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c4e:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	68ba      	ldr	r2, [r7, #8]
 8001c54:	615a      	str	r2, [r3, #20]
}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	; 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}

08001c5e <CO_getUint16>:
CO_getUint16(const void* buf) {
 8001c5e:	b480      	push	{r7}
 8001c60:	b085      	sub	sp, #20
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	6078      	str	r0, [r7, #4]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8001c6c:	81fb      	strh	r3, [r7, #14]
    return value;
 8001c6e:	89fb      	ldrh	r3, [r7, #14]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3714      	adds	r7, #20
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <OD_getIndex+0x14>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	e000      	b.n	8001c92 <OD_getIndex+0x16>
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8001cae:	2305      	movs	r3, #5
 8001cb0:	e003      	b.n	8001cba <OD_extension_init+0x1c>
    entry->extension = extension;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	683a      	ldr	r2, [r7, #0]
 8001cb6:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af02      	add	r7, sp, #8
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	607a      	str	r2, [r7, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	460b      	mov	r3, r1
 8001cd4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001cd6:	7af9      	ldrb	r1, [r7, #11]
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fcc7 	bl	8002674 <OD_get_value>
 8001ce6:	4603      	mov	r3, r0
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <CO_isError>:
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b085      	sub	sp, #20
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001cfc:	78fb      	ldrb	r3, [r7, #3]
 8001cfe:	08db      	lsrs	r3, r3, #3
 8001d00:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8001d02:	78fb      	ldrb	r3, [r7, #3]
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	2201      	movs	r2, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
            || (em->errorStatusBits[index] & bitmask) != 0)
               ? true
               : false;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00a      	beq.n	8001d2c <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d807      	bhi.n	8001d2c <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	5cd2      	ldrb	r2, [r2, r3]
 8001d22:	7bbb      	ldrb	r3, [r7, #14]
 8001d24:	4013      	ands	r3, r2
 8001d26:	b2db      	uxtb	r3, r3
               : false;
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <CO_isError+0x40>
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e000      	b.n	8001d32 <CO_isError+0x42>
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <CO_getErrorRegister>:
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t
CO_getErrorRegister(CO_EM_t* em) {
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d007      	beq.n	8001d5c <CO_getErrorRegister+0x1e>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	68db      	ldr	r3, [r3, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <CO_getErrorRegister+0x1e>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	e000      	b.n	8001d5e <CO_getErrorRegister+0x20>
 8001d5c:	2300      	movs	r3, #0
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_NMT_receive(void* object, void* msg) {
 8001d6a:	b480      	push	{r7}
 8001d6c:	b087      	sub	sp, #28
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	791b      	ldrb	r3, [r3, #4]
 8001d78:	75fb      	strb	r3, [r7, #23]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	3305      	adds	r3, #5
 8001d7e:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t* NMT = (CO_NMT_t*)object;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	60bb      	str	r3, [r7, #8]

    if ((DLC == 2U) && ((nodeId == 0U) || (nodeId == NMT->nodeId))) {
 8001d92:	7dfb      	ldrb	r3, [r7, #23]
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d10a      	bne.n	8001dae <CO_NMT_receive+0x44>
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d004      	beq.n	8001da8 <CO_NMT_receive+0x3e>
 8001d9e:	68bb      	ldr	r3, [r7, #8]
 8001da0:	78db      	ldrb	r3, [r3, #3]
 8001da2:	7bba      	ldrb	r2, [r7, #14]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d102      	bne.n	8001dae <CO_NMT_receive+0x44>
        NMT->internalCommand = command;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	7bfa      	ldrb	r2, [r7, #15]
 8001dac:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 8001dae:	bf00      	nop
 8001db0:	371c      	adds	r7, #28
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <OD_write_1017>:
 * Custom function for writing OD object "Producer heartbeat time"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1017(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	60b9      	str	r1, [r7, #8]
 8001dc4:	607a      	str	r2, [r7, #4]
 8001dc6:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint16_t))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00c      	beq.n	8001de8 <OD_write_1017+0x2e>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	7d1b      	ldrb	r3, [r3, #20]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d108      	bne.n	8001de8 <OD_write_1017+0x2e>
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d005      	beq.n	8001de8 <OD_write_1017+0x2e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d102      	bne.n	8001de8 <OD_write_1017+0x2e>
        || (countWritten == NULL)) {
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <OD_write_1017+0x32>
        return ODR_DEV_INCOMPAT;
 8001de8:	2309      	movs	r3, #9
 8001dea:	e017      	b.n	8001e1c <OD_write_1017+0x62>
    }

    CO_NMT_t* NMT = (CO_NMT_t*)stream->object;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000U;
 8001df2:	68b8      	ldr	r0, [r7, #8]
 8001df4:	f7ff ff33 	bl	8001c5e <CO_getUint16>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e00:	fb03 f202 	mul.w	r2, r3, r2
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68b9      	ldr	r1, [r7, #8]
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fa32 	bl	800227e <OD_writeOriginal>
 8001e1a:	4603      	mov	r3, r0
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <CO_NMT_init>:
CO_NMT_init(CO_NMT_t* NMT, OD_entry_t* OD_1017_ProducerHbTime, CO_EM_t* em, uint8_t nodeId, uint16_t NMTcontrol,
            uint16_t firstHBTime_ms, CO_CANmodule_t* NMT_CANdevRx, uint16_t NMT_rxIdx, uint16_t CANidRxNMT,
#if (((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0) || defined CO_DOXYGEN
            CO_CANmodule_t* NMT_CANdevTx, uint16_t NMT_txIdx, uint16_t CANidTxNMT,
#endif
            CO_CANmodule_t* HB_CANdevTx, uint16_t HB_txIdx, uint16_t CANidTxHB, uint32_t* errInfo) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af04      	add	r7, sp, #16
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((NMT == NULL) || (OD_1017_ProducerHbTime == NULL) || (em == NULL) || (NMT_CANdevRx == NULL)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00b      	beq.n	8001e54 <CO_NMT_init+0x30>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d008      	beq.n	8001e54 <CO_NMT_init+0x30>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d005      	beq.n	8001e54 <CO_NMT_init+0x30>
 8001e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d002      	beq.n	8001e54 <CO_NMT_init+0x30>
        || (HB_CANdevTx == NULL)
 8001e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <CO_NMT_init+0x36>
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
        || (NMT_CANdevTx == NULL)
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	e097      	b.n	8001f8a <CO_NMT_init+0x166>
    }

    /* clear the object */
    (void)memset(NMT, 0, sizeof(CO_NMT_t));
 8001e5a:	222c      	movs	r2, #44	; 0x2c
 8001e5c:	2100      	movs	r1, #0
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f00c ff82 	bl	800ed68 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	78fa      	ldrb	r2, [r7, #3]
 8001e74:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	8c3a      	ldrh	r2, [r7, #32]
 8001e7a:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (uint32_t)firstHBTime_ms * 1000U;
 8001e82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001e84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e88:	fb03 f202 	mul.w	r2, r3, r2
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 8001e90:	f107 0214 	add.w	r2, r7, #20
 8001e94:	2301      	movs	r3, #1
 8001e96:	2100      	movs	r1, #0
 8001e98:	68b8      	ldr	r0, [r7, #8]
 8001e9a:	f7ff ff14 	bl	8001cc6 <OD_get_u16>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001ea2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <CO_NMT_init+0xa0>
        if (errInfo != NULL) {
 8001eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d006      	beq.n	8001ebe <CO_NMT_init+0x9a>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001eb0:	68b8      	ldr	r0, [r7, #8]
 8001eb2:	f7ff fee3 	bl	8001c7c <OD_getIndex>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	461a      	mov	r2, r3
 8001eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ebc:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001ebe:	f06f 030b 	mvn.w	r3, #11
 8001ec2:	e062      	b.n	8001f8a <CO_NMT_init+0x166>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000U;
 8001ec4:	8abb      	ldrh	r3, [r7, #20]
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ecc:	fb03 f202 	mul.w	r2, r3, r2
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	68fa      	ldr	r2, [r7, #12]
 8001ed8:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a2d      	ldr	r2, [pc, #180]	; (8001f94 <CO_NMT_init+0x170>)
 8001ede:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <CO_NMT_init+0x174>)
 8001ee4:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	3310      	adds	r3, #16
 8001eea:	4619      	mov	r1, r3
 8001eec:	68b8      	ldr	r0, [r7, #8]
 8001eee:	f7ff fed6 	bl	8001c9e <OD_extension_init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001ef6:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <CO_NMT_init+0xf4>
        if (errInfo != NULL) {
 8001efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d006      	beq.n	8001f12 <CO_NMT_init+0xee>
            *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 8001f04:	68b8      	ldr	r0, [r7, #8]
 8001f06:	f7ff feb9 	bl	8001c7c <OD_getIndex>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f10:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8001f12:	f06f 030b 	mvn.w	r3, #11
 8001f16:	e038      	b.n	8001f8a <CO_NMT_init+0x166>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	68da      	ldr	r2, [r3, #12]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d903      	bls.n	8001f2c <CO_NMT_init+0x108>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	689a      	ldr	r2, [r3, #8]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(NMT_CANdevRx, NMT_rxIdx, CANidRxNMT, 0x7FF, false, (void*)NMT, CO_NMT_receive);
 8001f2c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8001f2e:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001f30:	4b1a      	ldr	r3, [pc, #104]	; (8001f9c <CO_NMT_init+0x178>)
 8001f32:	9302      	str	r3, [sp, #8]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	2300      	movs	r3, #0
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001f40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001f42:	f005 fa21 	bl	8007388 <CO_CANrxBufferInit>
 8001f46:	4603      	mov	r3, r0
 8001f48:	75fb      	strb	r3, [r7, #23]
    if (ret != CO_ERROR_NO) {
 8001f4a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <CO_NMT_init+0x134>
        return ret;
 8001f52:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001f56:	e018      	b.n	8001f8a <CO_NMT_init+0x166>
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->HB_TXbuff = CO_CANtxBufferInit(HB_CANdevTx, HB_txIdx, CANidTxHB, false, 1, false);
 8001f5e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001f60:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001f62:	2300      	movs	r3, #0
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	2301      	movs	r3, #1
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f6e:	f005 fa69 	bl	8007444 <CO_CANtxBufferInit>
 8001f72:	4602      	mov	r2, r0
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
    if (NMT->HB_TXbuff == NULL) {
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <CO_NMT_init+0x162>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	e001      	b.n	8001f8a <CO_NMT_init+0x166>
    }

    return ret;
 8001f86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	3718      	adds	r7, #24
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	080021cf 	.word	0x080021cf
 8001f98:	08001dbb 	.word	0x08001dbb
 8001f9c:	08001d6b 	.word	0x08001d6b

08001fa0 <CO_NMT_process>:
    }
}
#endif

CO_NMT_reset_cmd_t
CO_NMT_process(CO_NMT_t* NMT, CO_NMT_internalState_t* NMTstate, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b08e      	sub	sp, #56	; 0x38
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
 8001fac:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	781b      	ldrb	r3, [r3, #0]
 8001fb2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8001fbc:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	bf0c      	ite	eq
 8001fc4:	2301      	moveq	r3, #1
 8001fc6:	2300      	movne	r3, #0
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	633b      	str	r3, [r7, #48]	; 0x30

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us) ? (NMT->HBproducerTimer - timeDifference_us) : 0U;
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d204      	bcs.n	8001fe0 <CO_NMT_process+0x40>
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	68da      	ldr	r2, [r3, #12]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	e000      	b.n	8001fe2 <CO_NMT_process+0x42>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed */
    if (NNTinit
 8001fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10e      	bne.n	800200a <CO_NMT_process+0x6a>
        || ((NMT->HBproducerTime_us != 0U)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d02b      	beq.n	800204c <CO_NMT_process+0xac>
            && ((NMT->HBproducerTimer == 0U) || (NMTstateCpy != NMT->operatingStatePrev)))) {
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d006      	beq.n	800200a <CO_NMT_process+0x6a>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8002002:	f997 2037 	ldrsb.w	r2, [r7, #55]	; 0x37
 8002006:	429a      	cmp	r2, r3
 8002008:	d020      	beq.n	800204c <CO_NMT_process+0xac>
        NMT->HB_TXbuff->data[0] = (uint8_t)NMTstateCpy;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002012:	715a      	strb	r2, [r3, #5]
        (void)CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201c:	4619      	mov	r1, r3
 800201e:	4610      	mov	r0, r2
 8002020:	f005 fa8a 	bl	8007538 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 8002024:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10b      	bne.n	8002044 <CO_NMT_process+0xa4>
            /* NMT slave self starting */
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	889b      	ldrh	r3, [r3, #4]
 8002030:	f403 7380 	and.w	r3, r3, #256	; 0x100
                              ? CO_NMT_OPERATIONAL
                              : CO_NMT_PRE_OPERATIONAL;
 8002034:	2b00      	cmp	r3, #0
 8002036:	d001      	beq.n	800203c <CO_NMT_process+0x9c>
 8002038:	2305      	movs	r3, #5
 800203a:	e000      	b.n	800203e <CO_NMT_process+0x9e>
 800203c:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_STARTUP_TO_OPERATIONAL) != 0U)
 800203e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002042:	e003      	b.n	800204c <CO_NMT_process+0xac>
        } else {
            /* Start timer from the beginning. If OS is slow, time sliding may occur. However,
             * heartbeat is not for synchronization, it is for health report. In case of
             * initializing, timer is set in the CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8002052:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	789b      	ldrb	r3, [r3, #2]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d02a      	beq.n	80020b2 <CO_NMT_process+0x112>
        switch (NMT->internalCommand) {
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	789b      	ldrb	r3, [r3, #2]
 8002060:	2b82      	cmp	r3, #130	; 0x82
 8002062:	d01e      	beq.n	80020a2 <CO_NMT_process+0x102>
 8002064:	2b82      	cmp	r3, #130	; 0x82
 8002066:	dc20      	bgt.n	80020aa <CO_NMT_process+0x10a>
 8002068:	2b81      	cmp	r3, #129	; 0x81
 800206a:	d016      	beq.n	800209a <CO_NMT_process+0xfa>
 800206c:	2b81      	cmp	r3, #129	; 0x81
 800206e:	dc1c      	bgt.n	80020aa <CO_NMT_process+0x10a>
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d00e      	beq.n	8002092 <CO_NMT_process+0xf2>
 8002074:	2b80      	cmp	r3, #128	; 0x80
 8002076:	dc18      	bgt.n	80020aa <CO_NMT_process+0x10a>
 8002078:	2b01      	cmp	r3, #1
 800207a:	d002      	beq.n	8002082 <CO_NMT_process+0xe2>
 800207c:	2b02      	cmp	r3, #2
 800207e:	d004      	beq.n	800208a <CO_NMT_process+0xea>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
            case CO_NMT_NO_COMMAND:
            default:
                /* done */
                break;
 8002080:	e013      	b.n	80020aa <CO_NMT_process+0x10a>
            case CO_NMT_ENTER_OPERATIONAL: NMTstateCpy = CO_NMT_OPERATIONAL; break;
 8002082:	2305      	movs	r3, #5
 8002084:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002088:	e010      	b.n	80020ac <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_STOPPED: NMTstateCpy = CO_NMT_STOPPED; break;
 800208a:	2304      	movs	r3, #4
 800208c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002090:	e00c      	b.n	80020ac <CO_NMT_process+0x10c>
            case CO_NMT_ENTER_PRE_OPERATIONAL: NMTstateCpy = CO_NMT_PRE_OPERATIONAL; break;
 8002092:	237f      	movs	r3, #127	; 0x7f
 8002094:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002098:	e008      	b.n	80020ac <CO_NMT_process+0x10c>
            case CO_NMT_RESET_NODE: resetCommand = CO_RESET_APP; break;
 800209a:	2302      	movs	r3, #2
 800209c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80020a0:	e004      	b.n	80020ac <CO_NMT_process+0x10c>
            case CO_NMT_RESET_COMMUNICATION: resetCommand = CO_RESET_COMM; break;
 80020a2:	2301      	movs	r3, #1
 80020a4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80020a8:	e000      	b.n	80020ac <CO_NMT_process+0x10c>
                break;
 80020aa:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t ErrOnBusOffHB = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_BUSOFF_HB) != 0U);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	889b      	ldrh	r3, [r3, #4]
 80020b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t ErrBusOff = CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF);
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	6a1b      	ldr	r3, [r3, #32]
 80020ca:	2112      	movs	r1, #18
 80020cc:	4618      	mov	r0, r3
 80020ce:	f7ff fe0f 	bl	8001cf0 <CO_isError>
 80020d2:	62b8      	str	r0, [r7, #40]	; 0x28
    bool_t ErrHbCons = CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6a1b      	ldr	r3, [r3, #32]
 80020d8:	211b      	movs	r1, #27
 80020da:	4618      	mov	r0, r3
 80020dc:	f7ff fe08 	bl	8001cf0 <CO_isError>
 80020e0:	6278      	str	r0, [r7, #36]	; 0x24
    bool_t ErrHbConsRemote = CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	211c      	movs	r1, #28
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fe01 	bl	8001cf0 <CO_isError>
 80020ee:	6238      	str	r0, [r7, #32]
    bool_t busOff_HB = ErrOnBusOffHB && (ErrBusOff || ErrHbCons || ErrHbConsRemote);
 80020f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00a      	beq.n	800210c <CO_NMT_process+0x16c>
 80020f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d105      	bne.n	8002108 <CO_NMT_process+0x168>
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <CO_NMT_process+0x168>
 8002102:	6a3b      	ldr	r3, [r7, #32]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <CO_NMT_process+0x16c>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <CO_NMT_process+0x16e>
 800210c:	2300      	movs	r3, #0
 800210e:	61fb      	str	r3, [r7, #28]

    bool_t ErrNMTErrReg = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_ON_ERR_REG) != 0U);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	889b      	ldrh	r3, [r3, #4]
 8002114:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002118:	2b00      	cmp	r3, #0
 800211a:	bf14      	ite	ne
 800211c:	2301      	movne	r3, #1
 800211e:	2300      	moveq	r3, #0
 8002120:	b2db      	uxtb	r3, r3
 8002122:	61bb      	str	r3, [r7, #24]
    bool_t ErrNMTcontrol = ((CO_getErrorRegister(NMT->em) & (uint8_t)NMT->NMTcontrol) != 0U);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fe08 	bl	8001d3e <CO_getErrorRegister>
 800212e:	4603      	mov	r3, r0
 8002130:	461a      	mov	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	889b      	ldrh	r3, [r3, #4]
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4013      	ands	r3, r2
 800213a:	b2db      	uxtb	r3, r3
 800213c:	2b00      	cmp	r3, #0
 800213e:	bf14      	ite	ne
 8002140:	2301      	movne	r3, #1
 8002142:	2300      	moveq	r3, #0
 8002144:	b2db      	uxtb	r3, r3
 8002146:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = ErrNMTErrReg && ErrNMTcontrol;
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d004      	beq.n	8002158 <CO_NMT_process+0x1b8>
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d001      	beq.n	8002158 <CO_NMT_process+0x1b8>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <CO_NMT_process+0x1ba>
 8002158:	2300      	movs	r3, #0
 800215a:	613b      	str	r3, [r7, #16]

    if ((NMTstateCpy == CO_NMT_OPERATIONAL) && (busOff_HB || errRegMasked)) {
 800215c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002160:	2b05      	cmp	r3, #5
 8002162:	d111      	bne.n	8002188 <CO_NMT_process+0x1e8>
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d102      	bne.n	8002170 <CO_NMT_process+0x1d0>
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00b      	beq.n	8002188 <CO_NMT_process+0x1e8>
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	889b      	ldrh	r3, [r3, #4]
 8002174:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                                                                                            : CO_NMT_PRE_OPERATIONAL;
 8002178:	2b00      	cmp	r3, #0
 800217a:	d001      	beq.n	8002180 <CO_NMT_process+0x1e0>
 800217c:	2304      	movs	r3, #4
 800217e:	e000      	b.n	8002182 <CO_NMT_process+0x1e2>
 8002180:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_TO_STOPPED) != 0U) ? CO_NMT_STOPPED
 8002182:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002186:	e011      	b.n	80021ac <CO_NMT_process+0x20c>
    } else if ((((uint16_t)NMT->NMTcontrol & (uint16_t)CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	889b      	ldrh	r3, [r3, #4]
 800218c:	b21b      	sxth	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	da0c      	bge.n	80021ac <CO_NMT_process+0x20c>
               && (NMTstateCpy == CO_NMT_PRE_OPERATIONAL) && (!busOff_HB && !errRegMasked)) {
 8002192:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002196:	2b7f      	cmp	r3, #127	; 0x7f
 8002198:	d108      	bne.n	80021ac <CO_NMT_process+0x20c>
 800219a:	69fb      	ldr	r3, [r7, #28]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <CO_NMT_process+0x20c>
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <CO_NMT_process+0x20c>
        NMTstateCpy = CO_NMT_OPERATIONAL;
 80021a6:	2305      	movs	r3, #5
 80021a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021b2:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) {
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d003      	beq.n	80021c2 <CO_NMT_process+0x222>
        *NMTstate = NMTstateCpy;
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80021c0:	701a      	strb	r2, [r3, #0]
    }

    return resetCommand;
 80021c2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3738      	adds	r7, #56	; 0x38
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}

080021ce <OD_readOriginal>:
#include <string.h>
#define OD_DEFINITION
#include "301/CO_ODinterface.h"

ODR_t
OD_readOriginal(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 80021ce:	b580      	push	{r7, lr}
 80021d0:	b088      	sub	sp, #32
 80021d2:	af00      	add	r7, sp, #0
 80021d4:	60f8      	str	r0, [r7, #12]
 80021d6:	60b9      	str	r1, [r7, #8]
 80021d8:	607a      	str	r2, [r7, #4]
 80021da:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countRead == NULL)) {
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d005      	beq.n	80021ee <OD_readOriginal+0x20>
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d002      	beq.n	80021ee <OD_readOriginal+0x20>
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 80021ee:	2309      	movs	r3, #9
 80021f0:	e041      	b.n	8002276 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	61fb      	str	r3, [r7, #28]
    const uint8_t* dataOrig = stream->dataOrig;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8002204:	230e      	movs	r3, #14
 8002206:	e036      	b.n	8002276 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 8002208:	2300      	movs	r3, #0
 800220a:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d103      	bne.n	800221c <OD_readOriginal+0x4e>
 8002214:	69fa      	ldr	r2, [r7, #28]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d922      	bls.n	8002262 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	429a      	cmp	r2, r3
 8002224:	d801      	bhi.n	800222a <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8002226:	2309      	movs	r3, #9
 8002228:	e025      	b.n	8002276 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	69fa      	ldr	r2, [r7, #28]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4413      	add	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	429a      	cmp	r2, r3
 8002244:	d90a      	bls.n	800225c <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	68da      	ldr	r2, [r3, #12]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	441a      	add	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8002256:	23ff      	movs	r3, #255	; 0xff
 8002258:	75fb      	strb	r3, [r7, #23]
 800225a:	e002      	b.n	8002262 <OD_readOriginal+0x94>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	60da      	str	r2, [r3, #12]
        }
    }

    (void)memcpy((void*)buf, (const void*)dataOrig, dataLenToCopy);
 8002262:	69fa      	ldr	r2, [r7, #28]
 8002264:	69b9      	ldr	r1, [r7, #24]
 8002266:	68b8      	ldr	r0, [r7, #8]
 8002268:	f00c fe09 	bl	800ee7e <memcpy>

    *countRead = dataLenToCopy;
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	69fa      	ldr	r2, [r7, #28]
 8002270:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002272:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8002276:	4618      	mov	r0, r3
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <OD_writeOriginal>:

ODR_t
OD_writeOriginal(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800227e:	b580      	push	{r7, lr}
 8002280:	b088      	sub	sp, #32
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
 800228a:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d005      	beq.n	800229e <OD_writeOriginal+0x20>
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <OD_writeOriginal+0x20>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 800229e:	2309      	movs	r3, #9
 80022a0:	e056      	b.n	8002350 <OD_writeOriginal+0xd2>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	61fb      	str	r3, [r7, #28]
    OD_size_t dataLenRemain = dataLenToCopy;      /* remaining length of dataOrig buffer */
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	61bb      	str	r3, [r7, #24]
    uint8_t* dataOrig = stream->dataOrig;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	617b      	str	r3, [r7, #20]

    if (dataOrig == NULL) {
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <OD_writeOriginal+0x3e>
        return ODR_SUB_NOT_EXIST;
 80022b8:	230e      	movs	r3, #14
 80022ba:	e049      	b.n	8002350 <OD_writeOriginal+0xd2>
    }

    ODR_t returnCode = ODR_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	74fb      	strb	r3, [r7, #19]

    /* If previous write was partial or OD variable length is larger than current buffer size,
     * then data was (will be) written in several segments */
    if ((stream->dataOffset > 0U) || (dataLenToCopy > count)) {
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d103      	bne.n	80022d0 <OD_writeOriginal+0x52>
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d924      	bls.n	800231a <OD_writeOriginal+0x9c>
        if (stream->dataOffset >= dataLenToCopy) {
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	69fa      	ldr	r2, [r7, #28]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d801      	bhi.n	80022de <OD_writeOriginal+0x60>
            return ODR_DEV_INCOMPAT;
 80022da:	2309      	movs	r3, #9
 80022dc:	e038      	b.n	8002350 <OD_writeOriginal+0xd2>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	69fa      	ldr	r2, [r7, #28]
 80022e4:	1ad3      	subs	r3, r2, r3
 80022e6:	61fb      	str	r3, [r7, #28]
        dataLenRemain = dataLenToCopy;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	61bb      	str	r3, [r7, #24]
        dataOrig += stream->dataOffset;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	4413      	add	r3, r2
 80022f4:	617b      	str	r3, [r7, #20]

        if (dataLenToCopy > count) {
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d90a      	bls.n	8002314 <OD_writeOriginal+0x96>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	68da      	ldr	r2, [r3, #12]
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	441a      	add	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 800230e:	23ff      	movs	r3, #255	; 0xff
 8002310:	74fb      	strb	r3, [r7, #19]
 8002312:	e002      	b.n	800231a <OD_writeOriginal+0x9c>
        } else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2200      	movs	r2, #0
 8002318:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	429a      	cmp	r2, r3
 8002320:	d201      	bcs.n	8002326 <OD_writeOriginal+0xa8>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 8002322:	230c      	movs	r3, #12
 8002324:	e014      	b.n	8002350 <OD_writeOriginal+0xd2>
    }

    /* additional check for Misra c compliance */
    if ((dataLenToCopy <= dataLenRemain) && (dataLenToCopy <= count)) {
 8002326:	69fa      	ldr	r2, [r7, #28]
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	429a      	cmp	r2, r3
 800232c:	d80f      	bhi.n	800234e <OD_writeOriginal+0xd0>
 800232e:	69fa      	ldr	r2, [r7, #28]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	429a      	cmp	r2, r3
 8002334:	d80b      	bhi.n	800234e <OD_writeOriginal+0xd0>
        (void)memcpy((void*)dataOrig, (const void*)buf, dataLenToCopy);
 8002336:	69fa      	ldr	r2, [r7, #28]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f00c fd9f 	bl	800ee7e <memcpy>
 8002340:	bf00      	nop
    } else {
        return ODR_DEV_INCOMPAT;
    }

    *countWritten = dataLenToCopy;
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	69fa      	ldr	r2, [r7, #28]
 8002346:	601a      	str	r2, [r3, #0]
    return returnCode;
 8002348:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800234c:	e000      	b.n	8002350 <OD_writeOriginal+0xd2>
        return ODR_DEV_INCOMPAT;
 800234e:	2309      	movs	r3, #9
}
 8002350:	4618      	mov	r0, r3
 8002352:	3720      	adds	r7, #32
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_readDisabled(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countRead;
    return ODR_UNSUPP_ACCESS;
 8002366:	2302      	movs	r3, #2
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t
OD_writeDisabled(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
 8002380:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    (void)count;
    (void)countWritten;
    return ODR_UNSUPP_ACCESS;
 8002382:	2302      	movs	r3, #2
}
 8002384:	4618      	mov	r0, r3
 8002386:	3714      	adds	r7, #20
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <OD_find>:

OD_entry_t*
OD_find(OD_t* od, uint16_t index) {
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
    if ((od == NULL) || (od->size == 0U)) {
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <OD_find+0x1a>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d101      	bne.n	80023ae <OD_find+0x1e>
        return NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	e046      	b.n	800243c <OD_find+0xac>
    }

    uint16_t min = 0;
 80023ae:	2300      	movs	r3, #0
 80023b0:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1U;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	881b      	ldrh	r3, [r3, #0]
 80023b6:	3b01      	subs	r3, #1
 80023b8:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed, this won't work. If Object
     * Dictionary has up to N entries, then the max number of loop passes is log2(N) */
    while (min < max) {
 80023ba:	e026      	b.n	800240a <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 80023bc:	8afa      	ldrh	r2, [r7, #22]
 80023be:	8abb      	ldrh	r3, [r7, #20]
 80023c0:	4413      	add	r3, r2
 80023c2:	105b      	asrs	r3, r3, #1
 80023c4:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6859      	ldr	r1, [r3, #4]
 80023ca:	89fa      	ldrh	r2, [r7, #14]
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	440b      	add	r3, r1
 80023d6:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	887a      	ldrh	r2, [r7, #2]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d101      	bne.n	80023e6 <OD_find+0x56>
            return entry;
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	e02a      	b.n	800243c <OD_find+0xac>
        }

        if (index < entry->index) {
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	887a      	ldrh	r2, [r7, #2]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d209      	bcs.n	8002404 <OD_find+0x74>
            max = (cur > 0U) ? (cur - 1U) : cur;
 80023f0:	89fb      	ldrh	r3, [r7, #14]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d003      	beq.n	80023fe <OD_find+0x6e>
 80023f6:	89fb      	ldrh	r3, [r7, #14]
 80023f8:	3b01      	subs	r3, #1
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	e000      	b.n	8002400 <OD_find+0x70>
 80023fe:	89fb      	ldrh	r3, [r7, #14]
 8002400:	82bb      	strh	r3, [r7, #20]
 8002402:	e002      	b.n	800240a <OD_find+0x7a>
        } else {
            min = cur + 1U;
 8002404:	89fb      	ldrh	r3, [r7, #14]
 8002406:	3301      	adds	r3, #1
 8002408:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 800240a:	8afa      	ldrh	r2, [r7, #22]
 800240c:	8abb      	ldrh	r3, [r7, #20]
 800240e:	429a      	cmp	r2, r3
 8002410:	d3d4      	bcc.n	80023bc <OD_find+0x2c>
        }
    }

    if (min == max) {
 8002412:	8afa      	ldrh	r2, [r7, #22]
 8002414:	8abb      	ldrh	r3, [r7, #20]
 8002416:	429a      	cmp	r2, r3
 8002418:	d10f      	bne.n	800243a <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6859      	ldr	r1, [r3, #4]
 800241e:	8afa      	ldrh	r2, [r7, #22]
 8002420:	4613      	mov	r3, r2
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	887a      	ldrh	r2, [r7, #2]
 8002432:	429a      	cmp	r2, r3
 8002434:	d101      	bne.n	800243a <OD_find+0xaa>
            return entry;
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	e000      	b.n	800243c <OD_find+0xac>
        }
    }

    return NULL; /* entry does not exist in OD */
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	371c      	adds	r7, #28
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <OD_getSub>:

ODR_t
OD_getSub(const OD_entry_t* entry, uint8_t subIndex, OD_IO_t* io, bool_t odOrig) {
 8002448:	b480      	push	{r7}
 800244a:	b08d      	sub	sp, #52	; 0x34
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	607a      	str	r2, [r7, #4]
 8002452:	603b      	str	r3, [r7, #0]
 8002454:	460b      	mov	r3, r1
 8002456:	72fb      	strb	r3, [r7, #11]
    if ((entry == NULL) || (entry->odObject == NULL)) {
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d003      	beq.n	8002466 <OD_getSub+0x1e>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <OD_getSub+0x22>
        return ODR_IDX_NOT_EXIST;
 8002466:	2305      	movs	r3, #5
 8002468:	e0d7      	b.n	800261a <OD_getSub+0x1d2>
    }
    if (io == NULL) {
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <OD_getSub+0x2c>
        return ODR_DEV_INCOMPAT;
 8002470:	2309      	movs	r3, #9
 8002472:	e0d2      	b.n	800261a <OD_getSub+0x1d2>
    }

    OD_stream_t* stream = &io->stream;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & (uint8_t)ODT_TYPE_MASK) {
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	78db      	ldrb	r3, [r3, #3]
 800247c:	f003 030f 	and.w	r3, r3, #15
 8002480:	2b03      	cmp	r3, #3
 8002482:	d051      	beq.n	8002528 <OD_getSub+0xe0>
 8002484:	2b03      	cmp	r3, #3
 8002486:	f300 808d 	bgt.w	80025a4 <OD_getSub+0x15c>
 800248a:	2b01      	cmp	r3, #1
 800248c:	d002      	beq.n	8002494 <OD_getSub+0x4c>
 800248e:	2b02      	cmp	r3, #2
 8002490:	d015      	beq.n	80024be <OD_getSub+0x76>
 8002492:	e087      	b.n	80025a4 <OD_getSub+0x15c>
        case ODT_VAR: {
            if (subIndex > 0U) {
 8002494:	7afb      	ldrb	r3, [r7, #11]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <OD_getSub+0x56>
                return ODR_SUB_NOT_EXIST;
 800249a:	230e      	movs	r3, #14
 800249c:	e0bd      	b.n	800261a <OD_getSub+0x1d2>
            }
            CO_PROGMEM OD_obj_var_t* odo = entry->odObject;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	617b      	str	r3, [r7, #20]

            stream->attribute = odo->attribute;
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	791a      	ldrb	r2, [r3, #4]
 80024a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024aa:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	609a      	str	r2, [r3, #8]
            break;
 80024bc:	e074      	b.n	80025a8 <OD_getSub+0x160>
        }
        case ODT_ARR: {
            if (subIndex >= entry->subEntriesCount) {
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	789b      	ldrb	r3, [r3, #2]
 80024c2:	7afa      	ldrb	r2, [r7, #11]
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d301      	bcc.n	80024cc <OD_getSub+0x84>
                return ODR_SUB_NOT_EXIST;
 80024c8:	230e      	movs	r3, #14
 80024ca:	e0a6      	b.n	800261a <OD_getSub+0x1d2>
            }
            CO_PROGMEM OD_obj_array_t* odo = entry->odObject;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	61fb      	str	r3, [r7, #28]

            if (subIndex == 0U) {
 80024d2:	7afb      	ldrb	r3, [r7, #11]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d10b      	bne.n	80024f0 <OD_getSub+0xa8>
                stream->attribute = odo->attribute0;
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	7a1a      	ldrb	r2, [r3, #8]
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	741a      	strb	r2, [r3, #16]
                stream->dataOrig = odo->dataOrig0;
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	601a      	str	r2, [r3, #0]
                stream->dataLength = 1;
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	2201      	movs	r2, #1
 80024ec:	609a      	str	r2, [r3, #8]
                stream->attribute = odo->attribute;
                uint8_t* ptr = odo->dataOrig;
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
                stream->dataLength = odo->dataElementLength;
            }
            break;
 80024ee:	e05b      	b.n	80025a8 <OD_getSub+0x160>
                stream->attribute = odo->attribute;
 80024f0:	69fb      	ldr	r3, [r7, #28]
 80024f2:	7a5a      	ldrb	r2, [r3, #9]
 80024f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f6:	741a      	strb	r2, [r3, #16]
                uint8_t* ptr = odo->dataOrig;
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	61bb      	str	r3, [r7, #24]
                stream->dataOrig = (ptr == NULL) ? ptr : (ptr + (odo->dataElementSizeof * (uint8_t)(subIndex - 1U)));
 80024fe:	69bb      	ldr	r3, [r7, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d009      	beq.n	8002518 <OD_getSub+0xd0>
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	7afa      	ldrb	r2, [r7, #11]
 800250a:	3a01      	subs	r2, #1
 800250c:	b2d2      	uxtb	r2, r2
 800250e:	fb02 f303 	mul.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4413      	add	r3, r2
 8002516:	e000      	b.n	800251a <OD_getSub+0xd2>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800251c:	6013      	str	r3, [r2, #0]
                stream->dataLength = odo->dataElementLength;
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	68da      	ldr	r2, [r3, #12]
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	609a      	str	r2, [r3, #8]
            break;
 8002526:	e03f      	b.n	80025a8 <OD_getSub+0x160>
        }
        case ODT_REC: {
            CO_PROGMEM OD_obj_record_t* odoArr = entry->odObject;
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	623b      	str	r3, [r7, #32]
            CO_PROGMEM OD_obj_record_t* odo = NULL;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8002532:	2300      	movs	r3, #0
 8002534:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002538:	e01c      	b.n	8002574 <OD_getSub+0x12c>
                if (odoArr[i].subIndex == subIndex) {
 800253a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800253e:	4613      	mov	r3, r2
 8002540:	005b      	lsls	r3, r3, #1
 8002542:	4413      	add	r3, r2
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	461a      	mov	r2, r3
 8002548:	6a3b      	ldr	r3, [r7, #32]
 800254a:	4413      	add	r3, r2
 800254c:	791b      	ldrb	r3, [r3, #4]
 800254e:	7afa      	ldrb	r2, [r7, #11]
 8002550:	429a      	cmp	r2, r3
 8002552:	d10a      	bne.n	800256a <OD_getSub+0x122>
                    odo = &odoArr[i];
 8002554:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002558:	4613      	mov	r3, r2
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	4413      	add	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	461a      	mov	r2, r3
 8002562:	6a3b      	ldr	r3, [r7, #32]
 8002564:	4413      	add	r3, r2
 8002566:	62fb      	str	r3, [r7, #44]	; 0x2c
                    break;
 8002568:	e00a      	b.n	8002580 <OD_getSub+0x138>
            for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 800256a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800256e:	3301      	adds	r3, #1
 8002570:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	789b      	ldrb	r3, [r3, #2]
 8002578:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800257c:	429a      	cmp	r2, r3
 800257e:	d3dc      	bcc.n	800253a <OD_getSub+0xf2>
                }
            }
            if (odo == NULL) {
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <OD_getSub+0x142>
                return ODR_SUB_NOT_EXIST;
 8002586:	230e      	movs	r3, #14
 8002588:	e047      	b.n	800261a <OD_getSub+0x1d2>
            }

            stream->attribute = odo->attribute;
 800258a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800258c:	795a      	ldrb	r2, [r3, #5]
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig;
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	601a      	str	r2, [r3, #0]
            stream->dataLength = odo->dataLength;
 800259a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a0:	609a      	str	r2, [r3, #8]
            break;
 80025a2:	e001      	b.n	80025a8 <OD_getSub+0x160>
        }
        default: {
            return ODR_DEV_INCOMPAT;
 80025a4:	2309      	movs	r3, #9
 80025a6:	e038      	b.n	800261a <OD_getSub+0x1d2>
            break;
        }
    }

    /* Access data from the original OD location */
    if ((entry->extension == NULL) || odOrig) {
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <OD_getSub+0x16e>
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d009      	beq.n	80025ca <OD_getSub+0x182>
        io->read = OD_readOriginal;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	4a1b      	ldr	r2, [pc, #108]	; (8002628 <OD_getSub+0x1e0>)
 80025ba:	619a      	str	r2, [r3, #24]
        io->write = OD_writeOriginal;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a1b      	ldr	r2, [pc, #108]	; (800262c <OD_getSub+0x1e4>)
 80025c0:	61da      	str	r2, [r3, #28]
        stream->object = NULL;
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	2200      	movs	r2, #0
 80025c6:	605a      	str	r2, [r3, #4]
 80025c8:	e01c      	b.n	8002604 <OD_getSub+0x1bc>
    }
    /* Access data from extension specified by application */
    else {
        io->read = (entry->extension->read != NULL) ? entry->extension->read : OD_readDisabled;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d003      	beq.n	80025dc <OD_getSub+0x194>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	e000      	b.n	80025de <OD_getSub+0x196>
 80025dc:	4b14      	ldr	r3, [pc, #80]	; (8002630 <OD_getSub+0x1e8>)
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6193      	str	r3, [r2, #24]
        io->write = (entry->extension->write != NULL) ? entry->extension->write : OD_writeDisabled;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <OD_getSub+0x1ac>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	e000      	b.n	80025f6 <OD_getSub+0x1ae>
 80025f4:	4b0f      	ldr	r3, [pc, #60]	; (8002634 <OD_getSub+0x1ec>)
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	61d3      	str	r3, [r2, #28]
        stream->object = entry->extension->object;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002602:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	2200      	movs	r2, #0
 8002608:	60da      	str	r2, [r3, #12]

    /* Add informative data */
    stream->index = entry->index;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	881a      	ldrh	r2, [r3, #0]
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	825a      	strh	r2, [r3, #18]
    stream->subIndex = subIndex;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	7afa      	ldrb	r2, [r7, #11]
 8002616:	751a      	strb	r2, [r3, #20]

    return ODR_OK;
 8002618:	2300      	movs	r3, #0
}
 800261a:	4618      	mov	r0, r3
 800261c:	3734      	adds	r7, #52	; 0x34
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	080021cf 	.word	0x080021cf
 800262c:	0800227f 	.word	0x0800227f
 8002630:	08002359 	.word	0x08002359
 8002634:	08002375 	.word	0x08002375

08002638 <OD_getSDOabCode>:

uint32_t
OD_getSDOabCode(ODR_t returnCode) {
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
        0x08000022UL, /* Data cannot be tran. because of present device state */
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return ((returnCode < ODR_OK) || (returnCode >= ODR_COUNT)) ? abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	2b00      	cmp	r3, #0
 8002648:	db03      	blt.n	8002652 <OD_getSDOabCode+0x1a>
 800264a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264e:	2b19      	cmp	r3, #25
 8002650:	dd02      	ble.n	8002658 <OD_getSDOabCode+0x20>
 8002652:	4b07      	ldr	r3, [pc, #28]	; (8002670 <OD_getSDOabCode+0x38>)
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	e004      	b.n	8002662 <OD_getSDOabCode+0x2a>
 8002658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <OD_getSDOabCode+0x38>)
 800265e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8002662:	4618      	mov	r0, r3
 8002664:	370c      	adds	r7, #12
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr
 800266e:	bf00      	nop
 8002670:	0800f7c4 	.word	0x0800f7c4

08002674 <OD_get_value>:

ODR_t
OD_get_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 8002674:	b590      	push	{r4, r7, lr}
 8002676:	b091      	sub	sp, #68	; 0x44
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	607a      	str	r2, [r7, #4]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	460b      	mov	r3, r1
 8002682:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <OD_get_value+0x1a>
        return ODR_DEV_INCOMPAT;
 800268a:	2309      	movs	r3, #9
 800268c:	e02b      	b.n	80026e6 <OD_get_value+0x72>
    }

    OD_IO_t io = {NULL};
 800268e:	f107 0318 	add.w	r3, r7, #24
 8002692:	2220      	movs	r2, #32
 8002694:	2100      	movs	r1, #0
 8002696:	4618      	mov	r0, r3
 8002698:	f00c fb66 	bl	800ed68 <memset>
    OD_stream_t* stream = &io.stream;
 800269c:	f107 0318 	add.w	r3, r7, #24
 80026a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countRd = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 80026a6:	f107 0218 	add.w	r2, r7, #24
 80026aa:	7af9      	ldrb	r1, [r7, #11]
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f7ff feca 	bl	8002448 <OD_getSub>
 80026b4:	4603      	mov	r3, r0
 80026b6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {
 80026ba:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <OD_get_value+0x54>
        return ret;
 80026c2:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 80026c6:	e00e      	b.n	80026e6 <OD_get_value+0x72>
    }
    if (stream->dataLength != len) {
 80026c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d001      	beq.n	80026d6 <OD_get_value+0x62>
        return ODR_TYPE_MISMATCH;
 80026d2:	230b      	movs	r3, #11
 80026d4:	e007      	b.n	80026e6 <OD_get_value+0x72>
    }

    return io.read(stream, val, len, &countRd);
 80026d6:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80026d8:	f107 0314 	add.w	r3, r7, #20
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80026e2:	47a0      	blx	r4
 80026e4:	4603      	mov	r3, r0
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3744      	adds	r7, #68	; 0x44
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd90      	pop	{r4, r7, pc}

080026ee <OD_set_value>:

ODR_t
OD_set_value(const OD_entry_t* entry, uint8_t subIndex, void* val, OD_size_t len, bool_t odOrig) {
 80026ee:	b590      	push	{r4, r7, lr}
 80026f0:	b091      	sub	sp, #68	; 0x44
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	607a      	str	r2, [r7, #4]
 80026f8:	603b      	str	r3, [r7, #0]
 80026fa:	460b      	mov	r3, r1
 80026fc:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) {
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <OD_set_value+0x1a>
        return ODR_DEV_INCOMPAT;
 8002704:	2309      	movs	r3, #9
 8002706:	e02b      	b.n	8002760 <OD_set_value+0x72>
    }

    OD_IO_t io = {NULL};
 8002708:	f107 0318 	add.w	r3, r7, #24
 800270c:	2220      	movs	r2, #32
 800270e:	2100      	movs	r1, #0
 8002710:	4618      	mov	r0, r3
 8002712:	f00c fb29 	bl	800ed68 <memset>
    OD_stream_t* stream = &io.stream;
 8002716:	f107 0318 	add.w	r3, r7, #24
 800271a:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t countWritten = 0;
 800271c:	2300      	movs	r3, #0
 800271e:	617b      	str	r3, [r7, #20]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8002720:	f107 0218 	add.w	r2, r7, #24
 8002724:	7af9      	ldrb	r1, [r7, #11]
 8002726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff fe8d 	bl	8002448 <OD_getSub>
 800272e:	4603      	mov	r3, r0
 8002730:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

    if (ret != ODR_OK) {
 8002734:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002738:	2b00      	cmp	r3, #0
 800273a:	d002      	beq.n	8002742 <OD_set_value+0x54>
        return ret;
 800273c:	f997 303b 	ldrsb.w	r3, [r7, #59]	; 0x3b
 8002740:	e00e      	b.n	8002760 <OD_set_value+0x72>
    }
    if (stream->dataLength != len) {
 8002742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	429a      	cmp	r2, r3
 800274a:	d001      	beq.n	8002750 <OD_set_value+0x62>
        return ODR_TYPE_MISMATCH;
 800274c:	230b      	movs	r3, #11
 800274e:	e007      	b.n	8002760 <OD_set_value+0x72>
    }

    return io.write(stream, val, len, &countWritten);
 8002750:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8002752:	f107 0314 	add.w	r3, r7, #20
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	6879      	ldr	r1, [r7, #4]
 800275a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800275c:	47a0      	blx	r4
 800275e:	4603      	mov	r3, r0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3744      	adds	r7, #68	; 0x44
 8002764:	46bd      	mov	sp, r7
 8002766:	bd90      	pop	{r4, r7, pc}

08002768 <OD_getPtr>:

void*
OD_getPtr(const OD_entry_t* entry, uint8_t subIndex, OD_size_t len, ODR_t* err) {
 8002768:	b580      	push	{r7, lr}
 800276a:	b08e      	sub	sp, #56	; 0x38
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	607a      	str	r2, [r7, #4]
 8002772:	603b      	str	r3, [r7, #0]
 8002774:	460b      	mov	r3, r1
 8002776:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t* stream = &io.stream;
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 800277e:	f107 0210 	add.w	r2, r7, #16
 8002782:	7af9      	ldrb	r1, [r7, #11]
 8002784:	2301      	movs	r3, #1
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f7ff fe5e 	bl	8002448 <OD_getSub>
 800278c:	4603      	mov	r3, r0
 800278e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8002792:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8002796:	2b00      	cmp	r3, #0
 8002798:	d116      	bne.n	80027c8 <OD_getPtr+0x60>
        if ((stream->dataOrig == NULL) || (stream->dataLength == 0U)) {
 800279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <OD_getPtr+0x42>
 80027a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d103      	bne.n	80027b2 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 80027aa:	2309      	movs	r3, #9
 80027ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80027b0:	e00a      	b.n	80027c8 <OD_getPtr+0x60>
        } else if ((len != 0U) && (len != stream->dataLength)) {
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <OD_getPtr+0x60>
 80027b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d002      	beq.n	80027c8 <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 80027c2:	230b      	movs	r3, #11
 80027c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        } else { /* MISRA C 2004 14.10 */
        }
    }

    if (err != NULL) {
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <OD_getPtr+0x6e>
        *err = errCopy;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80027d4:	701a      	strb	r2, [r3, #0]
    }

    return (errCopy == ODR_OK) ? stream->dataOrig : NULL;
 80027d6:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <OD_getPtr+0x7c>
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	e000      	b.n	80027e6 <OD_getPtr+0x7e>
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3738      	adds	r7, #56	; 0x38
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <CO_getUint8>:
CO_getUint8(const void* buf) {
 80027ee:	b480      	push	{r7}
 80027f0:	b085      	sub	sp, #20
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 80027fa:	73fb      	strb	r3, [r7, #15]
    return value;
 80027fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3714      	adds	r7, #20
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <CO_getUint16>:
CO_getUint16(const void* buf) {
 800280a:	b480      	push	{r7}
 800280c:	b085      	sub	sp, #20
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8002818:	81fb      	strh	r3, [r7, #14]
    return value;
 800281a:	89fb      	ldrh	r3, [r7, #14]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8002828:	b480      	push	{r7}
 800282a:	b085      	sub	sp, #20
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8002834:	60fb      	str	r3, [r7, #12]
    return value;
 8002836:	68fb      	ldr	r3, [r7, #12]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3714      	adds	r7, #20
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <CO_setUint32>:
CO_setUint32(void* buf, uint32_t value) {
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
 800284e:	683a      	ldr	r2, [r7, #0]
    (void)memmove(buf, (const void*)&value, sizeof(value));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	601a      	str	r2, [r3, #0]
    return (uint8_t)(sizeof(value));
 8002854:	2304      	movs	r3, #4
}
 8002856:	4618      	mov	r0, r3
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr

08002862 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d002      	beq.n	8002876 <OD_getIndex+0x14>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	e000      	b.n	8002878 <OD_getIndex+0x16>
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8002894:	2305      	movs	r3, #5
 8002896:	e003      	b.n	80028a0 <OD_extension_init+0x1c>
    entry->extension = extension;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b086      	sub	sp, #24
 80028b0:	af02      	add	r7, sp, #8
 80028b2:	60f8      	str	r0, [r7, #12]
 80028b4:	607a      	str	r2, [r7, #4]
 80028b6:	603b      	str	r3, [r7, #0]
 80028b8:	460b      	mov	r3, r1
 80028ba:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80028bc:	7af9      	ldrb	r1, [r7, #11]
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	9300      	str	r3, [sp, #0]
 80028c2:	2301      	movs	r3, #1
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	68f8      	ldr	r0, [r7, #12]
 80028c8:	f7ff fed4 	bl	8002674 <OD_get_value>
 80028cc:	4603      	mov	r3, r0
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3710      	adds	r7, #16
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}

080028d6 <OD_get_u16>:
OD_get_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t* val, bool_t odOrig) {
 80028d6:	b580      	push	{r7, lr}
 80028d8:	b086      	sub	sp, #24
 80028da:	af02      	add	r7, sp, #8
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	460b      	mov	r3, r1
 80028e4:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80028e6:	7af9      	ldrb	r1, [r7, #11]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	2302      	movs	r3, #2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68f8      	ldr	r0, [r7, #12]
 80028f2:	f7ff febf 	bl	8002674 <OD_get_value>
 80028f6:	4603      	mov	r3, r0
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af02      	add	r7, sp, #8
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	607a      	str	r2, [r7, #4]
 800290a:	603b      	str	r3, [r7, #0]
 800290c:	460b      	mov	r3, r1
 800290e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8002910:	7af9      	ldrb	r1, [r7, #11]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	2304      	movs	r3, #4
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	68f8      	ldr	r0, [r7, #12]
 800291c:	f7ff feaa 	bl	8002674 <OD_get_value>
 8002920:	4603      	mov	r3, r0
}
 8002922:	4618      	mov	r0, r3
 8002924:	3710      	adds	r7, #16
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}

0800292a <OD_write_dummy>:
 * Custom function for write dummy OD object. Will be used only from RPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_dummy(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 800292a:	b480      	push	{r7}
 800292c:	b085      	sub	sp, #20
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
 8002936:	603b      	str	r3, [r7, #0]
    (void)stream;
    (void)buf;
    if (countWritten != NULL) {
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d002      	beq.n	8002944 <OD_write_dummy+0x1a>
        *countWritten = count;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	601a      	str	r2, [r3, #0]
    }
    return ODR_OK;
 8002944:	2300      	movs	r3, #0
}
 8002946:	4618      	mov	r0, r3
 8002948:	3714      	adds	r7, #20
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <OD_read_dummy>:
 * Custom function for read dummy OD object. Will be used only from TPDO.
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_dummy(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	60f8      	str	r0, [r7, #12]
 800295a:	60b9      	str	r1, [r7, #8]
 800295c:	607a      	str	r2, [r7, #4]
 800295e:	603b      	str	r3, [r7, #0]
    if ((buf == NULL) || (stream == NULL) || (countRead == NULL)) {
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <OD_read_dummy+0x20>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d002      	beq.n	8002972 <OD_read_dummy+0x20>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8002972:	2309      	movs	r3, #9
 8002974:	e010      	b.n	8002998 <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	429a      	cmp	r2, r3
 800297e:	d902      	bls.n	8002986 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	607b      	str	r3, [r7, #4]
    }

    (void)memset(buf, 0, count);
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	2100      	movs	r1, #0
 800298a:	68b8      	ldr	r0, [r7, #8]
 800298c:	f00c f9ec 	bl	800ed68 <memset>

    *countRead = count;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <PDOconfigMap>:
 * @param OD Object Dictionary.
 *
 * @return ODR_OK on success, otherwise error reason.
 */
static ODR_t
PDOconfigMap(CO_PDO_common_t* PDO, uint32_t map, uint8_t mapIndex, bool_t isRPDO, OD_t* OD) {
 80029a0:	b5b0      	push	{r4, r5, r7, lr}
 80029a2:	b092      	sub	sp, #72	; 0x48
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	603b      	str	r3, [r7, #0]
 80029ac:	4613      	mov	r3, r2
 80029ae:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t)(map >> 16);
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	0c1b      	lsrs	r3, r3, #16
 80029b4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t)(map >> 8);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t)map;
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 80029c6:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80029ca:	08db      	lsrs	r3, r3, #3
 80029cc:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t* OD_IO = &PDO->OD_IO[mapIndex];
 80029d0:	79fb      	ldrb	r3, [r7, #7]
 80029d2:	015b      	lsls	r3, r3, #5
 80029d4:	3310      	adds	r3, #16
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 80029dc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80029e0:	2b08      	cmp	r3, #8
 80029e2:	d901      	bls.n	80029e8 <PDOconfigMap+0x48>
        return ODR_MAP_LEN; /* PDO length exceeded */
 80029e4:	2307      	movs	r3, #7
 80029e6:	e090      	b.n	8002b0a <PDOconfigMap+0x16a>
    }

    /* is there a reference to the dummy entry */
    if ((index < 0x20U) && (subIndex == 0U)) {
 80029e8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029ec:	2b1f      	cmp	r3, #31
 80029ee:	d81a      	bhi.n	8002a26 <PDOconfigMap+0x86>
 80029f0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d116      	bne.n	8002a26 <PDOconfigMap+0x86>
        OD_stream_t* stream = &OD_IO->stream;
 80029f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029fa:	63bb      	str	r3, [r7, #56]	; 0x38
        (void)memset(stream, 0, sizeof(OD_stream_t));
 80029fc:	2218      	movs	r2, #24
 80029fe:	2100      	movs	r1, #0
 8002a00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002a02:	f00c f9b1 	bl	800ed68 <memset>
        stream->dataLength = mappedLength;
 8002a06:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a0c:	609a      	str	r2, [r3, #8]
        stream->dataOffset = mappedLength;
 8002a0e:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a14:	60da      	str	r2, [r3, #12]
        OD_IO->read = OD_read_dummy;
 8002a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a18:	4a3e      	ldr	r2, [pc, #248]	; (8002b14 <PDOconfigMap+0x174>)
 8002a1a:	619a      	str	r2, [r3, #24]
        OD_IO->write = OD_write_dummy;
 8002a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a1e:	4a3e      	ldr	r2, [pc, #248]	; (8002b18 <PDOconfigMap+0x178>)
 8002a20:	61da      	str	r2, [r3, #28]
        return ODR_OK;
 8002a22:	2300      	movs	r3, #0
 8002a24:	e071      	b.n	8002b0a <PDOconfigMap+0x16a>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t* entry = OD_find(OD, index);
 8002a26:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8002a2e:	f7ff fcaf 	bl	8002390 <OD_find>
 8002a32:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8002a34:	f107 0210 	add.w	r2, r7, #16
 8002a38:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a40:	f7ff fd02 	bl	8002448 <OD_getSub>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8002a4a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d002      	beq.n	8002a58 <PDOconfigMap+0xb8>
        return odRet;
 8002a52:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002a56:	e058      	b.n	8002b0a <PDOconfigMap+0x16a>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? (OD_attr_t)(ODA_RPDO) : (OD_attr_t)(ODA_TPDO);
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d001      	beq.n	8002a62 <PDOconfigMap+0xc2>
 8002a5e:	2308      	movs	r3, #8
 8002a60:	e000      	b.n	8002a64 <PDOconfigMap+0xc4>
 8002a62:	2304      	movs	r3, #4
 8002a64:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if (((OD_IOcopy.stream.attribute & testAttribute) == 0U) || ((mappedLengthBits & 0x07U) != 0U)
 8002a68:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a6c:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8002a70:	4013      	ands	r3, r2
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <PDOconfigMap+0xee>
 8002a78:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002a7c:	f003 0307 	and.w	r3, r3, #7
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d104      	bne.n	8002a8e <PDOconfigMap+0xee>
        || (OD_IOcopy.stream.dataLength < mappedLength)) {
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d201      	bcs.n	8002a92 <PDOconfigMap+0xf2>
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e03b      	b.n	8002b0a <PDOconfigMap+0x16a>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8002a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a94:	461d      	mov	r5, r3
 8002a96:	f107 0410 	add.w	r4, r7, #16
 8002a9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002aa2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    OD_IO->stream.dataOffset = mappedLength;
 8002aa6:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002aac:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d129      	bne.n	8002b08 <PDOconfigMap+0x168>
        if ((subIndex < (OD_FLAGS_PDO_SIZE * 8U)) && (entry->extension != NULL)) {
 8002ab4:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002ab8:	2b1f      	cmp	r3, #31
 8002aba:	d81f      	bhi.n	8002afc <PDOconfigMap+0x15c>
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01b      	beq.n	8002afc <PDOconfigMap+0x15c>
            PDO->flagPDObyte[mapIndex] = &entry->extension->flagsPDO[subIndex >> 3];
 8002ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002acc:	08db      	lsrs	r3, r3, #3
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	79fa      	ldrb	r2, [r7, #7]
 8002ad2:	3308      	adds	r3, #8
 8002ad4:	440b      	add	r3, r1
 8002ad6:	1d19      	adds	r1, r3, #4
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	3244      	adds	r2, #68	; 0x44
 8002adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1U << (subIndex & 0x07U);
 8002ae0:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8002ae4:	f003 0307 	and.w	r3, r3, #7
 8002ae8:	2201      	movs	r2, #1
 8002aea:	409a      	lsls	r2, r3
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	b2d1      	uxtb	r1, r2
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4413      	add	r3, r2
 8002af4:	460a      	mov	r2, r1
 8002af6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 8002afa:	e005      	b.n	8002b08 <PDOconfigMap+0x168>
        } else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002afc:	79fa      	ldrb	r2, [r7, #7]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	3244      	adds	r2, #68	; 0x44
 8002b02:	2100      	movs	r1, #0
 8002b04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3748      	adds	r7, #72	; 0x48
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bdb0      	pop	{r4, r5, r7, pc}
 8002b12:	bf00      	nop
 8002b14:	08002953 	.word	0x08002953
 8002b18:	0800292b 	.word	0x0800292b

08002b1c <PDO_initMapping>:
 *
 * @return #CO_ReturnError_t CO_ERROR_NO on success.
 */
static CO_ReturnError_t
PDO_initMapping(CO_PDO_common_t* PDO, OD_t* OD, OD_entry_t* OD_PDOMapPar, bool_t isRPDO, uint32_t* errInfo,
                uint32_t* erroneousMap) {
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b08c      	sub	sp, #48	; 0x30
 8002b20:	af02      	add	r7, sp, #8
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 8002b32:	f107 021b 	add.w	r2, r7, #27
 8002b36:	2301      	movs	r3, #1
 8002b38:	2100      	movs	r1, #0
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f7ff feb6 	bl	80028ac <OD_get_u8>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002b46:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d00c      	beq.n	8002b68 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d006      	beq.n	8002b62 <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fe84 	bl	8002862 <OD_getIndex>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	021a      	lsls	r2, r3, #8
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b60:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002b62:	f06f 030b 	mvn.w	r3, #11
 8002b66:	e07f      	b.n	8002c68 <PDO_initMapping+0x14c>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002b68:	2300      	movs	r3, #0
 8002b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002b6e:	e05b      	b.n	8002c28 <PDO_initMapping+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002b70:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b74:	015b      	lsls	r3, r3, #5
 8002b76:	3310      	adds	r3, #16
 8002b78:	68fa      	ldr	r2, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1U, &map, true);
 8002b82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b86:	3301      	adds	r3, #1
 8002b88:	b2d9      	uxtb	r1, r3
 8002b8a:	f107 0214 	add.w	r2, r7, #20
 8002b8e:	2301      	movs	r3, #1
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff feb5 	bl	8002900 <OD_get_u32>
 8002b96:	4603      	mov	r3, r0
 8002b98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 8002b9c:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002ba0:	2b0e      	cmp	r3, #14
 8002ba2:	d03b      	beq.n	8002c1c <PDO_initMapping+0x100>
            continue;
        }
        if (odRet != ODR_OK) {
 8002ba4:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00f      	beq.n	8002bcc <PDO_initMapping+0xb0>
            if (errInfo != NULL) {
 8002bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d009      	beq.n	8002bc6 <PDO_initMapping+0xaa>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8) | i;
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f7ff fe55 	bl	8002862 <OD_getIndex>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	021a      	lsls	r2, r3, #8
 8002bbc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bc4:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 8002bc6:	f06f 030b 	mvn.w	r3, #11
 8002bca:	e04d      	b.n	8002c68 <PDO_initMapping+0x14c>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 8002bcc:	6979      	ldr	r1, [r7, #20]
 8002bce:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff fee1 	bl	80029a0 <PDOconfigMap>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002be4:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d00c      	beq.n	8002c06 <PDO_initMapping+0xea>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	22ff      	movs	r2, #255	; 0xff
 8002bf6:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0U) {
 8002bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d102      	bne.n	8002c06 <PDO_initMapping+0xea>
                *erroneousMap = map;
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c04:	601a      	str	r2, [r3, #0]
            }
        }

        if (i < mappedObjectsCount) {
 8002c06:	7efb      	ldrb	r3, [r7, #27]
 8002c08:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d206      	bcs.n	8002c1e <PDO_initMapping+0x102>
            pdoDataLength += OD_IO->stream.dataOffset;
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c16:	4413      	add	r3, r2
 8002c18:	627b      	str	r3, [r7, #36]	; 0x24
 8002c1a:	e000      	b.n	8002c1e <PDO_initMapping+0x102>
            continue;
 8002c1c:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002c1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c22:	3301      	adds	r3, #1
 8002c24:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002c28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002c2c:	2b07      	cmp	r3, #7
 8002c2e:	d99f      	bls.n	8002b70 <PDO_initMapping+0x54>
        }
    }
    if ((pdoDataLength > CO_PDO_MAX_SIZE) || ((pdoDataLength == 0U) && (mappedObjectsCount > 0U))) {
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	2b08      	cmp	r3, #8
 8002c34:	d805      	bhi.n	8002c42 <PDO_initMapping+0x126>
 8002c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d109      	bne.n	8002c50 <PDO_initMapping+0x134>
 8002c3c:	7efb      	ldrb	r3, [r7, #27]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <PDO_initMapping+0x134>
        if (*erroneousMap == 0U) {
 8002c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d102      	bne.n	8002c50 <PDO_initMapping+0x134>
            *erroneousMap = 1;
 8002c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]
        }
    }

    if (*erroneousMap == 0U) {
 8002c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d106      	bne.n	8002c66 <PDO_initMapping+0x14a>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002c60:	7efa      	ldrb	r2, [r7, #27]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002c66:	2300      	movs	r3, #0
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3728      	adds	r7, #40	; 0x28
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <OD_write_PDO_mapping>:
 * Custom function for writing OD object "PDO mapping parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_PDO_mapping(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08e      	sub	sp, #56	; 0x38
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
 8002c7c:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES)) {
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d009      	beq.n	8002c98 <OD_write_PDO_mapping+0x28>
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d006      	beq.n	8002c98 <OD_write_PDO_mapping+0x28>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <OD_write_PDO_mapping+0x28>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	7d1b      	ldrb	r3, [r3, #20]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	d901      	bls.n	8002c9c <OD_write_PDO_mapping+0x2c>
        return ODR_DEV_INCOMPAT;
 8002c98:	2309      	movs	r3, #9
 8002c9a:	e07e      	b.n	8002d9a <OD_write_PDO_mapping+0x12a>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t* PDO = stream->object;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if ((PDO->valid) || ((PDO->mappedObjectsCount != 0U) && (stream->subIndex > 0U))) {
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d107      	bne.n	8002cba <OD_write_PDO_mapping+0x4a>
 8002caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cac:	7b5b      	ldrb	r3, [r3, #13]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d005      	beq.n	8002cbe <OD_write_PDO_mapping+0x4e>
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	7d1b      	ldrb	r3, [r3, #20]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e06d      	b.n	8002d9a <OD_write_PDO_mapping+0x12a>
    }

    if (stream->subIndex == 0U) {
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	7d1b      	ldrb	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d145      	bne.n	8002d52 <OD_write_PDO_mapping+0xe2>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 8002cc6:	68b8      	ldr	r0, [r7, #8]
 8002cc8:	f7ff fd91 	bl	80027ee <CO_getUint8>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002cd4:	7fbb      	ldrb	r3, [r7, #30]
 8002cd6:	2b08      	cmp	r3, #8
 8002cd8:	d901      	bls.n	8002cde <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8002cda:	2307      	movs	r3, #7
 8002cdc:	e05d      	b.n	8002d9a <OD_write_PDO_mapping+0x12a>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ce4:	e01b      	b.n	8002d1e <OD_write_PDO_mapping+0xae>
            OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8002ce6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002cea:	015b      	lsls	r3, r3, #5
 8002cec:	3310      	adds	r3, #16
 8002cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf0:	4413      	add	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t)OD_IO->stream.dataLength;
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t)OD_IO->stream.dataOffset;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d901      	bls.n	8002d0c <OD_write_PDO_mapping+0x9c>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 8002d08:	2306      	movs	r3, #6
 8002d0a:	e046      	b.n	8002d9a <OD_write_PDO_mapping+0x12a>
            }
            pdoDataLength += mappedLength;
 8002d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	4413      	add	r3, r2
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d1e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002d22:	7fbb      	ldrb	r3, [r7, #30]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d3de      	bcc.n	8002ce6 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d901      	bls.n	8002d32 <OD_write_PDO_mapping+0xc2>
            return ODR_MAP_LEN;
 8002d2e:	2307      	movs	r3, #7
 8002d30:	e033      	b.n	8002d9a <OD_write_PDO_mapping+0x12a>
        }
        if ((pdoDataLength == 0U) && (mappedObjectsCount > 0U)) {
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <OD_write_PDO_mapping+0xd2>
 8002d38:	7fbb      	ldrb	r3, [r7, #30]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <OD_write_PDO_mapping+0xd2>
            return ODR_INVALID_VALUE;
 8002d3e:	230f      	movs	r3, #15
 8002d40:	e02b      	b.n	8002d9a <OD_write_PDO_mapping+0x12a>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d48:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	7fba      	ldrb	r2, [r7, #30]
 8002d4e:	735a      	strb	r2, [r3, #13]
 8002d50:	e01c      	b.n	8002d8c <OD_write_PDO_mapping+0x11c>
    } else {
        uint32_t val = CO_getUint32(buf);
 8002d52:	68b8      	ldr	r0, [r7, #8]
 8002d54:	f7ff fd68 	bl	8002828 <CO_getUint32>
 8002d58:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex - 1U, PDO->isRPDO, PDO->OD);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	7d1b      	ldrb	r3, [r3, #20]
 8002d5e:	3b01      	subs	r3, #1
 8002d60:	b2da      	uxtb	r2, r3
 8002d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d64:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	460b      	mov	r3, r1
 8002d72:	6a39      	ldr	r1, [r7, #32]
 8002d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002d76:	f7ff fe13 	bl	80029a0 <PDOconfigMap>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8002d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <OD_write_PDO_mapping+0x11c>
            return odRet;
 8002d86:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d8a:	e006      	b.n	8002d9a <OD_write_PDO_mapping+0x12a>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	68b9      	ldr	r1, [r7, #8]
 8002d92:	68f8      	ldr	r0, [r7, #12]
 8002d94:	f7ff fa73 	bl	800227e <OD_writeOriginal>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3730      	adds	r7, #48	; 0x30
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <OD_read_PDO_commParam>:
 * Custom function for reading OD object "PDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_read_PDO_commParam(OD_stream_t* stream, void* buf, OD_size_t count, OD_size_t* countRead) {
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b088      	sub	sp, #32
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	60f8      	str	r0, [r7, #12]
 8002daa:	60b9      	str	r1, [r7, #8]
 8002dac:	607a      	str	r2, [r7, #4]
 8002dae:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	68b9      	ldr	r1, [r7, #8]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f7ff fa09 	bl	80021ce <OD_readOriginal>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if ((returnCode == ODR_OK) && (stream->subIndex == 1U) && (*countRead == 4U)) {
 8002dc0:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d134      	bne.n	8002e32 <OD_read_PDO_commParam+0x90>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	7d1b      	ldrb	r3, [r3, #20]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d130      	bne.n	8002e32 <OD_read_PDO_commParam+0x90>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b04      	cmp	r3, #4
 8002dd6:	d12c      	bne.n	8002e32 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t* PDO = stream->object;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002dde:	68b8      	ldr	r0, [r7, #8]
 8002de0:	f7ff fd22 	bl	8002828 <CO_getUint32>
 8002de4:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dee:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if ((CAN_ID != 0U) && (CAN_ID == (PDO->preDefinedCanId & 0xFF80U))) {
 8002df0:	8a7b      	ldrh	r3, [r7, #18]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d011      	beq.n	8002e1a <OD_read_PDO_commParam+0x78>
 8002df6:	8a7a      	ldrh	r2, [r7, #18]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8002dfe:	4619      	mov	r1, r3
 8002e00:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002e04:	400b      	ands	r3, r1
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d107      	bne.n	8002e1a <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000U) | PDO->preDefinedCanId;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	0c1b      	lsrs	r3, r3, #16
 8002e0e:	041b      	lsls	r3, r3, #16
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	f8b2 2142 	ldrh.w	r2, [r2, #322]	; 0x142
 8002e16:	4313      	orrs	r3, r2
 8002e18:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) {
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d103      	bne.n	8002e2a <OD_read_PDO_commParam+0x88>
            COB_ID |= 0x80000000U;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e28:	61fb      	str	r3, [r7, #28]
        }

        (void)CO_setUint32(buf, COB_ID);
 8002e2a:	69f9      	ldr	r1, [r7, #28]
 8002e2c:	68b8      	ldr	r0, [r7, #8]
 8002e2e:	f7ff fd09 	bl	8002844 <CO_setUint32>
    }

    return returnCode;
 8002e32:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <OD_write_18xx>:
 * Custom function for writing OD object "TPDO communication parameter"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_18xx(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8002e40:	b590      	push	{r4, r7, lr}
 8002e42:	b093      	sub	sp, #76	; 0x4c
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL) || (count > 4U)) {
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <OD_write_18xx+0x26>
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <OD_write_18xx+0x26>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <OD_write_18xx+0x26>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b04      	cmp	r3, #4
 8002e64:	d901      	bls.n	8002e6a <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002e66:	2309      	movs	r3, #9
 8002e68:	e136      	b.n	80030d8 <OD_write_18xx+0x298>
    }

    CO_TPDO_t* TPDO = stream->object;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 8002e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e72:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    (void)memcpy((void*)bufCopy, (const void*)buf, count);
 8002e74:	f107 0314 	add.w	r3, r7, #20
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f00b fffe 	bl	800ee7e <memcpy>

    switch (stream->subIndex) {
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	7d1b      	ldrb	r3, [r3, #20]
 8002e86:	3b01      	subs	r3, #1
 8002e88:	2b05      	cmp	r3, #5
 8002e8a:	f200 811a 	bhi.w	80030c2 <OD_write_18xx+0x282>
 8002e8e:	a201      	add	r2, pc, #4	; (adr r2, 8002e94 <OD_write_18xx+0x54>)
 8002e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e94:	08002ead 	.word	0x08002ead
 8002e98:	08002fe3 	.word	0x08002fe3
 8002e9c:	08003045 	.word	0x08003045
 8002ea0:	080030c3 	.word	0x080030c3
 8002ea4:	08003073 	.word	0x08003073
 8002ea8:	08003097 	.word	0x08003097
        case 1: { /* COB-ID used by PDO */
            uint32_t COB_ID = CO_getUint32(buf);
 8002eac:	68b8      	ldr	r0, [r7, #8]
 8002eae:	f7ff fcbb 	bl	8002828 <CO_getUint32>
 8002eb2:	6238      	str	r0, [r7, #32]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8002eb4:	6a3b      	ldr	r3, [r7, #32]
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002ebc:	87fb      	strh	r3, [r7, #62]	; 0x3e
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	43db      	mvns	r3, r3
 8002ec2:	0fdb      	lsrs	r3, r3, #31
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	61fb      	str	r3, [r7, #28]

            /* bits 11...29 must be zero, PDO must be disabled on change, CAN_ID == 0 is
             * not allowed, mapping must be configured before enabling the PDO */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (PDO->valid && (CAN_ID != PDO->configuredCanId)))
 8002ec8:	6a3a      	ldr	r2, [r7, #32]
 8002eca:	4b85      	ldr	r3, [pc, #532]	; (80030e0 <OD_write_18xx+0x2a0>)
 8002ecc:	4013      	ands	r3, r2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d13d      	bne.n	8002f4e <OD_write_18xx+0x10e>
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d009      	beq.n	8002eec <OD_write_18xx+0xac>
 8002ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d005      	beq.n	8002eec <OD_write_18xx+0xac>
 8002ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ee2:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8002ee6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d130      	bne.n	8002f4e <OD_write_18xx+0x10e>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID)) || (valid && (PDO->mappedObjectsCount == 0U))) {
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d026      	beq.n	8002f40 <OD_write_18xx+0x100>
 8002ef2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002ef4:	2b7f      	cmp	r3, #127	; 0x7f
 8002ef6:	d92a      	bls.n	8002f4e <OD_write_18xx+0x10e>
 8002ef8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002efa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efe:	d903      	bls.n	8002f08 <OD_write_18xx+0xc8>
 8002f00:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f02:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002f06:	d922      	bls.n	8002f4e <OD_write_18xx+0x10e>
 8002f08:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f0a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002f0e:	d903      	bls.n	8002f18 <OD_write_18xx+0xd8>
 8002f10:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f12:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f16:	d31a      	bcc.n	8002f4e <OD_write_18xx+0x10e>
 8002f18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f1a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002f1e:	d903      	bls.n	8002f28 <OD_write_18xx+0xe8>
 8002f20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f22:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002f26:	d312      	bcc.n	8002f4e <OD_write_18xx+0x10e>
 8002f28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f2a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002f2e:	d303      	bcc.n	8002f38 <OD_write_18xx+0xf8>
 8002f30:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f36:	d30a      	bcc.n	8002f4e <OD_write_18xx+0x10e>
 8002f38:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002f3a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f3e:	d806      	bhi.n	8002f4e <OD_write_18xx+0x10e>
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d005      	beq.n	8002f52 <OD_write_18xx+0x112>
 8002f46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f48:	7b5b      	ldrb	r3, [r3, #13]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <OD_write_18xx+0x112>
                return ODR_INVALID_VALUE;
 8002f4e:	230f      	movs	r3, #15
 8002f50:	e0c2      	b.n	80030d8 <OD_write_18xx+0x298>
            }

            /* parameter changed? */
            if ((valid != PDO->valid) || (CAN_ID != PDO->configuredCanId)) {
 8002f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d106      	bne.n	8002f6a <OD_write_18xx+0x12a>
 8002f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f5e:	f8b3 3144 	ldrh.w	r3, [r3, #324]	; 0x144
 8002f62:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002f64:	429a      	cmp	r2, r3
 8002f66:	f000 80ae 	beq.w	80030c6 <OD_write_18xx+0x286>
                /* if default CAN-ID is written, store to OD without Node-ID */
                if (CAN_ID == PDO->preDefinedCanId) {
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6c:	f8b3 3142 	ldrh.w	r3, [r3, #322]	; 0x142
 8002f70:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d108      	bne.n	8002f88 <OD_write_18xx+0x148>
                    (void)CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80U);
 8002f76:	6a3b      	ldr	r3, [r7, #32]
 8002f78:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7ff fc5e 	bl	8002844 <CO_setUint32>
                }
                if (!valid) {
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <OD_write_18xx+0x152>
                    CAN_ID = 0;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	87fb      	strh	r3, [r7, #62]	; 0x3e
                }

                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f94:	6858      	ldr	r0, [r3, #4]
 8002f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f98:	f8b3 1140 	ldrh.w	r1, [r3, #320]	; 0x140
 8002f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f9e:	7b1b      	ldrb	r3, [r3, #12]
                    PDO->CANdev, PDO->CANdevIdx, CAN_ID, false, PDO->dataLength,
                    TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8002fa0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002fa2:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
                CO_CANtx_t* CANtxBuff = CO_CANtxBufferInit(
 8002fa6:	2af0      	cmp	r2, #240	; 0xf0
 8002fa8:	bf94      	ite	ls
 8002faa:	2201      	movls	r2, #1
 8002fac:	2200      	movhi	r2, #0
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	4614      	mov	r4, r2
 8002fb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002fb4:	9401      	str	r4, [sp, #4]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2300      	movs	r3, #0
 8002fba:	f004 fa43 	bl	8007444 <CO_CANtxBufferInit>
 8002fbe:	61b8      	str	r0, [r7, #24]

                if (CANtxBuff == NULL) {
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <OD_write_18xx+0x18a>
                    return ODR_DEV_INCOMPAT;
 8002fc6:	2309      	movs	r3, #9
 8002fc8:	e086      	b.n	80030d8 <OD_write_18xx+0x298>
                }

                TPDO->CANtxBuff = CANtxBuff;
 8002fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
                PDO->valid = valid;
 8002fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd4:	69fa      	ldr	r2, [r7, #28]
 8002fd6:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002fdc:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
            }
            break;
 8002fe0:	e071      	b.n	80030c6 <OD_write_18xx+0x286>
        }

        case 2: { /* transmission type */ uint8_t transmissionType = CO_getUint8(buf);
 8002fe2:	68b8      	ldr	r0, [r7, #8]
 8002fe4:	f7ff fc03 	bl	80027ee <CO_getUint8>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
            if ((transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 8002fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ff2:	2bf0      	cmp	r3, #240	; 0xf0
 8002ff4:	d905      	bls.n	8003002 <OD_write_18xx+0x1c2>
                && (transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 8002ff6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ffa:	2bfd      	cmp	r3, #253	; 0xfd
 8002ffc:	d801      	bhi.n	8003002 <OD_write_18xx+0x1c2>
                return ODR_INVALID_VALUE;
 8002ffe:	230f      	movs	r3, #15
 8003000:	e06a      	b.n	80030d8 <OD_write_18xx+0x298>
            }
            TPDO->CANtxBuff->syncFlag = transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240;
 8003002:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003006:	2bf0      	cmp	r3, #240	; 0xf0
 8003008:	bf94      	ite	ls
 800300a:	2301      	movls	r3, #1
 800300c:	2300      	movhi	r3, #0
 800300e:	b2da      	uxtb	r2, r3
 8003010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003012:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8003016:	615a      	str	r2, [r3, #20]
            TPDO->syncCounter = 255;
 8003018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301a:	22ff      	movs	r2, #255	; 0xff
 800301c:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#else
            if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
                return ODR_INVALID_VALUE;
            }
#endif
            TPDO->transmissionType = transmissionType;
 8003020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003022:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003026:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
            TPDO->sendRequest = true;
 800302a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800302c:	2201      	movs	r2, #1
 800302e:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = 0;
 8003032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003034:	2200      	movs	r2, #0
 8003036:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            TPDO->eventTimer = 0;
 800303a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800303c:	2200      	movs	r2, #0
 800303e:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
            break;
 8003042:	e041      	b.n	80030c8 <OD_write_18xx+0x288>
        }

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        case 3: { /* inhibit time */
            if (PDO->valid) {
 8003044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <OD_write_18xx+0x210>
                return ODR_INVALID_VALUE;
 800304c:	230f      	movs	r3, #15
 800304e:	e043      	b.n	80030d8 <OD_write_18xx+0x298>
            }
            uint32_t inhibitTime = CO_getUint16(buf);
 8003050:	68b8      	ldr	r0, [r7, #8]
 8003052:	f7ff fbda 	bl	800280a <CO_getUint16>
 8003056:	4603      	mov	r3, r0
 8003058:	62bb      	str	r3, [r7, #40]	; 0x28
            TPDO->inhibitTime_us = inhibitTime * 100U;
 800305a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800305c:	2264      	movs	r2, #100	; 0x64
 800305e:	fb03 f202 	mul.w	r2, r3, r2
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
            TPDO->inhibitTimer = 0;
 8003068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
            break;
 8003070:	e02a      	b.n	80030c8 <OD_write_18xx+0x288>
        }

        case 5: { /* event-timer */
            uint32_t eventTime = CO_getUint16(buf);
 8003072:	68b8      	ldr	r0, [r7, #8]
 8003074:	f7ff fbc9 	bl	800280a <CO_getUint16>
 8003078:	4603      	mov	r3, r0
 800307a:	62fb      	str	r3, [r7, #44]	; 0x2c
            TPDO->eventTime_us = eventTime * 1000U;
 800307c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800307e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003082:	fb03 f202 	mul.w	r2, r3, r2
 8003086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003088:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
            TPDO->eventTimer = 0;
 800308c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800308e:	2200      	movs	r2, #0
 8003090:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
            break;
 8003094:	e018      	b.n	80030c8 <OD_write_18xx+0x288>
        }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        case 6: { /* SYNC start value */
            uint8_t syncStartValue = CO_getUint8(buf);
 8003096:	68b8      	ldr	r0, [r7, #8]
 8003098:	f7ff fba9 	bl	80027ee <CO_getUint8>
 800309c:	4603      	mov	r3, r0
 800309e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

            if (PDO->valid || (syncStartValue > 240U)) {
 80030a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d103      	bne.n	80030b2 <OD_write_18xx+0x272>
 80030aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80030ae:	2bf0      	cmp	r3, #240	; 0xf0
 80030b0:	d901      	bls.n	80030b6 <OD_write_18xx+0x276>
                return ODR_INVALID_VALUE;
 80030b2:	230f      	movs	r3, #15
 80030b4:	e010      	b.n	80030d8 <OD_write_18xx+0x298>
            }
            TPDO->syncStartValue = syncStartValue;
 80030b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030b8:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 80030bc:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
            break;
 80030c0:	e002      	b.n	80030c8 <OD_write_18xx+0x288>
        }
#endif
        default:
            /* MISRA C 2004 15.3 */
            break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <OD_write_18xx+0x288>
            break;
 80030c6:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 80030c8:	f107 0114 	add.w	r1, r7, #20
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f7ff f8d4 	bl	800227e <OD_writeOriginal>
 80030d6:	4603      	mov	r3, r0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3744      	adds	r7, #68	; 0x44
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd90      	pop	{r4, r7, pc}
 80030e0:	3ffff800 	.word	0x3ffff800

080030e4 <CO_TPDO_init>:
CO_TPDO_init(CO_TPDO_t* TPDO, OD_t* OD, CO_EM_t* em,
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
             CO_SYNC_t* SYNC,
#endif
             uint16_t preDefinedCanId, OD_entry_t* OD_18xx_TPDOCommPar, OD_entry_t* OD_1Axx_TPDOMapPar,
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint32_t* errInfo) {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b08e      	sub	sp, #56	; 0x38
 80030e8:	af02      	add	r7, sp, #8
 80030ea:	60f8      	str	r0, [r7, #12]
 80030ec:	60b9      	str	r1, [r7, #8]
 80030ee:	607a      	str	r2, [r7, #4]
 80030f0:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if ((TPDO == NULL) || (OD == NULL) || (em == NULL) || (OD_18xx_TPDOCommPar == NULL) || (OD_1Axx_TPDOMapPar == NULL)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d00e      	beq.n	800311a <CO_TPDO_init+0x36>
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00b      	beq.n	800311a <CO_TPDO_init+0x36>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d008      	beq.n	800311a <CO_TPDO_init+0x36>
 8003108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800310a:	2b00      	cmp	r3, #0
 800310c:	d005      	beq.n	800311a <CO_TPDO_init+0x36>
 800310e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <CO_TPDO_init+0x36>
        || (CANdevTx == NULL)) {
 8003114:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003116:	2b00      	cmp	r3, #0
 8003118:	d102      	bne.n	8003120 <CO_TPDO_init+0x3c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800311a:	f04f 33ff 	mov.w	r3, #4294967295
 800311e:	e144      	b.n	80033aa <CO_TPDO_init+0x2c6>
    }

    /* clear object */
    (void)memset(TPDO, 0, sizeof(CO_TPDO_t));
 8003120:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 8003124:	2100      	movs	r1, #0
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f00b fe1e 	bl	800ed68 <memset>

    /* Configure object variables */
    PDO->em = em;
 800312c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312e:	687a      	ldr	r2, [r7, #4]
 8003130:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8003132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003134:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003136:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8003138:	2300      	movs	r3, #0
 800313a:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO, OD, OD_1Axx_TPDOMapPar, false, errInfo, &erroneousMap);
 800313c:	f107 031c 	add.w	r3, r7, #28
 8003140:	9301      	str	r3, [sp, #4]
 8003142:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	2300      	movs	r3, #0
 8003148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800314a:	68b9      	ldr	r1, [r7, #8]
 800314c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800314e:	f7ff fce5 	bl	8002b1c <PDO_initMapping>
 8003152:	4603      	mov	r3, r0
 8003154:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (ret != CO_ERROR_NO) {
 8003158:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <CO_TPDO_init+0x82>
        return ret;
 8003160:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8003164:	e121      	b.n	80033aa <CO_TPDO_init+0x2c6>
    }

    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003166:	23fe      	movs	r3, #254	; 0xfe
 8003168:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 800316a:	f107 021b 	add.w	r2, r7, #27
 800316e:	2301      	movs	r3, #1
 8003170:	2102      	movs	r1, #2
 8003172:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003174:	f7ff fb9a 	bl	80028ac <OD_get_u8>
 8003178:	4603      	mov	r3, r0
 800317a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800317e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00e      	beq.n	80031a4 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8003186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2U;
 800318c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800318e:	f7ff fb68 	bl	8002862 <OD_getIndex>
 8003192:	4603      	mov	r3, r0
 8003194:	021b      	lsls	r3, r3, #8
 8003196:	f043 0202 	orr.w	r2, r3, #2
 800319a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800319e:	f06f 030b 	mvn.w	r3, #11
 80031a2:	e102      	b.n	80033aa <CO_TPDO_init+0x2c6>
    }
    if ((transmissionType < (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)
 80031a4:	7efb      	ldrb	r3, [r7, #27]
 80031a6:	2bfd      	cmp	r3, #253	; 0xfd
 80031a8:	d804      	bhi.n	80031b4 <CO_TPDO_init+0xd0>
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        && (transmissionType > (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240)
 80031aa:	7efb      	ldrb	r3, [r7, #27]
 80031ac:	2bf0      	cmp	r3, #240	; 0xf0
 80031ae:	d901      	bls.n	80031b4 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = (uint8_t)(CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 80031b0:	23fe      	movs	r3, #254	; 0xfe
 80031b2:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 80031b4:	7efa      	ldrb	r2, [r7, #27]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f883 216c 	strb.w	r2, [r3, #364]	; 0x16c
    TPDO->sendRequest = true;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2201      	movs	r2, #1
 80031c0:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80031c4:	2300      	movs	r3, #0
 80031c6:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 80031c8:	f107 0214 	add.w	r2, r7, #20
 80031cc:	2301      	movs	r3, #1
 80031ce:	2101      	movs	r1, #1
 80031d0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031d2:	f7ff fb95 	bl	8002900 <OD_get_u32>
 80031d6:	4603      	mov	r3, r0
 80031d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80031dc:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00e      	beq.n	8003202 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 80031e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d008      	beq.n	80031fc <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1U;
 80031ea:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031ec:	f7ff fb39 	bl	8002862 <OD_getIndex>
 80031f0:	4603      	mov	r3, r0
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031fa:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80031fc:	f06f 030b 	mvn.w	r3, #11
 8003200:	e0d3      	b.n	80033aa <CO_TPDO_init+0x2c6>
    }

    bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	43db      	mvns	r3, r3
 8003206:	0fdb      	lsrs	r3, r3, #31
 8003208:	b2db      	uxtb	r3, r3
 800320a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	b29b      	uxth	r3, r3
 8003210:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003214:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && ((PDO->mappedObjectsCount == 0U) || (CAN_ID == 0U))) {
 8003216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00d      	beq.n	8003238 <CO_TPDO_init+0x154>
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	7b5b      	ldrb	r3, [r3, #13]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <CO_TPDO_init+0x146>
 8003224:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <CO_TPDO_init+0x154>
        valid = false;
 800322a:	2300      	movs	r3, #0
 800322c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0U) {
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d101      	bne.n	8003238 <CO_TPDO_init+0x154>
            erroneousMap = 1;
 8003234:	2301      	movs	r3, #1
 8003236:	61fb      	str	r3, [r7, #28]
        }
    }

    if (erroneousMap != 0U) {
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d00e      	beq.n	800325c <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em, CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d001      	beq.n	800324c <CO_TPDO_init+0x168>
 8003248:	69fb      	ldr	r3, [r7, #28]
 800324a:	e000      	b.n	800324e <CO_TPDO_init+0x16a>
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8003254:	221a      	movs	r2, #26
 8003256:	2101      	movs	r1, #1
 8003258:	f7fe f97f 	bl	800155a <CO_error>
                       (erroneousMap != 1U) ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if ((CAN_ID != 0U) && (CAN_ID == (preDefinedCanId & 0xFF80U))) {
 8003266:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <CO_TPDO_init+0x19a>
 800326c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800326e:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003270:	f64f 7380 	movw	r3, #65408	; 0xff80
 8003274:	400b      	ands	r3, r1
 8003276:	429a      	cmp	r2, r3
 8003278:	d101      	bne.n	800327e <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 800327a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800327c:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	7b1b      	ldrb	r3, [r3, #12]
                                         TPDO->transmissionType <= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_240);
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	f892 216c 	ldrb.w	r2, [r2, #364]	; 0x16c
    TPDO->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CAN_ID, false, PDO->dataLength,
 8003288:	2af0      	cmp	r2, #240	; 0xf0
 800328a:	bf94      	ite	ls
 800328c:	2201      	movls	r2, #1
 800328e:	2200      	movhi	r2, #0
 8003290:	b2d2      	uxtb	r2, r2
 8003292:	4610      	mov	r0, r2
 8003294:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003296:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 800329a:	9001      	str	r0, [sp, #4]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	2300      	movs	r3, #0
 80032a0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80032a2:	f004 f8cf 	bl	8007444 <CO_CANtxBufferInit>
 80032a6:	4602      	mov	r2, r0
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168

    if (TPDO->CANtxBuff == NULL) {
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d102      	bne.n	80032be <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80032b8:	f04f 33ff 	mov.w	r3, #4294967295
 80032bc:	e075      	b.n	80033aa <CO_TPDO_init+0x2c6>
    }

    PDO->valid = valid;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c2:	609a      	str	r2, [r3, #8]

    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    uint16_t inhibitTime = 0;
 80032c4:	2300      	movs	r3, #0
 80032c6:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 80032c8:	2300      	movs	r3, #0
 80032ca:	823b      	strh	r3, [r7, #16]
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 80032cc:	f107 0212 	add.w	r2, r7, #18
 80032d0:	2301      	movs	r3, #1
 80032d2:	2103      	movs	r1, #3
 80032d4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032d6:	f7ff fafe 	bl	80028d6 <OD_get_u16>
    (void)OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 80032da:	f107 0210 	add.w	r2, r7, #16
 80032de:	2301      	movs	r3, #1
 80032e0:	2105      	movs	r1, #5
 80032e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80032e4:	f7ff faf7 	bl	80028d6 <OD_get_u16>
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100U;
 80032e8:	8a7b      	ldrh	r3, [r7, #18]
 80032ea:	461a      	mov	r2, r3
 80032ec:	2364      	movs	r3, #100	; 0x64
 80032ee:	fb03 f202 	mul.w	r2, r3, r2
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f8c3 217c 	str.w	r2, [r3, #380]	; 0x17c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000U;
 80032f8:	8a3b      	ldrh	r3, [r7, #16]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003300:	fb03 f202 	mul.w	r2, r3, r2
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
#endif

    /* Configure communication parameter - SYNC start value (optional) */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
    TPDO->syncStartValue = 0;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 2178 	strb.w	r2, [r3, #376]	; 0x178
    (void)OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f503 72bc 	add.w	r2, r3, #376	; 0x178
 8003318:	2301      	movs	r3, #1
 800331a:	2106      	movs	r1, #6
 800331c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800331e:	f7ff fac5 	bl	80028ac <OD_get_u8>
    TPDO->SYNC = SYNC;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	683a      	ldr	r2, [r7, #0]
 8003326:	f8c3 2174 	str.w	r2, [r3, #372]	; 0x174
    TPDO->syncCounter = 255;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	22ff      	movs	r2, #255	; 0xff
 800332e:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif

    /* Configure OD extensions */
#if ((CO_CONFIG_PDO)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    PDO->isRPDO = false;
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	2200      	movs	r2, #0
 8003336:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD = OD;
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->CANdevIdx = CANdevTxIdx;
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003348:	f8a3 2140 	strh.w	r2, [r3, #320]	; 0x140
    PDO->preDefinedCanId = preDefinedCanId;
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003350:	f8a3 2142 	strh.w	r2, [r3, #322]	; 0x142
    PDO->configuredCanId = CAN_ID;
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003358:	f8a3 2144 	strh.w	r2, [r3, #324]	; 0x144
    PDO->OD_communicationParam_ext.object = TPDO;
 800335c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335e:	68fa      	ldr	r2, [r7, #12]
 8003360:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8003364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003366:	4a13      	ldr	r2, [pc, #76]	; (80033b4 <CO_TPDO_init+0x2d0>)
 8003368:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 800336c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800336e:	4a12      	ldr	r2, [pc, #72]	; (80033b8 <CO_TPDO_init+0x2d4>)
 8003370:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
    PDO->OD_mappingParam_extension.object = TPDO;
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	68fa      	ldr	r2, [r7, #12]
 8003378:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 800337c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800337e:	4a0f      	ldr	r2, [pc, #60]	; (80033bc <CO_TPDO_init+0x2d8>)
 8003380:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	4a0e      	ldr	r2, [pc, #56]	; (80033c0 <CO_TPDO_init+0x2dc>)
 8003388:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
    (void)OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 800338c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800338e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8003392:	4619      	mov	r1, r3
 8003394:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003396:	f7ff fa75 	bl	8002884 <OD_extension_init>
    (void)OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80033a0:	4619      	mov	r1, r3
 80033a2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80033a4:	f7ff fa6e 	bl	8002884 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3730      	adds	r7, #48	; 0x30
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	08002da3 	.word	0x08002da3
 80033b8:	08002e41 	.word	0x08002e41
 80033bc:	080021cf 	.word	0x080021cf
 80033c0:	08002c71 	.word	0x08002c71

080033c4 <CO_TPDOsend>:
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t
CO_TPDOsend(CO_TPDO_t* TPDO) {
 80033c4:	b590      	push	{r4, r7, lr}
 80033c6:	b093      	sub	sp, #76	; 0x4c
 80033c8:	af02      	add	r7, sp, #8
 80033ca:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t* dataTPDO = &TPDO->CANtxBuff->data[0];
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80033d6:	3305      	adds	r3, #5
 80033d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    OD_size_t verifyLength = 0U;
 80033da:	2300      	movs	r3, #0
 80033dc:	63bb      	str	r3, [r7, #56]	; 0x38

#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
                          || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO));
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <CO_TPDOsend+0x2e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80033ee:	2bfd      	cmp	r3, #253	; 0xfd
 80033f0:	d901      	bls.n	80033f6 <CO_TPDOsend+0x32>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <CO_TPDOsend+0x34>
 80033f6:	2300      	movs	r3, #0
    bool_t eventDriven = ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_OD_IO_ACCESS) != 0
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80033fa:	2300      	movs	r3, #0
 80033fc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8003400:	e066      	b.n	80034d0 <CO_TPDOsend+0x10c>
        OD_IO_t* OD_IO = &PDO->OD_IO[i];
 8003402:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003406:	015b      	lsls	r3, r3, #5
 8003408:	3310      	adds	r3, #16
 800340a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800340c:	4413      	add	r3, r2
 800340e:	623b      	str	r3, [r7, #32]
        OD_stream_t* stream = &OD_IO->stream;
 8003410:	6a3b      	ldr	r3, [r7, #32]
 8003412:	61fb      	str	r3, [r7, #28]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t)stream->dataOffset;
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	76fb      	strb	r3, [r7, #27]

        /* additional safety check */
        verifyLength += (OD_size_t)mappedLength;
 800341a:	7efb      	ldrb	r3, [r7, #27]
 800341c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800341e:	4413      	add	r3, r2
 8003420:	63bb      	str	r3, [r7, #56]	; 0x38
        if (verifyLength > CO_PDO_MAX_SIZE) {
 8003422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003424:	2b08      	cmp	r3, #8
 8003426:	d85a      	bhi.n	80034de <CO_TPDOsend+0x11a>
            break;
        }

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	633b      	str	r3, [r7, #48]	; 0x30
        if (ODdataLength > CO_PDO_MAX_SIZE) {
 800342e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003430:	2b08      	cmp	r3, #8
 8003432:	d901      	bls.n	8003438 <CO_TPDOsend+0x74>
            ODdataLength = CO_PDO_MAX_SIZE;
 8003434:	2308      	movs	r3, #8
 8003436:	633b      	str	r3, [r7, #48]	; 0x30
        }
        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t* dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003438:	7efb      	ldrb	r3, [r7, #27]
 800343a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343c:	429a      	cmp	r2, r3
 800343e:	d90a      	bls.n	8003456 <CO_TPDOsend+0x92>
            (void)memset(buf, 0, sizeof(buf));
 8003440:	f107 030c 	add.w	r3, r7, #12
 8003444:	2208      	movs	r2, #8
 8003446:	2100      	movs	r1, #0
 8003448:	4618      	mov	r0, r3
 800344a:	f00b fc8d 	bl	800ed68 <memset>
            dataTPDOCopy = buf;
 800344e:	f107 030c 	add.w	r3, r7, #12
 8003452:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003454:	e001      	b.n	800345a <CO_TPDOsend+0x96>
        } else {
            dataTPDOCopy = dataTPDO;
 8003456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003458:	62fb      	str	r3, [r7, #44]	; 0x2c
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read() and store mappedLength back to stream.dataOffset */
        stream->dataOffset = 0;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	2200      	movs	r2, #0
 800345e:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003460:	6a3b      	ldr	r3, [r7, #32]
 8003462:	699c      	ldr	r4, [r3, #24]
 8003464:	f107 0308 	add.w	r3, r7, #8
 8003468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800346a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800346c:	69f8      	ldr	r0, [r7, #28]
 800346e:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003470:	7efa      	ldrb	r2, [r7, #27]
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	60da      	str	r2, [r3, #12]
            }
        }
#endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 8003476:	7efb      	ldrb	r3, [r7, #27]
 8003478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800347a:	429a      	cmp	r2, r3
 800347c:	d906      	bls.n	800348c <CO_TPDOsend+0xc8>
            (void)memcpy(dataTPDO, buf, mappedLength);
 800347e:	7efa      	ldrb	r2, [r7, #27]
 8003480:	f107 030c 	add.w	r3, r7, #12
 8003484:	4619      	mov	r1, r3
 8003486:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003488:	f00b fcf9 	bl	800ee7e <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
#if OD_FLAGS_PDO_SIZE > 0
        uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 800348c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	3244      	adds	r2, #68	; 0x44
 8003494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003498:	617b      	str	r3, [r7, #20]
        if ((flagPDObyte != NULL) && eventDriven) {
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00e      	beq.n	80034be <CO_TPDOsend+0xfa>
 80034a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d00b      	beq.n	80034be <CO_TPDOsend+0xfa>
            *flagPDObyte |= PDO->flagPDObitmask[i];
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	781a      	ldrb	r2, [r3, #0]
 80034aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034b0:	440b      	add	r3, r1
 80034b2:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80034b6:	4313      	orrs	r3, r2
 80034b8:	b2da      	uxtb	r2, r3
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	701a      	strb	r2, [r3, #0]
        }
#endif

        dataTPDO += mappedLength;
 80034be:	7efb      	ldrb	r3, [r7, #27]
 80034c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034c2:	4413      	add	r3, r2
 80034c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80034c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80034ca:	3301      	adds	r3, #1
 80034cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	7b5b      	ldrb	r3, [r3, #13]
 80034d4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80034d8:	429a      	cmp	r2, r3
 80034da:	d392      	bcc.n	8003402 <CO_TPDOsend+0x3e>
 80034dc:	e000      	b.n	80034e0 <CO_TPDOsend+0x11c>
            break;
 80034de:	bf00      	nop
        }
#endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    if (verifyLength > CO_PDO_MAX_SIZE || verifyLength != (OD_size_t)PDO->dataLength) {
 80034e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e2:	2b08      	cmp	r3, #8
 80034e4:	d805      	bhi.n	80034f2 <CO_TPDOsend+0x12e>
 80034e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034e8:	7b1b      	ldrb	r3, [r3, #12]
 80034ea:	461a      	mov	r2, r3
 80034ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00e      	beq.n	8003510 <CO_TPDOsend+0x14c>
        /* bug in software, should not happen */
        CO_errorReport(PDO->em, CO_EM_GENERIC_SOFTWARE_ERROR, CO_EMC_SOFTWARE_INTERNAL, (0x200000 | verifyLength));
 80034f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034fc:	9300      	str	r3, [sp, #0]
 80034fe:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8003502:	222c      	movs	r2, #44	; 0x2c
 8003504:	2101      	movs	r1, #1
 8003506:	f7fe f828 	bl	800155a <CO_error>
        return CO_ERROR_DATA_CORRUPT;
 800350a:	f06f 030c 	mvn.w	r3, #12
 800350e:	e019      	b.n	8003544 <CO_TPDOsend+0x180>
    }

    TPDO->sendRequest = false;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
    TPDO->eventTimer = TPDO->eventTime_us;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 2180 	ldr.w	r2, [r3, #384]	; 0x180
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	685a      	ldr	r2, [r3, #4]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800353a:	4619      	mov	r1, r3
 800353c:	4610      	mov	r0, r2
 800353e:	f003 fffb 	bl	8007538 <CO_CANsend>
 8003542:	4603      	mov	r3, r0
}
 8003544:	4618      	mov	r0, r3
 8003546:	3744      	adds	r7, #68	; 0x44
 8003548:	46bd      	mov	sp, r7
 800354a:	bd90      	pop	{r4, r7, pc}

0800354c <CO_TPDO_process>:
void
CO_TPDO_process(CO_TPDO_t* TPDO,
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || defined CO_DOXYGEN
                uint32_t timeDifference_us, uint32_t* timerNext_us,
#endif
                bool_t NMTisOperational, bool_t syncWas) {
 800354c:	b580      	push	{r7, lr}
 800354e:	b088      	sub	sp, #32
 8003550:	af00      	add	r7, sp, #0
 8003552:	60f8      	str	r0, [r7, #12]
 8003554:	60b9      	str	r1, [r7, #8]
 8003556:	607a      	str	r2, [r7, #4]
 8003558:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t* PDO = &TPDO->PDO_common;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	61bb      	str	r3, [r7, #24]
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)) != 0
    (void)timerNext_us;
#endif
    (void)syncWas;

    if (PDO->valid && NMTisOperational) {
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80dc 	beq.w	8003720 <CO_TPDO_process+0x1d4>
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80d8 	beq.w	8003720 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if (((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0) || (OD_FLAGS_PDO_SIZE > 0)
        if ((TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <CO_TPDO_process+0x38>
            || (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO)) {
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003580:	2bfd      	cmp	r3, #253	; 0xfd
 8003582:	d946      	bls.n	8003612 <CO_TPDO_process+0xc6>
            /* event timer */
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            if (TPDO->eventTime_us != 0U) {
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
 800358a:	2b00      	cmp	r3, #0
 800358c:	d018      	beq.n	80035c0 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us) ? (TPDO->eventTimer - timeDifference_us) : 0U;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d205      	bcs.n	80035a6 <CO_TPDO_process+0x5a>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	f8d3 2188 	ldr.w	r2, [r3, #392]	; 0x188
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	e000      	b.n	80035a8 <CO_TPDO_process+0x5c>
 80035a6:	2300      	movs	r3, #0
 80035a8:	68fa      	ldr	r2, [r7, #12]
 80035aa:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
                if (TPDO->eventTimer == 0U) {
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8d3 3188 	ldr.w	r3, [r3, #392]	; 0x188
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d103      	bne.n	80035c0 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#endif
            }
#endif
            /* check for any OD_requestTPDO() */
#if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d123      	bne.n	8003612 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80035ca:	2300      	movs	r3, #0
 80035cc:	77fb      	strb	r3, [r7, #31]
 80035ce:	e01b      	b.n	8003608 <CO_TPDO_process+0xbc>
                    uint8_t* flagPDObyte = PDO->flagPDObyte[i];
 80035d0:	7ffa      	ldrb	r2, [r7, #31]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	3244      	adds	r2, #68	; 0x44
 80035d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035da:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00f      	beq.n	8003602 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0U) {
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	781a      	ldrb	r2, [r3, #0]
 80035e6:	7ffb      	ldrb	r3, [r7, #31]
 80035e8:	69b9      	ldr	r1, [r7, #24]
 80035ea:	440b      	add	r3, r1
 80035ec:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 80035f0:	4013      	ands	r3, r2
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d104      	bne.n	8003602 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
                            break;
 8003600:	e007      	b.n	8003612 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8003602:	7ffb      	ldrb	r3, [r7, #31]
 8003604:	3301      	adds	r3, #1
 8003606:	77fb      	strb	r3, [r7, #31]
 8003608:	69bb      	ldr	r3, [r7, #24]
 800360a:	7b5b      	ldrb	r3, [r3, #13]
 800360c:	7ffa      	ldrb	r2, [r7, #31]
 800360e:	429a      	cmp	r2, r3
 8003610:	d3de      	bcc.n	80035d0 <CO_TPDO_process+0x84>
#endif
        }
#endif /* ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0) */

        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 8003618:	2bfd      	cmp	r3, #253	; 0xfd
 800361a:	d91d      	bls.n	8003658 <CO_TPDO_process+0x10c>
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
                                                                          : 0U;
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d205      	bcs.n	8003634 <CO_TPDO_process+0xe8>
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f8d3 2184 	ldr.w	r2, [r3, #388]	; 0x184
                                                                          : 0U;
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	e000      	b.n	8003636 <CO_TPDO_process+0xea>
 8003634:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us) ? (TPDO->inhibitTimer - timeDifference_us)
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	f8c2 3184 	str.w	r3, [r2, #388]	; 0x184

            /* send TPDO */
            if (TPDO->sendRequest && (TPDO->inhibitTimer == 0U)) {
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003642:	2b00      	cmp	r3, #0
 8003644:	d07d      	beq.n	8003742 <CO_TPDO_process+0x1f6>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
 800364c:	2b00      	cmp	r3, #0
 800364e:	d178      	bne.n	8003742 <CO_TPDO_process+0x1f6>
                (void)CO_TPDOsend(TPDO);
 8003650:	68f8      	ldr	r0, [r7, #12]
 8003652:	f7ff feb7 	bl	80033c4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003656:	e074      	b.n	8003742 <CO_TPDO_process+0x1f6>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        else if ((TPDO->SYNC != NULL) && syncWas) {
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 800365e:	2b00      	cmp	r3, #0
 8003660:	d06f      	beq.n	8003742 <CO_TPDO_process+0x1f6>
 8003662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d06c      	beq.n	8003742 <CO_TPDO_process+0x1f6>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 800366e:	2b00      	cmp	r3, #0
 8003670:	d108      	bne.n	8003684 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) {
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8003678:	2b00      	cmp	r3, #0
 800367a:	d062      	beq.n	8003742 <CO_TPDO_process+0x1f6>
                    (void)CO_TPDOsend(TPDO);
 800367c:	68f8      	ldr	r0, [r7, #12]
 800367e:	f7ff fea1 	bl	80033c4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003682:	e05e      	b.n	8003742 <CO_TPDO_process+0x1f6>
                }
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255U) {
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 800368a:	2bff      	cmp	r3, #255	; 0xff
 800368c:	d119      	bne.n	80036c2 <CO_TPDO_process+0x176>
                    if ((TPDO->SYNC->counterOverflowValue != 0U) && (TPDO->syncStartValue != 0U)) {
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 8003694:	7c5b      	ldrb	r3, [r3, #17]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d009      	beq.n	80036ae <CO_TPDO_process+0x162>
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d004      	beq.n	80036ae <CO_TPDO_process+0x162>
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	22fe      	movs	r2, #254	; 0xfe
 80036a8:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 80036ac:	e009      	b.n	80036c2 <CO_TPDO_process+0x176>
                    } else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = (TPDO->transmissionType / 2U) + 1U;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	f893 316c 	ldrb.w	r3, [r3, #364]	; 0x16c
 80036b4:	085b      	lsrs	r3, r3, #1
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	b2da      	uxtb	r2, r3
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC with matched syncStartValue. */
                if (TPDO->syncCounter == 254U) {
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80036c8:	2bfe      	cmp	r3, #254	; 0xfe
 80036ca:	d112      	bne.n	80036f2 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f8d3 3174 	ldr.w	r3, [r3, #372]	; 0x174
 80036d2:	7c9a      	ldrb	r2, [r3, #18]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f893 3178 	ldrb.w	r3, [r3, #376]	; 0x178
 80036da:	429a      	cmp	r2, r3
 80036dc:	d131      	bne.n	8003742 <CO_TPDO_process+0x1f6>
                        TPDO->syncCounter = TPDO->transmissionType;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                        (void)CO_TPDOsend(TPDO);
 80036ea:	68f8      	ldr	r0, [r7, #12]
 80036ec:	f7ff fe6a 	bl	80033c4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80036f0:	e027      	b.n	8003742 <CO_TPDO_process+0x1f6>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0U) {
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 80036f8:	3b01      	subs	r3, #1
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3179 	ldrb.w	r3, [r3, #377]	; 0x179
 8003708:	2b00      	cmp	r3, #0
 800370a:	d11a      	bne.n	8003742 <CO_TPDO_process+0x1f6>
                    TPDO->syncCounter = TPDO->transmissionType;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f893 216c 	ldrb.w	r2, [r3, #364]	; 0x16c
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
                    (void)CO_TPDOsend(TPDO);
 8003718:	68f8      	ldr	r0, [r7, #12]
 800371a:	f7ff fe53 	bl	80033c4 <CO_TPDOsend>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800371e:	e010      	b.n	8003742 <CO_TPDO_process+0x1f6>
        }
#endif

    } else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2201      	movs	r2, #1
 8003724:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
        TPDO->inhibitTimer = 0;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
        TPDO->eventTimer = 0;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2200      	movs	r2, #0
 8003734:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
#endif
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
        TPDO->syncCounter = 255;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	22ff      	movs	r2, #255	; 0xff
 800373c:	f883 2179 	strb.w	r2, [r3, #377]	; 0x179
#endif
    }
}
 8003740:	e000      	b.n	8003744 <CO_TPDO_process+0x1f8>
        if (TPDO->transmissionType >= (uint8_t)CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003742:	bf00      	nop
}
 8003744:	bf00      	nop
 8003746:	3720      	adds	r7, #32
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <CO_getUint8>:
CO_getUint8(const void* buf) {
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003758:	73fb      	strb	r3, [r7, #15]
    return value;
 800375a:	7bfb      	ldrb	r3, [r7, #15]
}
 800375c:	4618      	mov	r0, r3
 800375e:	3714      	adds	r7, #20
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8003768:	b480      	push	{r7}
 800376a:	b085      	sub	sp, #20
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8003774:	60fb      	str	r3, [r7, #12]
    return value;
 8003776:	68fb      	ldr	r3, [r7, #12]
}
 8003778:	4618      	mov	r0, r3
 800377a:	3714      	adds	r7, #20
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d002      	beq.n	8003798 <OD_getIndex+0x14>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	881b      	ldrh	r3, [r3, #0]
 8003796:	e000      	b.n	800379a <OD_getIndex+0x16>
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d101      	bne.n	80037ba <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80037b6:	2305      	movs	r3, #5
 80037b8:	e003      	b.n	80037c2 <OD_extension_init+0x1c>
    entry->extension = extension;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80037c0:	2300      	movs	r3, #0
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af02      	add	r7, sp, #8
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	607a      	str	r2, [r7, #4]
 80037d8:	603b      	str	r3, [r7, #0]
 80037da:	460b      	mov	r3, r1
 80037dc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80037de:	7af9      	ldrb	r1, [r7, #11]
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	9300      	str	r3, [sp, #0]
 80037e4:	2301      	movs	r3, #1
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f7fe ff43 	bl	8002674 <OD_get_value>
 80037ee:	4603      	mov	r3, r0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	60f8      	str	r0, [r7, #12]
 8003800:	607a      	str	r2, [r7, #4]
 8003802:	603b      	str	r3, [r7, #0]
 8003804:	460b      	mov	r3, r1
 8003806:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003808:	7af9      	ldrb	r1, [r7, #11]
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2304      	movs	r3, #4
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f7fe ff2e 	bl	8002674 <OD_get_value>
 8003818:	4603      	mov	r3, r0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <OD_set_u32>:
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t
OD_set_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t val, bool_t odOrig) {
 8003822:	b580      	push	{r7, lr}
 8003824:	b086      	sub	sp, #24
 8003826:	af02      	add	r7, sp, #8
 8003828:	60f8      	str	r0, [r7, #12]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
 800382e:	460b      	mov	r3, r1
 8003830:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8003832:	1d3a      	adds	r2, r7, #4
 8003834:	7af9      	ldrb	r1, [r7, #11]
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	2304      	movs	r3, #4
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f7fe ff56 	bl	80026ee <OD_set_value>
 8003842:	4603      	mov	r3, r0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SDO_receive(void* object, void* msg) {
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t* SDO = (CO_SDOserver_t*)object;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	791b      	ldrb	r3, [r3, #4]
 800385e:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	3305      	adds	r3, #5
 8003864:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8U) {
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d115      	bne.n	8003898 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80U) {
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b80      	cmp	r3, #128	; 0x80
 8003872:	d103      	bne.n	800387c <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	2200      	movs	r2, #0
 8003878:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 800387a:	e00d      	b.n	8003898 <CO_SDO_receive+0x4c>
        } else if (CO_FLAG_READ(SDO->CANrxNew)) {
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003880:	2b00      	cmp	r3, #0
 8003882:	d109      	bne.n	8003898 <CO_SDO_receive+0x4c>
            (void)memcpy(SDO->CANrxData, data, DLC);
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	3340      	adds	r3, #64	; 0x40
 8003888:	7cfa      	ldrb	r2, [r7, #19]
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	4618      	mov	r0, r3
 800388e:	f00b faf6 	bl	800ee7e <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2201      	movs	r2, #1
 8003896:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003898:	bf00      	nop
 800389a:	3718      	adds	r7, #24
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <CO_SDOserver_init_canRxTx>:

/* helper for configuring CANrx and CANtx */
static CO_ReturnError_t
CO_SDOserver_init_canRxTx(CO_SDOserver_t* SDO, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANdevTxIdx,
                          uint32_t COB_IDClientToServer, uint32_t COB_IDServerToClient) {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b08a      	sub	sp, #40	; 0x28
 80038a4:	af04      	add	r7, sp, #16
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	60b9      	str	r1, [r7, #8]
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	460b      	mov	r3, r1
 80038b0:	80fb      	strh	r3, [r7, #6]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80bb      	strh	r3, [r7, #4]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    /* proceed only, if parameters change */
    if ((COB_IDClientToServer == SDO->COB_IDClientToServer) && (COB_IDServerToClient == SDO->COB_IDServerToClient)) {
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ba:	6a3a      	ldr	r2, [r7, #32]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d106      	bne.n	80038ce <CO_SDOserver_init_canRxTx+0x2e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c6:	429a      	cmp	r2, r3
 80038c8:	d101      	bne.n	80038ce <CO_SDOserver_init_canRxTx+0x2e>
        return CO_ERROR_NO;
 80038ca:	2300      	movs	r3, #0
 80038cc:	e04e      	b.n	800396c <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6a3a      	ldr	r2, [r7, #32]
 80038d2:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	655a      	str	r2, [r3, #84]	; 0x54
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000UL) == 0U) ? (uint16_t)COB_IDClientToServer : 0U;
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	db02      	blt.n	80038e6 <CO_SDOserver_init_canRxTx+0x46>
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	e000      	b.n	80038e8 <CO_SDOserver_init_canRxTx+0x48>
 80038e6:	2300      	movs	r3, #0
 80038e8:	82fb      	strh	r3, [r7, #22]
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000UL) == 0U) ? (uint16_t)COB_IDServerToClient : 0U;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	db02      	blt.n	80038f6 <CO_SDOserver_init_canRxTx+0x56>
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	e000      	b.n	80038f8 <CO_SDOserver_init_canRxTx+0x58>
 80038f6:	2300      	movs	r3, #0
 80038f8:	82bb      	strh	r3, [r7, #20]
    if ((idC2S != 0U) && (idS2C != 0U)) {
 80038fa:	8afb      	ldrh	r3, [r7, #22]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d006      	beq.n	800390e <CO_SDOserver_init_canRxTx+0x6e>
 8003900:	8abb      	ldrh	r3, [r7, #20]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2201      	movs	r2, #1
 800390a:	611a      	str	r2, [r3, #16]
 800390c:	e006      	b.n	800391c <CO_SDOserver_init_canRxTx+0x7c>
    } else {
        idC2S = 0;
 800390e:	2300      	movs	r3, #0
 8003910:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, idC2S, 0x7FF, false, (void*)SDO, CO_SDO_receive);
 800391c:	8afa      	ldrh	r2, [r7, #22]
 800391e:	88f9      	ldrh	r1, [r7, #6]
 8003920:	4b14      	ldr	r3, [pc, #80]	; (8003974 <CO_SDOserver_init_canRxTx+0xd4>)
 8003922:	9302      	str	r3, [sp, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	2300      	movs	r3, #0
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8003930:	68b8      	ldr	r0, [r7, #8]
 8003932:	f003 fd29 	bl	8007388 <CO_CANrxBufferInit>
 8003936:	4603      	mov	r3, r0
 8003938:	74fb      	strb	r3, [r7, #19]

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(SDO->CANdevTx, CANdevTxIdx, idS2C, false, 8, false);
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	8aba      	ldrh	r2, [r7, #20]
 8003940:	88b9      	ldrh	r1, [r7, #4]
 8003942:	2300      	movs	r3, #0
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	2308      	movs	r3, #8
 8003948:	9300      	str	r3, [sp, #0]
 800394a:	2300      	movs	r3, #0
 800394c:	f003 fd7a 	bl	8007444 <CO_CANtxBufferInit>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	605a      	str	r2, [r3, #4]

    if (SDO->CANtxBuff == NULL) {
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 800395e:	23ff      	movs	r3, #255	; 0xff
 8003960:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
    }

    return ret;
 8003968:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	0800384d 	.word	0x0800384d

08003978 <OD_write_1201_additional>:
 * Custom function for writing OD object _SDO server parameter_, additional channels
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1201_additional(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8003978:	b590      	push	{r4, r7, lr}
 800397a:	b08f      	sub	sp, #60	; 0x3c
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if ((stream == NULL) || (buf == NULL) || (countWritten == NULL)) {
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <OD_write_1201_additional+0x20>
 800398c:	68bb      	ldr	r3, [r7, #8]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <OD_write_1201_additional+0x20>
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8003998:	2309      	movs	r3, #9
 800399a:	e0f9      	b.n	8003b90 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t* SDO = (CO_SDOserver_t*)stream->object;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	7d1b      	ldrb	r3, [r3, #20]
 80039a6:	2b03      	cmp	r3, #3
 80039a8:	f200 80e8 	bhi.w	8003b7c <OD_write_1201_additional+0x204>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <OD_write_1201_additional+0x3c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	08003a8d 	.word	0x08003a8d
 80039c0:	08003b53 	.word	0x08003b53
        case 0: /* Highest sub-index supported */ return ODR_READONLY; break;
 80039c4:	2304      	movs	r3, #4
 80039c6:	e0e3      	b.n	8003b90 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 80039c8:	68b8      	ldr	r0, [r7, #8]
 80039ca:	f7ff fecd 	bl	8003768 <CO_getUint32>
 80039ce:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039d8:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FFU);
 80039da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039de:	b29b      	uxth	r3, r3
 80039e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039e4:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	0fdb      	lsrs	r3, r3, #31
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || ((valid && SDO->valid) && (CAN_ID != CAN_ID_cur))
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	4b69      	ldr	r3, [pc, #420]	; (8003b98 <OD_write_1201_additional+0x220>)
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d134      	bne.n	8003a64 <OD_write_1201_additional+0xec>
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d007      	beq.n	8003a10 <OD_write_1201_additional+0x98>
 8003a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a02:	691b      	ldr	r3, [r3, #16]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <OD_write_1201_additional+0x98>
 8003a08:	8afa      	ldrh	r2, [r7, #22]
 8003a0a:	8abb      	ldrh	r3, [r7, #20]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d129      	bne.n	8003a64 <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d028      	beq.n	8003a68 <OD_write_1201_additional+0xf0>
 8003a16:	8afb      	ldrh	r3, [r7, #22]
 8003a18:	2b7f      	cmp	r3, #127	; 0x7f
 8003a1a:	d923      	bls.n	8003a64 <OD_write_1201_additional+0xec>
 8003a1c:	8afb      	ldrh	r3, [r7, #22]
 8003a1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a22:	d903      	bls.n	8003a2c <OD_write_1201_additional+0xb4>
 8003a24:	8afb      	ldrh	r3, [r7, #22]
 8003a26:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003a2a:	d91b      	bls.n	8003a64 <OD_write_1201_additional+0xec>
 8003a2c:	8afb      	ldrh	r3, [r7, #22]
 8003a2e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003a32:	d903      	bls.n	8003a3c <OD_write_1201_additional+0xc4>
 8003a34:	8afb      	ldrh	r3, [r7, #22]
 8003a36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a3a:	d313      	bcc.n	8003a64 <OD_write_1201_additional+0xec>
 8003a3c:	8afb      	ldrh	r3, [r7, #22]
 8003a3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a42:	d903      	bls.n	8003a4c <OD_write_1201_additional+0xd4>
 8003a44:	8afb      	ldrh	r3, [r7, #22]
 8003a46:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003a4a:	d30b      	bcc.n	8003a64 <OD_write_1201_additional+0xec>
 8003a4c:	8afb      	ldrh	r3, [r7, #22]
 8003a4e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003a52:	d303      	bcc.n	8003a5c <OD_write_1201_additional+0xe4>
 8003a54:	8afb      	ldrh	r3, [r7, #22]
 8003a56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a5a:	d303      	bcc.n	8003a64 <OD_write_1201_additional+0xec>
 8003a5c:	8afb      	ldrh	r3, [r7, #22]
 8003a5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003a62:	d901      	bls.n	8003a68 <OD_write_1201_additional+0xf0>
                return ODR_INVALID_VALUE;
 8003a64:	230f      	movs	r3, #15
 8003a66:	e093      	b.n	8003b90 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx, COB_ID,
 8003a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6a:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a6e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a74:	f8b3 004e 	ldrh.w	r0, [r3, #78]	; 0x4e
 8003a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7c:	9301      	str	r3, [sp, #4]
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	4603      	mov	r3, r0
 8003a84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003a86:	f7ff ff0b 	bl	80038a0 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDServerToClient);
            break;
 8003a8a:	e07a      	b.n	8003b82 <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 8003a8c:	68b8      	ldr	r0, [r7, #8]
 8003a8e:	f7ff fe6b 	bl	8003768 <CO_getUint32>
 8003a92:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FFU);
 8003a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a9c:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FFU);
 8003a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa8:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000U) == 0U;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	43db      	mvns	r3, r3
 8003aae:	0fdb      	lsrs	r3, r3, #31
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if (((COB_ID & 0x3FFFF800U) != 0U) || (valid && (SDO->valid && (CAN_ID != CAN_ID_cur)))
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ab6:	4b38      	ldr	r3, [pc, #224]	; (8003b98 <OD_write_1201_additional+0x220>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d134      	bne.n	8003b28 <OD_write_1201_additional+0x1b0>
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d007      	beq.n	8003ad4 <OD_write_1201_additional+0x15c>
 8003ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ac6:	691b      	ldr	r3, [r3, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d003      	beq.n	8003ad4 <OD_write_1201_additional+0x15c>
 8003acc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003ace:	8c3b      	ldrh	r3, [r7, #32]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d129      	bne.n	8003b28 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))) {
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d028      	beq.n	8003b2c <OD_write_1201_additional+0x1b4>
 8003ada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003adc:	2b7f      	cmp	r3, #127	; 0x7f
 8003ade:	d923      	bls.n	8003b28 <OD_write_1201_additional+0x1b0>
 8003ae0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae6:	d903      	bls.n	8003af0 <OD_write_1201_additional+0x178>
 8003ae8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003aea:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8003aee:	d91b      	bls.n	8003b28 <OD_write_1201_additional+0x1b0>
 8003af0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003af2:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8003af6:	d903      	bls.n	8003b00 <OD_write_1201_additional+0x188>
 8003af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003afa:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003afe:	d313      	bcc.n	8003b28 <OD_write_1201_additional+0x1b0>
 8003b00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b02:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b06:	d903      	bls.n	8003b10 <OD_write_1201_additional+0x198>
 8003b08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b0a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8003b0e:	d30b      	bcc.n	8003b28 <OD_write_1201_additional+0x1b0>
 8003b10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b12:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8003b16:	d303      	bcc.n	8003b20 <OD_write_1201_additional+0x1a8>
 8003b18:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b1e:	d303      	bcc.n	8003b28 <OD_write_1201_additional+0x1b0>
 8003b20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003b22:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003b26:	d901      	bls.n	8003b2c <OD_write_1201_additional+0x1b4>
                return ODR_INVALID_VALUE;
 8003b28:	230f      	movs	r3, #15
 8003b2a:	e031      	b.n	8003b90 <OD_write_1201_additional+0x218>
            }
            (void)CO_SDOserver_init_canRxTx(SDO, SDO->CANdevRx, SDO->CANdevRxIdx, SDO->CANdevTxIdx,
 8003b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b2e:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8003b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b32:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	f8b3 404e 	ldrh.w	r4, [r3, #78]	; 0x4e
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b42:	9201      	str	r2, [sp, #4]
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	4623      	mov	r3, r4
 8003b48:	4602      	mov	r2, r0
 8003b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003b4c:	f7ff fea8 	bl	80038a0 <CO_SDOserver_init_canRxTx>
                                            SDO->COB_IDClientToServer, COB_ID);
            break;
 8003b50:	e017      	b.n	8003b82 <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1U) {
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d001      	beq.n	8003b5c <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 8003b58:	230b      	movs	r3, #11
 8003b5a:	e019      	b.n	8003b90 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 8003b5c:	68b8      	ldr	r0, [r7, #8]
 8003b5e:	f7ff fdf5 	bl	800374c <CO_getUint8>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <OD_write_1201_additional+0x200>
 8003b70:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	da03      	bge.n	8003b80 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 8003b78:	230f      	movs	r3, #15
 8003b7a:	e009      	b.n	8003b90 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default: return ODR_SUB_NOT_EXIST; break;
 8003b7c:	230e      	movs	r3, #14
 8003b7e:	e007      	b.n	8003b90 <OD_write_1201_additional+0x218>
            break;
 8003b80:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	68f8      	ldr	r0, [r7, #12]
 8003b8a:	f7fe fb78 	bl	800227e <OD_writeOriginal>
 8003b8e:	4603      	mov	r3, r0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3734      	adds	r7, #52	; 0x34
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}
 8003b98:	3ffff800 	.word	0x3ffff800

08003b9c <CO_SDOserver_init>:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC */

CO_ReturnError_t
CO_SDOserver_init(CO_SDOserver_t* SDO, OD_t* OD, OD_entry_t* OD_1200_SDOsrvPar, uint8_t nodeId,
                  uint16_t SDOtimeoutTime_ms, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, CO_CANmodule_t* CANdevTx,
                  uint16_t CANdevTxIdx, uint32_t* errInfo) {
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b08c      	sub	sp, #48	; 0x30
 8003ba0:	af02      	add	r7, sp, #8
 8003ba2:	60f8      	str	r0, [r7, #12]
 8003ba4:	60b9      	str	r1, [r7, #8]
 8003ba6:	607a      	str	r2, [r7, #4]
 8003ba8:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if ((SDO == NULL) || (OD == NULL) || (CANdevRx == NULL) || (CANdevTx == NULL)) {
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d008      	beq.n	8003bc2 <CO_SDOserver_init+0x26>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <CO_SDOserver_init+0x26>
 8003bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <CO_SDOserver_init+0x26>
 8003bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d102      	bne.n	8003bc8 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc6:	e0f5      	b.n	8003db4 <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68ba      	ldr	r2, [r7, #8]
 8003bcc:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	78fa      	ldrb	r2, [r7, #3]
 8003bd2:	731a      	strb	r2, [r3, #12]
#if (((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED)) != 0
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000U;
 8003bd4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003bd6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bda:	fb03 f202 	mul.w	r2, r3, r2
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	679a      	str	r2, [r3, #120]	; 0x78
#endif
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) != 0
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d117      	bne.n	8003c1e <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8003bee:	78fb      	ldrb	r3, [r7, #3]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <CO_SDOserver_init+0x60>
 8003bf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	da02      	bge.n	8003c02 <CO_SDOserver_init+0x66>
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003bfc:	f04f 33ff 	mov.w	r3, #4294967295
 8003c00:	e0d8      	b.n	8003db4 <CO_SDOserver_init+0x218>
        }

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003c0a:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003c0c:	78fb      	ldrb	r3, [r7, #3]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003c14:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2201      	movs	r2, #1
 8003c1a:	611a      	str	r2, [r3, #16]
 8003c1c:	e0a4      	b.n	8003d68 <CO_SDOserver_init+0x1cc>
    } else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fdb0 	bl	8003784 <OD_getIndex>
 8003c24:	4603      	mov	r3, r0
 8003c26:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == (uint16_t)OD_H1200_SDO_SERVER_1_PARAM) {
 8003c28:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c2a:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003c2e:	d123      	bne.n	8003c78 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if ((nodeId < 1U) || (nodeId > 127U)) {
 8003c30:	78fb      	ldrb	r3, [r7, #3]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <CO_SDOserver_init+0xa2>
 8003c36:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	da02      	bge.n	8003c44 <CO_SDOserver_init+0xa8>
                return CO_ERROR_ILLEGAL_ARGUMENT;
 8003c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003c42:	e0b7      	b.n	8003db4 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	b29b      	uxth	r3, r3
 8003c48:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8003c4c:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 8003c56:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	611a      	str	r2, [r3, #16]

            (void)OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 8003c5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003c60:	2301      	movs	r3, #1
 8003c62:	2101      	movs	r1, #1
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7ff fddc 	bl	8003822 <OD_set_u32>
            (void)OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 8003c6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	2102      	movs	r1, #2
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f7ff fdd6 	bl	8003822 <OD_set_u32>
 8003c76:	e077      	b.n	8003d68 <CO_SDOserver_init+0x1cc>
        } else if ((OD_SDOsrvParIdx > (uint16_t)OD_H1200_SDO_SERVER_1_PARAM)
 8003c78:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c7a:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8003c7e:	d96f      	bls.n	8003d60 <CO_SDOserver_init+0x1c4>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003c82:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8003c86:	d26b      	bcs.n	8003d60 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 8003c88:	f107 021d 	add.w	r2, r7, #29
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	2100      	movs	r1, #0
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f7ff fd9c 	bl	80037ce <OD_get_u8>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1, &COB_IDClientToServer32, true);
 8003c9c:	f107 0218 	add.w	r2, r7, #24
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	2101      	movs	r1, #1
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff fda7 	bl	80037f8 <OD_get_u32>
 8003caa:	4603      	mov	r3, r0
 8003cac:	f887 3020 	strb.w	r3, [r7, #32]
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2, &COB_IDServerToClient32, true);
 8003cb0:	f107 0214 	add.w	r2, r7, #20
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	2102      	movs	r1, #2
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f7ff fd9d 	bl	80037f8 <OD_get_u32>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	77fb      	strb	r3, [r7, #31]

            if ((odRet0 != ODR_OK) || ((maxSubIndex != 2U) && (maxSubIndex != 3U)) || (odRet1 != ODR_OK)
 8003cc2:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <CO_SDOserver_init+0x14a>
 8003cca:	7f7b      	ldrb	r3, [r7, #29]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d002      	beq.n	8003cd6 <CO_SDOserver_init+0x13a>
 8003cd0:	7f7b      	ldrb	r3, [r7, #29]
 8003cd2:	2b03      	cmp	r3, #3
 8003cd4:	d107      	bne.n	8003ce6 <CO_SDOserver_init+0x14a>
 8003cd6:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <CO_SDOserver_init+0x14a>
                || (odRet2 != ODR_OK)) {
 8003cde:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d008      	beq.n	8003cf8 <CO_SDOserver_init+0x15c>
                if (errInfo != NULL) {
 8003ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d002      	beq.n	8003cf2 <CO_SDOserver_init+0x156>
                    *errInfo = OD_SDOsrvParIdx;
 8003cec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cf0:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8003cf2:	f06f 030b 	mvn.w	r3, #11
 8003cf6:	e05d      	b.n	8003db4 <CO_SDOserver_init+0x218>
            }

            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	db05      	blt.n	8003d0a <CO_SDOserver_init+0x16e>
                                       ? (uint16_t)(COB_IDClientToServer32 & 0x7FFU)
 8003cfe:	69bb      	ldr	r3, [r7, #24]
 8003d00:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000U) == 0U)
 8003d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	e000      	b.n	8003d0c <CO_SDOserver_init+0x170>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	84fb      	strh	r3, [r7, #38]	; 0x26
                                       : 0U;
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	db05      	blt.n	8003d20 <CO_SDOserver_init+0x184>
                                       ? (uint16_t)(COB_IDServerToClient32 & 0x7FFU)
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000U) == 0U)
 8003d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	e000      	b.n	8003d22 <CO_SDOserver_init+0x186>
 8003d20:	2300      	movs	r3, #0
 8003d22:	84bb      	strh	r3, [r7, #36]	; 0x24
                                       : 0U;

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
            SDO->OD_1200_extension.object = SDO;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.read = OD_readOriginal;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a23      	ldr	r2, [pc, #140]	; (8003dbc <CO_SDOserver_init+0x220>)
 8003d2e:	65da      	str	r2, [r3, #92]	; 0x5c
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4a23      	ldr	r2, [pc, #140]	; (8003dc0 <CO_SDOserver_init+0x224>)
 8003d34:	661a      	str	r2, [r3, #96]	; 0x60
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar, &SDO->OD_1200_extension);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	3358      	adds	r3, #88	; 0x58
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff fd32 	bl	80037a6 <OD_extension_init>
 8003d42:	4603      	mov	r3, r0
 8003d44:	77bb      	strb	r3, [r7, #30]
            if (odRetE != ODR_OK) {
 8003d46:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00b      	beq.n	8003d66 <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) {
 8003d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <CO_SDOserver_init+0x1be>
                    *errInfo = OD_SDOsrvParIdx;
 8003d54:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003d56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d58:	601a      	str	r2, [r3, #0]
                }
                return CO_ERROR_OD_PARAMETERS;
 8003d5a:	f06f 030b 	mvn.w	r3, #11
 8003d5e:	e029      	b.n	8003db4 <CO_SDOserver_init+0x218>
            }
#endif
        } else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 8003d60:	f04f 33ff 	mov.w	r3, #4294967295
 8003d64:	e026      	b.n	8003db4 <CO_SDOserver_init+0x218>
                   && (OD_SDOsrvParIdx <= ((uint16_t)OD_H1200_SDO_SERVER_1_PARAM + 0x7FU))) {
 8003d66:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* store the parameters and configure CANrx and CANtx */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SDO->CANdevRx = CANdevRx;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d72:	649a      	str	r2, [r3, #72]	; 0x48
    SDO->CANdevRxIdx = CANdevRxIdx;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003d78:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    SDO->CANdevTxIdx = CANdevTxIdx;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8003d82:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	651a      	str	r2, [r3, #80]	; 0x50
    SDO->COB_IDServerToClient = 0;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	655a      	str	r2, [r3, #84]	; 0x54
#endif
    SDO->CANdevTx = CANdevTx;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d96:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO, CANdevRx, CANdevRxIdx, CANdevTxIdx, CanId_ClientToServer,
 8003d98:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003d9a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003d9c:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8003da0:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8003da2:	9201      	str	r2, [sp, #4]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	4603      	mov	r3, r0
 8003da8:	460a      	mov	r2, r1
 8003daa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003dac:	68f8      	ldr	r0, [r7, #12]
 8003dae:	f7ff fd77 	bl	80038a0 <CO_SDOserver_init_canRxTx>
 8003db2:	4603      	mov	r3, r0
                                     CanId_ServerToClient);
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3728      	adds	r7, #40	; 0x28
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	080021cf 	.word	0x080021cf
 8003dc0:	08003979 	.word	0x08003979

08003dc4 <validateAndWriteToOD>:
 * @param crcOperation 0=none, 1=calculate, 2=calculate and compare
 * @parma crcClient crc checksum to campare with
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
validateAndWriteToOD(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, uint8_t crcOperation, uint16_t crcClient) {
 8003dc4:	b590      	push	{r4, r7, lr}
 8003dc6:	b08b      	sub	sp, #44	; 0x2c
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	461a      	mov	r2, r3
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	71fb      	strb	r3, [r7, #7]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	f000 8082 	beq.w	8003ef0 <validateAndWriteToOD+0x12c>
        /* Verify if size of data downloaded matches size indicated. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran != SDO->sizeInd)) {
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d015      	beq.n	8003e20 <validateAndWriteToOD+0x5c>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d00f      	beq.n	8003e20 <validateAndWriteToOD+0x5c>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d901      	bls.n	8003e10 <validateAndWriteToOD+0x4c>
 8003e0c:	4a73      	ldr	r2, [pc, #460]	; (8003fdc <validateAndWriteToOD+0x218>)
 8003e0e:	e000      	b.n	8003e12 <validateAndWriteToOD+0x4e>
 8003e10:	4a73      	ldr	r2, [pc, #460]	; (8003fe0 <validateAndWriteToOD+0x21c>)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	751a      	strb	r2, [r3, #20]
            return false;
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	e0d8      	b.n	8003fd2 <validateAndWriteToOD+0x20e>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be shorter than size of the
         * OD data buffer. If so, add two zero bytes to terminate (unicode) string. Shorten
         * also OD data size, (temporary, send information about EOF into OD_IO.write) */
        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003e2c:	b25b      	sxtb	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da42      	bge.n	8003eb8 <validateAndWriteToOD+0xf4>
            && ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd))
 8003e32:	6a3b      	ldr	r3, [r7, #32]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d004      	beq.n	8003e42 <validateAndWriteToOD+0x7e>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e3c:	6a3a      	ldr	r2, [r7, #32]
 8003e3e:	429a      	cmp	r2, r3
 8003e40:	d93a      	bls.n	8003eb8 <validateAndWriteToOD+0xf4>
            && ((SDO->bufOffsetWr + 2U) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE)) {
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e48:	3302      	adds	r3, #2
 8003e4a:	2b20      	cmp	r3, #32
 8003e4c:	d834      	bhi.n	8003eb8 <validateAndWriteToOD+0xf4>
            SDO->buf[SDO->bufOffsetWr] = 0;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e54:	68fa      	ldr	r2, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	2200      	movs	r2, #0
 8003e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
            SDO->bufOffsetWr++;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran++;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	66da      	str	r2, [r3, #108]	; 0x6c
            if ((sizeInOd == 0U) || (SDO->sizeTran < sizeInOd)) {
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d004      	beq.n	8003e86 <validateAndWriteToOD+0xc2>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e80:	6a3a      	ldr	r2, [r7, #32]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d913      	bls.n	8003eae <validateAndWriteToOD+0xea>
                SDO->buf[SDO->bufOffsetWr] = 0;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	4413      	add	r3, r2
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
                SDO->bufOffsetWr++;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003e9c:	1c5a      	adds	r2, r3, #1
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran++;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	66da      	str	r2, [r3, #108]	; 0x6c
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	621a      	str	r2, [r3, #32]
 8003eb6:	e02d      	b.n	8003f14 <validateAndWriteToOD+0x150>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check. */
        else if (sizeInOd == 0U) {
 8003eb8:	6a3b      	ldr	r3, [r7, #32]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <validateAndWriteToOD+0x104>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	621a      	str	r2, [r3, #32]
 8003ec6:	e025      	b.n	8003f14 <validateAndWriteToOD+0x150>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ecc:	6a3a      	ldr	r2, [r7, #32]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d020      	beq.n	8003f14 <validateAndWriteToOD+0x150>
            *abortCode = (SDO->sizeTran > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ed6:	6a3a      	ldr	r2, [r7, #32]
 8003ed8:	429a      	cmp	r2, r3
 8003eda:	d201      	bcs.n	8003ee0 <validateAndWriteToOD+0x11c>
 8003edc:	4a3f      	ldr	r2, [pc, #252]	; (8003fdc <validateAndWriteToOD+0x218>)
 8003ede:	e000      	b.n	8003ee2 <validateAndWriteToOD+0x11e>
 8003ee0:	4a3f      	ldr	r2, [pc, #252]	; (8003fe0 <validateAndWriteToOD+0x21c>)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	751a      	strb	r2, [r3, #20]
            return false;
 8003eec:	2300      	movs	r3, #0
 8003eee:	e070      	b.n	8003fd2 <validateAndWriteToOD+0x20e>
        } else { /* MISRA C 2004 14.10 */
        }
    } else {
        /* Verify if size of data downloaded is not too large. */
        if ((SDO->sizeInd > 0U) && (SDO->sizeTran > SDO->sizeInd)) {
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d00d      	beq.n	8003f14 <validateAndWriteToOD+0x150>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d907      	bls.n	8003f14 <validateAndWriteToOD+0x150>
            *abortCode = CO_SDO_AB_DATA_LONG;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a35      	ldr	r2, [pc, #212]	; (8003fdc <validateAndWriteToOD+0x218>)
 8003f08:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	751a      	strb	r2, [r3, #20]
            return false;
 8003f10:	2300      	movs	r3, #0
 8003f12:	e05e      	b.n	8003fd2 <validateAndWriteToOD+0x20e>
    (void)crcOperation;
    (void)crcClient;
    (void)bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 8003f14:	2300      	movs	r3, #0
 8003f16:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003f1c:	f3ef 8210 	mrs	r2, PRIMASK
 8003f20:	617a      	str	r2, [r7, #20]
  return(result);
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8003f26:	b672      	cpsid	i
}
 8003f28:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf, SDO->bufOffsetWr, &countWritten);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f103 0018 	add.w	r0, r3, #24
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003f40:	f107 0310 	add.w	r3, r7, #16
 8003f44:	47a0      	blx	r4
 8003f46:	4603      	mov	r3, r0
 8003f48:	77fb      	strb	r3, [r7, #31]
    CO_UNLOCK_OD(SDO->CANdevTx);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f52:	69bb      	ldr	r3, [r7, #24]
 8003f54:	f383 8810 	msr	PRIMASK, r3
}
 8003f58:	bf00      	nop

    SDO->bufOffsetWr = 0;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* verify write error value */
    if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8003f62:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d011      	beq.n	8003f8e <validateAndWriteToOD+0x1ca>
 8003f6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d00c      	beq.n	8003f8e <validateAndWriteToOD+0x1ca>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8003f74:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f7fe fb5d 	bl	8002638 <OD_getSDOabCode>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2201      	movs	r2, #1
 8003f88:	751a      	strb	r2, [r3, #20]
        return false;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	e021      	b.n	8003fd2 <validateAndWriteToOD+0x20e>
    } else if (SDO->finished && (odRet == ODR_PARTIAL)) {
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00c      	beq.n	8003fb0 <validateAndWriteToOD+0x1ec>
 8003f96:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f9e:	d107      	bne.n	8003fb0 <validateAndWriteToOD+0x1ec>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	4a0f      	ldr	r2, [pc, #60]	; (8003fe0 <validateAndWriteToOD+0x21c>)
 8003fa4:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	751a      	strb	r2, [r3, #20]
        return false;
 8003fac:	2300      	movs	r3, #0
 8003fae:	e010      	b.n	8003fd2 <validateAndWriteToOD+0x20e>
    } else if (!SDO->finished && (odRet == ODR_OK)) {
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d10b      	bne.n	8003fd0 <validateAndWriteToOD+0x20c>
 8003fb8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <validateAndWriteToOD+0x20c>
        /* OD variable was written completely, but SDO download still has data */
        *abortCode = CO_SDO_AB_DATA_LONG;
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	4a06      	ldr	r2, [pc, #24]	; (8003fdc <validateAndWriteToOD+0x218>)
 8003fc4:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	751a      	strb	r2, [r3, #20]
        return false;
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e000      	b.n	8003fd2 <validateAndWriteToOD+0x20e>
    } else { /* MISRA C 2004 14.10 */
    }

    return true;
 8003fd0:	2301      	movs	r3, #1
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	372c      	adds	r7, #44	; 0x2c
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd90      	pop	{r4, r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	06070012 	.word	0x06070012
 8003fe0:	06070013 	.word	0x06070013

08003fe4 <readFromOd>:
 * @parma countMinimum if data size in buffer is less than countMinimum, then buffer is refilled from OD variable
 * @param calculateCrc if true, crc is calculated
 *
 * Returns true on success, otherwise write also abortCode and sets state to CO_SDO_ST_ABORT */
static bool_t
readFromOd(CO_SDOserver_t* SDO, CO_SDO_abortCode_t* abortCode, OD_size_t countMinimum, bool_t calculateCrc) {
 8003fe4:	b590      	push	{r4, r7, lr}
 8003fe6:	b08d      	sub	sp, #52	; 0x34
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	60f8      	str	r0, [r7, #12]
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	603b      	str	r3, [r7, #0]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_BLOCK) == 0
    (void)calculateCrc; /* may be unused */
#endif
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && (countRemain < countMinimum)) {
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004006:	2b00      	cmp	r3, #0
 8004008:	f040 80ab 	bne.w	8004162 <readFromOd+0x17e>
 800400c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	429a      	cmp	r2, r3
 8004012:	f080 80a6 	bcs.w	8004162 <readFromOd+0x17e>
        /* first move remaining data to the start of the buffer */
        (void)memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	f103 0080 	add.w	r0, r3, #128	; 0x80
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004028:	4413      	add	r3, r2
 800402a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402c:	4619      	mov	r1, r3
 800402e:	f00a fe81 	bl	800ed34 <memmove>
        SDO->bufOffsetRd = 0;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2200      	movs	r2, #0
 8004036:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        SDO->bufOffsetWr = countRemain;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	f1c3 0320 	rsb	r3, r3, #32
 8004048:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]

        CO_LOCK_OD(SDO->CANdevTx);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004052:	f3ef 8210 	mrs	r2, PRIMASK
 8004056:	617a      	str	r2, [r7, #20]
  return(result);
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800405c:	b672      	cpsid	i
}
 800405e:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, &SDO->buf[countRemain], countRdRequest, &countRd);
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f103 0018 	add.w	r0, r3, #24
 800406a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406c:	3380      	adds	r3, #128	; 0x80
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	18d1      	adds	r1, r2, r3
 8004072:	f107 0310 	add.w	r3, r7, #16
 8004076:	6a3a      	ldr	r2, [r7, #32]
 8004078:	47a0      	blx	r4
 800407a:	4603      	mov	r3, r0
 800407c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        CO_UNLOCK_OD(SDO->CANdevTx);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004086:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	f383 8810 	msr	PRIMASK, r3
}
 800408e:	bf00      	nop

        if ((odRet != ODR_OK) && (odRet != ODR_PARTIAL)) {
 8004090:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <readFromOd+0xd8>
 8004098:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800409c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a0:	d00c      	beq.n	80040bc <readFromOd+0xd8>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80040a2:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fe fac6 	bl	8002638 <OD_getSDOabCode>
 80040ac:	4602      	mov	r2, r0
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2201      	movs	r2, #1
 80040b6:	751a      	strb	r2, [r3, #20]
            return false;
 80040b8:	2300      	movs	r3, #0
 80040ba:	e053      	b.n	8004164 <readFromOd+0x180>
        }

        /* if data is string, send only data up to null termination */
        OD_size_t lastRd = countRd + countRemain;
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040c0:	4413      	add	r3, r2
 80040c2:	61fb      	str	r3, [r7, #28]
        if ((countRd > 0U) && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)) {
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d027      	beq.n	800411a <readFromOd+0x136>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040d0:	b25b      	sxtb	r3, r3
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	da21      	bge.n	800411a <readFromOd+0x136>
            SDO->buf[lastRd] = 0; /* (SDO->buf is one byte larger) */
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	4413      	add	r3, r2
 80040dc:	3380      	adds	r3, #128	; 0x80
 80040de:	2200      	movs	r2, #0
 80040e0:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char*)&SDO->buf[countRemain]);
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	3380      	adds	r3, #128	; 0x80
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	4413      	add	r3, r2
 80040ea:	4618      	mov	r0, r3
 80040ec:	f7fc f880 	bl	80001f0 <strlen>
 80040f0:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0U) {
 80040f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d101      	bne.n	80040fc <readFromOd+0x118>
                countStr = 1;
 80040f8:	2301      	movs	r3, #1
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
            } /* zero length is not allowed */
            if (countStr < countRd) {
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004100:	429a      	cmp	r2, r3
 8004102:	d20a      	bcs.n	800411a <readFromOd+0x136>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8004104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004106:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800411e:	441a      	add	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        if ((SDO->bufOffsetWr == 0U) || (odRet == ODR_PARTIAL)) {
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d004      	beq.n	800413a <readFromOd+0x156>
 8004130:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004138:	d110      	bne.n	800415c <readFromOd+0x178>
            SDO->finished = false;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	675a      	str	r2, [r3, #116]	; 0x74
            if (SDO->bufOffsetWr < countMinimum) {
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	429a      	cmp	r2, r3
 800414a:	d90a      	bls.n	8004162 <readFromOd+0x17e>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4a07      	ldr	r2, [pc, #28]	; (800416c <readFromOd+0x188>)
 8004150:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	751a      	strb	r2, [r3, #20]
                return false;
 8004158:	2300      	movs	r3, #0
 800415a:	e003      	b.n	8004164 <readFromOd+0x180>
            }
        } else {
            SDO->finished = true;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2201      	movs	r2, #1
 8004160:	675a      	str	r2, [r3, #116]	; 0x74
        if (calculateCrc && SDO->block_crcEnabled) {
            SDO->block_crc = crc16_ccitt(&SDO->buf[countRemain], countRd, SDO->block_crc);
        }
#endif
    }
    return true;
 8004162:	2301      	movs	r3, #1
}
 8004164:	4618      	mov	r0, r3
 8004166:	3734      	adds	r7, #52	; 0x34
 8004168:	46bd      	mov	sp, r7
 800416a:	bd90      	pop	{r4, r7, pc}
 800416c:	06040047 	.word	0x06040047

08004170 <CO_SDOserver_process>:
#endif

CO_SDO_return_t
CO_SDOserver_process(CO_SDOserver_t* SDO, bool_t NMTisPreOrOperational, uint32_t timeDifference_us,
                     uint32_t* timerNext_us) {
 8004170:	b590      	push	{r4, r7, lr}
 8004172:	b09b      	sub	sp, #108	; 0x6c
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	607a      	str	r2, [r7, #4]
 800417c:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d103      	bne.n	800418c <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 8004184:	f06f 0301 	mvn.w	r3, #1
 8004188:	f000 bd00 	b.w	8004b8c <CO_SDOserver_process+0xa1c>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 800418c:	2301      	movs	r3, #1
 800418e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8004192:	2300      	movs	r3, #0
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800419a:	2b00      	cmp	r3, #0
 800419c:	bf14      	ite	ne
 800419e:	2301      	movne	r3, #1
 80041a0:	2300      	moveq	r3, #0
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	657b      	str	r3, [r7, #84]	; 0x54

    if ((SDO->state == CO_SDO_ST_IDLE) && SDO->valid && !isNew) {
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	7d1b      	ldrb	r3, [r3, #20]
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d10a      	bne.n	80041c6 <CO_SDOserver_process+0x56>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d006      	beq.n	80041c6 <CO_SDOserver_process+0x56>
 80041b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d103      	bne.n	80041c6 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 80041be:	2300      	movs	r3, #0
 80041c0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80041c4:	e2d7      	b.n	8004776 <CO_SDOserver_process+0x606>
    } else if (!NMTisPreOrOperational || !SDO->valid) {
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <CO_SDOserver_process+0x64>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2200      	movs	r2, #0
 80041d8:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	63da      	str	r2, [r3, #60]	; 0x3c
        ret = CO_SDO_RT_ok_communicationEnd;
 80041e0:	2300      	movs	r3, #0
 80041e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80041e6:	e2c6      	b.n	8004776 <CO_SDOserver_process+0x606>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 80041e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 82c3 	beq.w	8004776 <CO_SDOserver_process+0x606>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	7d1b      	ldrb	r3, [r3, #20]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f040 80cc 	bne.w	8004394 <CO_SDOserver_process+0x224>
            bool_t upload = false;
 80041fc:	2300      	movs	r3, #0
 80041fe:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0U) == 0x20U) {
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004206:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800420a:	2b20      	cmp	r3, #32
 800420c:	d103      	bne.n	8004216 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2211      	movs	r2, #17
 8004212:	751a      	strb	r2, [r3, #20]
 8004214:	e00f      	b.n	8004236 <CO_SDOserver_process+0xc6>
            } else if (SDO->CANrxData[0] == 0x40U) {
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800421c:	2b40      	cmp	r3, #64	; 0x40
 800421e:	d105      	bne.n	800422c <CO_SDOserver_process+0xbc>
                upload = true;
 8004220:	2301      	movs	r3, #1
 8004222:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2221      	movs	r2, #33	; 0x21
 8004228:	751a      	strb	r2, [r3, #20]
 800422a:	e004      	b.n	8004236 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 800422c:	4ba7      	ldr	r3, [pc, #668]	; (80044cc <CO_SDOserver_process+0x35c>)
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	2b00      	cmp	r3, #0
 800423a:	d162      	bne.n	8004302 <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = (uint16_t)((((uint16_t)SDO->CANrxData[2]) << 8) | SDO->CANrxData[1]);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004242:	021b      	lsls	r3, r3, #8
 8004244:	b21a      	sxth	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424c:	b21b      	sxth	r3, r3
 800424e:	4313      	orrs	r3, r2
 8004250:	b21b      	sxth	r3, r3
 8004252:	b29a      	uxth	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	871a      	strh	r2, [r3, #56]	; 0x38
                SDO->subIndex = SDO->CANrxData[3];
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f893 2043 	ldrb.w	r2, [r3, #67]	; 0x43
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex, &SDO->OD_IO, false);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f7fe f88e 	bl	8002390 <OD_find>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 103a 	ldrb.w	r1, [r3, #58]	; 0x3a
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f103 0218 	add.w	r2, r3, #24
 8004280:	2300      	movs	r3, #0
 8004282:	f7fe f8e1 	bl	8002448 <OD_getSub>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                if (odRet != ODR_OK) {
 800428c:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004294:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004298:	4618      	mov	r0, r3
 800429a:	f7fe f9cd 	bl	8002638 <OD_getSDOabCode>
 800429e:	4603      	mov	r3, r0
 80042a0:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2201      	movs	r2, #1
 80042a6:	751a      	strb	r2, [r3, #20]
 80042a8:	e02b      	b.n	8004302 <CO_SDOserver_process+0x192>
                } else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_RW) == 0U) {
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 80042b8:	4b85      	ldr	r3, [pc, #532]	; (80044d0 <CO_SDOserver_process+0x360>)
 80042ba:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2201      	movs	r2, #1
 80042c0:	751a      	strb	r2, [r3, #20]
 80042c2:	e01e      	b.n	8004302 <CO_SDOserver_process+0x192>
                    } else if (upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_R) == 0U)) {
 80042c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00c      	beq.n	80042e4 <CO_SDOserver_process+0x174>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d0:	f003 0301 	and.w	r3, r3, #1
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d105      	bne.n	80042e4 <CO_SDOserver_process+0x174>
                        abortCode = CO_SDO_AB_WRITEONLY;
 80042d8:	4b7e      	ldr	r3, [pc, #504]	; (80044d4 <CO_SDOserver_process+0x364>)
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2201      	movs	r2, #1
 80042e0:	751a      	strb	r2, [r3, #20]
 80042e2:	e00e      	b.n	8004302 <CO_SDOserver_process+0x192>
                    } else if (!upload && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_SDO_W) == 0U)) {
 80042e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <CO_SDOserver_process+0x192>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d104      	bne.n	8004302 <CO_SDOserver_process+0x192>
                        abortCode = CO_SDO_AB_READONLY;
 80042f8:	4b77      	ldr	r3, [pc, #476]	; (80044d8 <CO_SDOserver_process+0x368>)
 80042fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2201      	movs	r2, #1
 8004300:	751a      	strb	r2, [r3, #20]
                }
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            /* load data from object dictionary, if upload and no error */
            if (upload && (abortCode == CO_SDO_AB_NONE)) {
 8004302:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004304:	2b00      	cmp	r3, #0
 8004306:	d045      	beq.n	8004394 <CO_SDOserver_process+0x224>
 8004308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430a:	2b00      	cmp	r3, #0
 800430c:	d142      	bne.n	8004394 <CO_SDOserver_process+0x224>
                SDO->bufOffsetRd = 0;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->bufOffsetWr = 0;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2200      	movs	r2, #0
 800431a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	66da      	str	r2, [r3, #108]	; 0x6c
                SDO->finished = false;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2200      	movs	r2, #0
 8004328:	675a      	str	r2, [r3, #116]	; 0x74

                if (readFromOd(SDO, &abortCode, 7, false)) {
 800432a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 800432e:	2300      	movs	r3, #0
 8004330:	2207      	movs	r2, #7
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f7ff fe56 	bl	8003fe4 <readFromOd>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d02a      	beq.n	8004394 <CO_SDOserver_process+0x224>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004342:	2b00      	cmp	r3, #0
 8004344:	d01a      	beq.n	800437c <CO_SDOserver_process+0x20c>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6a1a      	ldr	r2, [r3, #32]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	669a      	str	r2, [r3, #104]	; 0x68

                        if (SDO->sizeInd == 0U) {
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004352:	2b00      	cmp	r3, #0
 8004354:	d105      	bne.n	8004362 <CO_SDOserver_process+0x1f2>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	669a      	str	r2, [r3, #104]	; 0x68
 8004360:	e018      	b.n	8004394 <CO_SDOserver_process+0x224>
                        } else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800436c:	429a      	cmp	r2, r3
 800436e:	d011      	beq.n	8004394 <CO_SDOserver_process+0x224>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004370:	4b5a      	ldr	r3, [pc, #360]	; (80044dc <CO_SDOserver_process+0x36c>)
 8004372:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2201      	movs	r2, #1
 8004378:	751a      	strb	r2, [r3, #20]
 800437a:	e00b      	b.n	8004394 <CO_SDOserver_process+0x224>
                        } else { /* MISRA C 2004 14.10 */
                        }
                    } else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004382:	b25b      	sxtb	r3, r3
                                           ? SDO->OD_IO.stream.dataLength
                                           : 0U;
 8004384:	2b00      	cmp	r3, #0
 8004386:	db02      	blt.n	800438e <CO_SDOserver_process+0x21e>
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6a1b      	ldr	r3, [r3, #32]
 800438c:	e000      	b.n	8004390 <CO_SDOserver_process+0x220>
 800438e:	2300      	movs	r3, #0
                        SDO->sizeInd = ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	6693      	str	r3, [r2, #104]	; 0x68
                }
            }
#endif    /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        bool isOKstate = (SDO->state != CO_SDO_ST_IDLE);
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	7d1b      	ldrb	r3, [r3, #20]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	bf14      	ite	ne
 800439e:	2301      	movne	r3, #1
 80043a0:	2300      	moveq	r3, #0
 80043a2:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        isOKstate = (SDO->state != CO_SDO_ST_ABORT) && isOKstate;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	7d1b      	ldrb	r3, [r3, #20]
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d005      	beq.n	80043bc <CO_SDOserver_process+0x24c>
 80043b0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d001      	beq.n	80043bc <CO_SDOserver_process+0x24c>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e000      	b.n	80043be <CO_SDOserver_process+0x24e>
 80043bc:	2300      	movs	r3, #0
 80043be:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 80043c2:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
        if (isOKstate) {
 80043ce:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 81c7 	beq.w	8004766 <CO_SDOserver_process+0x5f6>
            switch (SDO->state) {
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	7d1b      	ldrb	r3, [r3, #20]
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	3b11      	subs	r3, #17
 80043e0:	2b12      	cmp	r3, #18
 80043e2:	f200 81b1 	bhi.w	8004748 <CO_SDOserver_process+0x5d8>
 80043e6:	a201      	add	r2, pc, #4	; (adr r2, 80043ec <CO_SDOserver_process+0x27c>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004439 	.word	0x08004439
 80043f0:	08004749 	.word	0x08004749
 80043f4:	08004601 	.word	0x08004601
 80043f8:	08004749 	.word	0x08004749
 80043fc:	08004749 	.word	0x08004749
 8004400:	08004749 	.word	0x08004749
 8004404:	08004749 	.word	0x08004749
 8004408:	08004749 	.word	0x08004749
 800440c:	08004749 	.word	0x08004749
 8004410:	08004749 	.word	0x08004749
 8004414:	08004749 	.word	0x08004749
 8004418:	08004749 	.word	0x08004749
 800441c:	08004749 	.word	0x08004749
 8004420:	08004749 	.word	0x08004749
 8004424:	08004749 	.word	0x08004749
 8004428:	08004749 	.word	0x08004749
 800442c:	080046f7 	.word	0x080046f7
 8004430:	08004749 	.word	0x08004749
 8004434:	080046ff 	.word	0x080046ff
                case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
                    if ((SDO->CANrxData[0] & 0x02U) != 0U) {
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800443e:	f003 0302 	and.w	r3, r3, #2
 8004442:	2b00      	cmp	r3, #0
 8004444:	f000 80a2 	beq.w	800458c <CO_SDOserver_process+0x41c>
                        /* Expedited transfer, max 4 bytes of data */

                        /* Size of OD variable (>0 if indicated) */
                        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	647b      	str	r3, [r7, #68]	; 0x44

                        /* Get SDO data size (indicated by SDO client or get from OD) */
                        OD_size_t dataSizeToWrite = 4;
 800444e:	2304      	movs	r3, #4
 8004450:	65fb      	str	r3, [r7, #92]	; 0x5c
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00a      	beq.n	8004476 <CO_SDOserver_process+0x306>
                            dataSizeToWrite -= ((OD_size_t)(SDO->CANrxData[0]) >> 2) & 0x03U;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004466:	089b      	lsrs	r3, r3, #2
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004474:	e007      	b.n	8004486 <CO_SDOserver_process+0x316>
                        } else if ((sizeInOd > 0U) && (sizeInOd < 4U)) {
 8004476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004478:	2b00      	cmp	r3, #0
 800447a:	d004      	beq.n	8004486 <CO_SDOserver_process+0x316>
 800447c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800447e:	2b03      	cmp	r3, #3
 8004480:	d801      	bhi.n	8004486 <CO_SDOserver_process+0x316>
                            dataSizeToWrite = sizeInOd;
 8004482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004484:	65fb      	str	r3, [r7, #92]	; 0x5c
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* copy data to the temp buffer, swap data if necessary */
                        uint8_t buf[6] = {0};
 8004486:	2300      	movs	r3, #0
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
 800448a:	2300      	movs	r3, #0
 800448c:	853b      	strh	r3, [r7, #40]	; 0x28
                        (void)memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f103 0144 	add.w	r1, r3, #68	; 0x44
 8004494:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004498:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800449a:	4618      	mov	r0, r3
 800449c:	f00a fcef 	bl	800ee7e <memcpy>
#endif

                        /* If dataType is string, then size of data downloaded may be shorter as size of
                         * the OD data buffer. If so, add two zero bytes to terminate (unicode) string.
                         * Shorten also OD data size, (temporary, send information about EOF into OD_IO.write) */
                        if (((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) != 0U)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044a6:	b25b      	sxtb	r3, r3
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	da21      	bge.n	80044f0 <CO_SDOserver_process+0x380>
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 80044ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d003      	beq.n	80044ba <CO_SDOserver_process+0x34a>
 80044b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d21a      	bcs.n	80044f0 <CO_SDOserver_process+0x380>
                            OD_size_t delta = sizeInOd - dataSizeToWrite;
 80044ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044bc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044be:	1ad3      	subs	r3, r2, r3
 80044c0:	643b      	str	r3, [r7, #64]	; 0x40
                            dataSizeToWrite += (delta == 1U) ? 1U : 2U;
 80044c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d10b      	bne.n	80044e0 <CO_SDOserver_process+0x370>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e00a      	b.n	80044e2 <CO_SDOserver_process+0x372>
 80044cc:	05040001 	.word	0x05040001
 80044d0:	06010000 	.word	0x06010000
 80044d4:	06010001 	.word	0x06010001
 80044d8:	06010002 	.word	0x06010002
 80044dc:	06040047 	.word	0x06040047
 80044e0:	2302      	movs	r3, #2
 80044e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044e4:	4413      	add	r3, r2
 80044e6:	65fb      	str	r3, [r7, #92]	; 0x5c
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044ec:	621a      	str	r2, [r3, #32]
                            && ((sizeInOd == 0U) || (dataSizeToWrite < sizeInOd))) {
 80044ee:	e016      	b.n	800451e <CO_SDOserver_process+0x3ae>
                        } else if (sizeInOd == 0U) {
 80044f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <CO_SDOserver_process+0x38e>
                            SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80044fa:	621a      	str	r2, [r3, #32]
 80044fc:	e00f      	b.n	800451e <CO_SDOserver_process+0x3ae>
                        }
                        /* Verify if size of data downloaded matches data size in OD. */
                        else if (dataSizeToWrite != sizeInOd) {
 80044fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004502:	429a      	cmp	r2, r3
 8004504:	d00b      	beq.n	800451e <CO_SDOserver_process+0x3ae>
                            abortCode = (dataSizeToWrite > sizeInOd) ? CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004506:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800450a:	429a      	cmp	r2, r3
 800450c:	d901      	bls.n	8004512 <CO_SDOserver_process+0x3a2>
 800450e:	4b91      	ldr	r3, [pc, #580]	; (8004754 <CO_SDOserver_process+0x5e4>)
 8004510:	e000      	b.n	8004514 <CO_SDOserver_process+0x3a4>
 8004512:	4b91      	ldr	r3, [pc, #580]	; (8004758 <CO_SDOserver_process+0x5e8>)
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2201      	movs	r2, #1
 800451a:	751a      	strb	r2, [r3, #20]
                            break;
 800451c:	e123      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                        } else { /* MISRA C 2004 14.10 */
                        }

                        /* Copy data */
                        OD_size_t countWritten = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	623b      	str	r3, [r7, #32]

                        CO_LOCK_OD(SDO->CANdevTx);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004526:	f3ef 8210 	mrs	r2, PRIMASK
 800452a:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 800452c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800452e:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004530:	b672      	cpsid	i
}
 8004532:	bf00      	nop
                        ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf, dataSizeToWrite, &countWritten);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f103 0018 	add.w	r0, r3, #24
 800453e:	f107 0320 	add.w	r3, r7, #32
 8004542:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004546:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004548:	47a0      	blx	r4
 800454a:	4603      	mov	r3, r0
 800454c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                        CO_UNLOCK_OD(SDO->CANdevTx);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	bf00      	nop

                        if (odRet != ODR_OK) {
 8004560:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00a      	beq.n	800457e <CO_SDOserver_process+0x40e>
                            abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004568:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800456c:	4618      	mov	r0, r3
 800456e:	f7fe f863 	bl	8002638 <OD_getSDOabCode>
 8004572:	4603      	mov	r3, r0
 8004574:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	751a      	strb	r2, [r3, #20]
                            break;
 800457c:	e0f3      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                        } else {
                            SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2212      	movs	r2, #18
 8004582:	751a      	strb	r2, [r3, #20]
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                            SDO->finished = true;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	675a      	str	r2, [r3, #116]	; 0x74
#else
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                        SDO->state = CO_SDO_ST_ABORT;
#endif
                    }
                    break;
 800458a:	e0ec      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                        if ((SDO->CANrxData[0] & 0x01U) != 0U) {
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d028      	beq.n	80045ec <CO_SDOserver_process+0x47c>
                            OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	64bb      	str	r3, [r7, #72]	; 0x48
                            (void)memcpy((void*)(&size), (const void*)(&SDO->CANrxData[4]), sizeof(size));
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	3344      	adds	r3, #68	; 0x44
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	61fb      	str	r3, [r7, #28]
                            SDO->sizeInd = CO_SWAP_32(size);
 80045a8:	69fa      	ldr	r2, [r7, #28]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	669a      	str	r2, [r3, #104]	; 0x68
                            if (sizeInOd > 0U) {
 80045ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01e      	beq.n	80045f2 <CO_SDOserver_process+0x482>
                                if (SDO->sizeInd > sizeInOd) {
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d205      	bcs.n	80045ca <CO_SDOserver_process+0x45a>
                                    abortCode = CO_SDO_AB_DATA_LONG;
 80045be:	4b65      	ldr	r3, [pc, #404]	; (8004754 <CO_SDOserver_process+0x5e4>)
 80045c0:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2201      	movs	r2, #1
 80045c6:	751a      	strb	r2, [r3, #20]
                                    break;
 80045c8:	e0cd      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                                else if ((SDO->sizeInd < sizeInOd)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d90e      	bls.n	80045f2 <CO_SDOserver_process+0x482>
                                         && ((SDO->OD_IO.stream.attribute & (OD_attr_t)ODA_STR) == 0U)) {
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045da:	b25b      	sxtb	r3, r3
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db08      	blt.n	80045f2 <CO_SDOserver_process+0x482>
                                    abortCode = CO_SDO_AB_DATA_SHORT;
 80045e0:	4b5d      	ldr	r3, [pc, #372]	; (8004758 <CO_SDOserver_process+0x5e8>)
 80045e2:	62fb      	str	r3, [r7, #44]	; 0x2c
                                    SDO->state = CO_SDO_ST_ABORT;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2201      	movs	r2, #1
 80045e8:	751a      	strb	r2, [r3, #20]
                                    break;
 80045ea:	e0bc      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                            SDO->sizeInd = 0;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	669a      	str	r2, [r3, #104]	; 0x68
                        SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2212      	movs	r2, #18
 80045f6:	751a      	strb	r2, [r3, #20]
                        SDO->finished = false;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	675a      	str	r2, [r3, #116]	; 0x74
                    break;
 80045fe:	e0b2      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xE0U) == 0x00U) {
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004606:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d16d      	bne.n	80046ea <CO_SDOserver_process+0x57a>
                        SDO->finished = (SDO->CANrxData[0] & 0x01U) != 0U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf14      	ite	ne
 800461c:	2301      	movne	r3, #1
 800461e:	2300      	moveq	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	675a      	str	r2, [r3, #116]	; 0x74

                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800462e:	f003 0310 	and.w	r3, r3, #16
 8004632:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
                        if (toggle != SDO->toggle) {
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800463c:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 8004640:	429a      	cmp	r2, r3
 8004642:	d005      	beq.n	8004650 <CO_SDOserver_process+0x4e0>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004644:	4b45      	ldr	r3, [pc, #276]	; (800475c <CO_SDOserver_process+0x5ec>)
 8004646:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2201      	movs	r2, #1
 800464c:	751a      	strb	r2, [r3, #20]
                            break;
 800464e:	e08a      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                        }

                        /* get data size and write data to the buffer */
                        OD_size_t count = (OD_size_t)(7U - (((OD_size_t)(SDO->CANrxData[0]) >> 1) & 0x07U));
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004656:	085b      	lsrs	r3, r3, #1
 8004658:	b2db      	uxtb	r3, r3
 800465a:	43db      	mvns	r3, r3
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	64fb      	str	r3, [r7, #76]	; 0x4c
                        (void)memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800466e:	18d0      	adds	r0, r2, r3
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	3341      	adds	r3, #65	; 0x41
 8004674:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004676:	4619      	mov	r1, r3
 8004678:	f00a fc01 	bl	800ee7e <memcpy>
                        SDO->bufOffsetWr += count;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004684:	441a      	add	r2, r3
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                        SDO->sizeTran += count;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004690:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004692:	441a      	add	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	66da      	str	r2, [r3, #108]	; 0x6c

                        /* if data size exceeds variable size, abort */
                        if ((SDO->OD_IO.stream.dataLength > 0U) && (SDO->sizeTran > SDO->OD_IO.stream.dataLength)) {
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6a1b      	ldr	r3, [r3, #32]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d00b      	beq.n	80046b8 <CO_SDOserver_process+0x548>
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d905      	bls.n	80046b8 <CO_SDOserver_process+0x548>
                            abortCode = CO_SDO_AB_DATA_LONG;
 80046ac:	4b29      	ldr	r3, [pc, #164]	; (8004754 <CO_SDOserver_process+0x5e4>)
 80046ae:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2201      	movs	r2, #1
 80046b4:	751a      	strb	r2, [r3, #20]
                            break;
 80046b6:	e056      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                        }

                        /* if necessary, empty the buffer */
                        if (SDO->finished || ((CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr) < (7U + 2U))) {
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d106      	bne.n	80046ce <CO_SDOserver_process+0x55e>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80046c6:	f1c3 0320 	rsb	r3, r3, #32
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d809      	bhi.n	80046e2 <CO_SDOserver_process+0x572>
                            if (!validateAndWriteToOD(SDO, &abortCode, 0, 0)) {
 80046ce:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80046d2:	2300      	movs	r3, #0
 80046d4:	2200      	movs	r2, #0
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff fb74 	bl	8003dc4 <validateAndWriteToOD>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d040      	beq.n	8004764 <CO_SDOserver_process+0x5f4>
                                break;
                            }
                        }

                        SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2214      	movs	r2, #20
 80046e6:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 80046e8:	e03d      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 80046ea:	4b1d      	ldr	r3, [pc, #116]	; (8004760 <CO_SDOserver_process+0x5f0>)
 80046ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2201      	movs	r2, #1
 80046f2:	751a      	strb	r2, [r3, #20]
                    break;
 80046f4:	e037      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
                    SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2222      	movs	r2, #34	; 0x22
 80046fa:	751a      	strb	r2, [r3, #20]
                    break;
 80046fc:	e033      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
                    if ((SDO->CANrxData[0] & 0xEFU) == 0x60U) {
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004704:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004708:	2b60      	cmp	r3, #96	; 0x60
 800470a:	d117      	bne.n	800473c <CO_SDOserver_process+0x5cc>
                        /* verify and alternate toggle bit */
                        uint8_t toggle = SDO->CANrxData[0] & 0x10U;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                        if (toggle != SDO->toggle) {
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004720:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8004724:	429a      	cmp	r2, r3
 8004726:	d005      	beq.n	8004734 <CO_SDOserver_process+0x5c4>
                            abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004728:	4b0c      	ldr	r3, [pc, #48]	; (800475c <CO_SDOserver_process+0x5ec>)
 800472a:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	751a      	strb	r2, [r3, #20]
                            break;
 8004732:	e018      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                        }
                        SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2224      	movs	r2, #36	; 0x24
 8004738:	751a      	strb	r2, [r3, #20]
                    } else {
                        abortCode = CO_SDO_AB_CMD;
                        SDO->state = CO_SDO_ST_ABORT;
                    }
                    break;
 800473a:	e014      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                        abortCode = CO_SDO_AB_CMD;
 800473c:	4b08      	ldr	r3, [pc, #32]	; (8004760 <CO_SDOserver_process+0x5f0>)
 800473e:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	751a      	strb	r2, [r3, #20]
                    break;
 8004746:	e00e      	b.n	8004766 <CO_SDOserver_process+0x5f6>
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ:
                case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */
                default: {
                    /* unknown message received */
                    abortCode = CO_SDO_AB_CMD;
 8004748:	4b05      	ldr	r3, [pc, #20]	; (8004760 <CO_SDOserver_process+0x5f0>)
 800474a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2201      	movs	r2, #1
 8004750:	751a      	strb	r2, [r3, #20]
                    break;
 8004752:	e008      	b.n	8004766 <CO_SDOserver_process+0x5f6>
 8004754:	06070012 	.word	0x06070012
 8004758:	06070013 	.word	0x06070013
 800475c:	05030000 	.word	0x05030000
 8004760:	05040001 	.word	0x05040001
                                break;
 8004764:	bf00      	nop
                }
            } /* switch (SDO->state) */
        }     /* if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT) */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
        SDO->timeoutTimer = 0;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
        timeDifference_us = 0;
 800476c:	2300      	movs	r3, #0
 800476e:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	63da      	str	r2, [r3, #60]	; 0x3c
    else { /* MISRA C 2004 14.10 */
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
    if (ret == CO_SDO_RT_waitingResponse) {
 8004776:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800477a:	2b01      	cmp	r3, #1
 800477c:	d11e      	bne.n	80047bc <CO_SDOserver_process+0x64c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004786:	429a      	cmp	r2, r3
 8004788:	d205      	bcs.n	8004796 <CO_SDOserver_process+0x626>
            SDO->timeoutTimer += timeDifference_us;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	441a      	add	r2, r3
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	67da      	str	r2, [r3, #124]	; 0x7c
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800479e:	429a      	cmp	r2, r3
 80047a0:	d304      	bcc.n	80047ac <CO_SDOserver_process+0x63c>
            abortCode = CO_SDO_AB_TIMEOUT;
 80047a2:	4b9c      	ldr	r3, [pc, #624]	; (8004a14 <CO_SDOserver_process+0x8a4>)
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d002      	beq.n	80047bc <CO_SDOserver_process+0x64c>
            ret = CO_SDO_RT_transmittBufferFull;
 80047b6:	2304      	movs	r3, #4
 80047b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80047bc:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	f040 81ab 	bne.w	8004b1c <CO_SDOserver_process+0x9ac>
        /* clear response buffer */
        (void)memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	3305      	adds	r3, #5
 80047cc:	2208      	movs	r2, #8
 80047ce:	2100      	movs	r1, #0
 80047d0:	4618      	mov	r0, r3
 80047d2:	f00a fac9 	bl	800ed68 <memset>

        switch (SDO->state) {
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	7d1b      	ldrb	r3, [r3, #20]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	3b12      	subs	r3, #18
 80047de:	2b12      	cmp	r3, #18
 80047e0:	f200 8199 	bhi.w	8004b16 <CO_SDOserver_process+0x9a6>
 80047e4:	a201      	add	r2, pc, #4	; (adr r2, 80047ec <CO_SDOserver_process+0x67c>)
 80047e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ea:	bf00      	nop
 80047ec:	08004839 	.word	0x08004839
 80047f0:	08004b17 	.word	0x08004b17
 80047f4:	080048bb 	.word	0x080048bb
 80047f8:	08004b17 	.word	0x08004b17
 80047fc:	08004b17 	.word	0x08004b17
 8004800:	08004b17 	.word	0x08004b17
 8004804:	08004b17 	.word	0x08004b17
 8004808:	08004b17 	.word	0x08004b17
 800480c:	08004b17 	.word	0x08004b17
 8004810:	08004b17 	.word	0x08004b17
 8004814:	08004b17 	.word	0x08004b17
 8004818:	08004b17 	.word	0x08004b17
 800481c:	08004b17 	.word	0x08004b17
 8004820:	08004b17 	.word	0x08004b17
 8004824:	08004b17 	.word	0x08004b17
 8004828:	08004b17 	.word	0x08004b17
 800482c:	08004917 	.word	0x08004917
 8004830:	08004b17 	.word	0x08004b17
 8004834:	080049e5 	.word	0x080049e5
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                SDO->CANtxBuff->data[0] = 0x60;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	2260      	movs	r2, #96	; 0x60
 800483e:	715a      	strb	r2, [r3, #5]
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	b2d2      	uxtb	r2, r2
 800484a:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004850:	0a1b      	lsrs	r3, r3, #8
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	b2d2      	uxtb	r2, r2
 800485a:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8004866:	721a      	strb	r2, [r3, #8]

                /* reset timeout timer and send message */
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                SDO->timeoutTimer = 0;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	2200      	movs	r2, #0
 800486c:	67da      	str	r2, [r3, #124]	; 0x7c
#endif
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f002 fe5d 	bl	8007538 <CO_CANsend>
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                if (SDO->finished) {
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004882:	2b00      	cmp	r3, #0
 8004884:	d006      	beq.n	8004894 <CO_SDOserver_process+0x724>
                    SDO->state = CO_SDO_ST_IDLE;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2200      	movs	r2, #0
 800488a:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                }
#else
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif
                break;
 8004892:	e143      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
                    SDO->toggle = 0x00;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->sizeTran = 0;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	66da      	str	r2, [r3, #108]	; 0x6c
                    SDO->bufOffsetWr = 0;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                    SDO->bufOffsetRd = 0;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2200      	movs	r2, #0
 80048ae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2213      	movs	r2, #19
 80048b6:	751a      	strb	r2, [r3, #20]
                break;
 80048b8:	e130      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
                SDO->CANtxBuff->data[0] = 0x20U | SDO->toggle;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 2070 	ldrb.w	r2, [r3, #112]	; 0x70
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f042 0220 	orr.w	r2, r2, #32
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <CO_SDOserver_process+0x76a>
 80048d6:	2210      	movs	r2, #16
 80048d8:	e000      	b.n	80048dc <CO_SDOserver_process+0x76c>
 80048da:	2200      	movs	r2, #0
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                /* reset timeout timer and send message */
                SDO->timeoutTimer = 0;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2200      	movs	r2, #0
 80048e6:	67da      	str	r2, [r3, #124]	; 0x7c
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	4619      	mov	r1, r3
 80048f2:	4610      	mov	r0, r2
 80048f4:	f002 fe20 	bl	8007538 <CO_CANsend>
                if (SDO->finished) {
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d006      	beq.n	800490e <CO_SDOserver_process+0x79e>
                    SDO->state = CO_SDO_ST_IDLE;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2200      	movs	r2, #0
 8004904:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004906:	2300      	movs	r3, #0
 8004908:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                } else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                }
                break;
 800490c:	e106      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
                    SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2213      	movs	r2, #19
 8004912:	751a      	strb	r2, [r3, #20]
                break;
 8004914:	e102      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
#endif

            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
                /* data were already loaded from OD variable */
                if ((SDO->sizeInd > 0U) && (SDO->sizeInd <= 4U)) {
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800491a:	2b00      	cmp	r3, #0
 800491c:	d024      	beq.n	8004968 <CO_SDOserver_process+0x7f8>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004922:	2b04      	cmp	r3, #4
 8004924:	d820      	bhi.n	8004968 <CO_SDOserver_process+0x7f8>
                    /* expedited transfer */
                    SDO->CANtxBuff->data[0] = (uint8_t)(0x43U | ((4U - SDO->sizeInd) << 2U));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800492a:	b2db      	uxtb	r3, r3
 800492c:	f1c3 0304 	rsb	r3, r3, #4
 8004930:	b2db      	uxtb	r3, r3
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	715a      	strb	r2, [r3, #5]
                    (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&SDO->buf[0]), SDO->sizeInd);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f103 0009 	add.w	r0, r3, #9
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004954:	461a      	mov	r2, r3
 8004956:	f00a fa92 	bl	800ee7e <memcpy>
                    SDO->state = CO_SDO_ST_IDLE;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2200      	movs	r2, #0
 800495e:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004960:	2300      	movs	r3, #0
 8004962:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004966:	e020      	b.n	80049aa <CO_SDOserver_process+0x83a>
                } else {
                    /* data will be transferred with segmented transfer */
                    if (SDO->sizeInd > 0U) {
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00e      	beq.n	800498e <CO_SDOserver_process+0x81e>
                        /* indicate data size, if known */
                        uint32_t sizeInd = SDO->sizeInd;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004974:	63bb      	str	r3, [r7, #56]	; 0x38
                        uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 8004976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004978:	61bb      	str	r3, [r7, #24]
                        SDO->CANtxBuff->data[0] = 0x41;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2241      	movs	r2, #65	; 0x41
 8004980:	715a      	strb	r2, [r3, #5]
                        (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&sizeIndSw), sizeof(sizeIndSw));
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	3309      	adds	r3, #9
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e003      	b.n	8004996 <CO_SDOserver_process+0x826>
                    } else {
                        SDO->CANtxBuff->data[0] = 0x40;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	2240      	movs	r2, #64	; 0x40
 8004994:	715a      	strb	r2, [r3, #5]
                    }
                    SDO->toggle = 0x00;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    SDO->timeoutTimer = 0;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2223      	movs	r2, #35	; 0x23
 80049a8:	751a      	strb	r2, [r3, #20]
                SDO->state = CO_SDO_ST_IDLE;
                ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

                /* send message */
                SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	b2d2      	uxtb	r2, r2
 80049b4:	719a      	strb	r2, [r3, #6]
                SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80049ba:	0a1b      	lsrs	r3, r3, #8
 80049bc:	b29a      	uxth	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	b2d2      	uxtb	r2, r2
 80049c4:	71da      	strb	r2, [r3, #7]
                SDO->CANtxBuff->data[3] = SDO->subIndex;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	68fa      	ldr	r2, [r7, #12]
 80049cc:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 80049d0:	721a      	strb	r2, [r3, #8]
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	4619      	mov	r1, r3
 80049dc:	4610      	mov	r0, r2
 80049de:	f002 fdab 	bl	8007538 <CO_CANsend>
                break;
 80049e2:	e09b      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
            }

#if ((CO_CONFIG_SDO_SRV)&CO_CONFIG_SDO_SRV_SEGMENTED) != 0
            case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
                /* refill the data buffer if necessary */
                if (!readFromOd(SDO, &abortCode, 7, false)) {
 80049e4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80049e8:	2300      	movs	r3, #0
 80049ea:	2207      	movs	r2, #7
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f7ff faf9 	bl	8003fe4 <readFromOd>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f000 8090 	beq.w	8004b1a <CO_SDOserver_process+0x9aa>
                    break;
                }

                /* SDO command specifier with toggle bit */
                SDO->CANtxBuff->data[0] = SDO->toggle;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	f892 2070 	ldrb.w	r2, [r2, #112]	; 0x70
 8004a04:	715a      	strb	r2, [r3, #5]
                SDO->toggle = (SDO->toggle == 0x00U) ? 0x10U : 0x00U;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d103      	bne.n	8004a18 <CO_SDOserver_process+0x8a8>
 8004a10:	2210      	movs	r2, #16
 8004a12:	e002      	b.n	8004a1a <CO_SDOserver_process+0x8aa>
 8004a14:	05040000 	.word	0x05040000
 8004a18:	2200      	movs	r2, #0
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

                OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	65bb      	str	r3, [r7, #88]	; 0x58
                /* verify, if this is the last segment */
                if ((count < 7U) || (SDO->finished && (count == 7U))) {
 8004a30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a32:	2b06      	cmp	r3, #6
 8004a34:	d906      	bls.n	8004a44 <CO_SDOserver_process+0x8d4>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d01b      	beq.n	8004a76 <CO_SDOserver_process+0x906>
 8004a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a40:	2b07      	cmp	r3, #7
 8004a42:	d118      	bne.n	8004a76 <CO_SDOserver_process+0x906>
                    /* indicate last segment and nnn */
                    SDO->CANtxBuff->data[0] |= (uint8_t)(((7U - count) << 1U) | 0x01U);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	795a      	ldrb	r2, [r3, #5]
 8004a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	f1c3 0307 	rsb	r3, r3, #7
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	b2da      	uxtb	r2, r3
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f042 0201 	orr.w	r2, r2, #1
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	715a      	strb	r2, [r3, #5]
                    SDO->state = CO_SDO_ST_IDLE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	751a      	strb	r2, [r3, #20]
                    ret = CO_SDO_RT_ok_communicationEnd;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004a74:	e007      	b.n	8004a86 <CO_SDOserver_process+0x916>
                } else {
                    SDO->timeoutTimer = 0;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	67da      	str	r2, [r3, #124]	; 0x7c
                    SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2223      	movs	r2, #35	; 0x23
 8004a80:	751a      	strb	r2, [r3, #20]
                    count = 7;
 8004a82:	2307      	movs	r3, #7
 8004a84:	65bb      	str	r3, [r7, #88]	; 0x58
                }

                /* copy data segment to CAN message */
                (void)memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd, count);
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	1d98      	adds	r0, r3, #6
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004a98:	4413      	add	r3, r2
 8004a9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	f00a f9ee 	bl	800ee7e <memcpy>
                SDO->bufOffsetRd += count;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8004aa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004aaa:	441a      	add	r2, r3
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
                SDO->sizeTran += count;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004ab6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004ab8:	441a      	add	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	66da      	str	r2, [r3, #108]	; 0x6c

                /* verify if sizeTran is too large or too short if last segment */
                if (SDO->sizeInd > 0U) {
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d01e      	beq.n	8004b04 <CO_SDOserver_process+0x994>
                    if (SDO->sizeTran > SDO->sizeInd) {
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d905      	bls.n	8004ade <CO_SDOserver_process+0x96e>
                        abortCode = CO_SDO_AB_DATA_LONG;
 8004ad2:	4b30      	ldr	r3, [pc, #192]	; (8004b94 <CO_SDOserver_process+0xa24>)
 8004ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	751a      	strb	r2, [r3, #20]
                        break;
 8004adc:	e01e      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
                    } else if ((ret == CO_SDO_RT_ok_communicationEnd) && (SDO->sizeTran < SDO->sizeInd)) {
 8004ade:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10e      	bne.n	8004b04 <CO_SDOserver_process+0x994>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aee:	429a      	cmp	r2, r3
 8004af0:	d208      	bcs.n	8004b04 <CO_SDOserver_process+0x994>
                        abortCode = CO_SDO_AB_DATA_SHORT;
 8004af2:	4b29      	ldr	r3, [pc, #164]	; (8004b98 <CO_SDOserver_process+0xa28>)
 8004af4:	62fb      	str	r3, [r7, #44]	; 0x2c
                        ret = CO_SDO_RT_waitingResponse;
 8004af6:	2301      	movs	r3, #1
 8004af8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                        SDO->state = CO_SDO_ST_ABORT;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2201      	movs	r2, #1
 8004b00:	751a      	strb	r2, [r3, #20]
                        break;
 8004b02:	e00b      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
                    } else { /* MISRA C 2004 14.10 */
                    }
                }

                /* send message */
                (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f002 fd12 	bl	8007538 <CO_CANsend>
                break;
 8004b14:	e002      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
            case CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ2:
            case CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP:
            case CO_SDO_ST_UPLOAD_BLK_END_CRSP:
            default: {
                /* none */
                break;
 8004b16:	bf00      	nop
 8004b18:	e000      	b.n	8004b1c <CO_SDOserver_process+0x9ac>
                    break;
 8004b1a:	bf00      	nop
            }
        } /* switch (SDO->state) */
    }

    if (ret == CO_SDO_RT_waitingResponse) {
 8004b1c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d131      	bne.n	8004b88 <CO_SDOserver_process+0xa18>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	7d1b      	ldrb	r3, [r3, #20]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d12c      	bne.n	8004b88 <CO_SDOserver_process+0xa18>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8004b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b30:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	2280      	movs	r2, #128	; 0x80
 8004b38:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	b2d2      	uxtb	r2, r2
 8004b44:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004b4a:	0a1b      	lsrs	r3, r3, #8
 8004b4c:	b29a      	uxth	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	b2d2      	uxtb	r2, r2
 8004b54:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 8004b60:	721a      	strb	r2, [r3, #8]

            (void)memcpy((void*)(&SDO->CANtxBuff->data[4]), (const void*)(&code), sizeof(code));
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	3309      	adds	r3, #9
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	601a      	str	r2, [r3, #0]
            (void)CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	4619      	mov	r1, r3
 8004b76:	4610      	mov	r0, r2
 8004b78:	f002 fcde 	bl	8007538 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2200      	movs	r2, #0
 8004b80:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 8004b82:	23f6      	movs	r3, #246	; 0xf6
 8004b84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 8004b88:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	376c      	adds	r7, #108	; 0x6c
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd90      	pop	{r4, r7, pc}
 8004b94:	06070012 	.word	0x06070012
 8004b98:	06070013 	.word	0x06070013

08004b9c <CO_getUint8>:
CO_getUint8(const void* buf) {
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004ba8:	73fb      	strb	r3, [r7, #15]
    return value;
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3714      	adds	r7, #20
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr

08004bb8 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8004bc4:	60fb      	str	r3, [r7, #12]
    return value;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d002      	beq.n	8004be8 <OD_getIndex+0x14>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	881b      	ldrh	r3, [r3, #0]
 8004be6:	e000      	b.n	8004bea <OD_getIndex+0x16>
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	370c      	adds	r7, #12
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf4:	4770      	bx	lr

08004bf6 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 8004bf6:	b480      	push	{r7}
 8004bf8:	b083      	sub	sp, #12
 8004bfa:	af00      	add	r7, sp, #0
 8004bfc:	6078      	str	r0, [r7, #4]
 8004bfe:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 8004c06:	2305      	movs	r3, #5
 8004c08:	e003      	b.n	8004c12 <OD_extension_init+0x1c>
    entry->extension = extension;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	370c      	adds	r7, #12
 8004c16:	46bd      	mov	sp, r7
 8004c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1c:	4770      	bx	lr

08004c1e <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8004c1e:	b580      	push	{r7, lr}
 8004c20:	b086      	sub	sp, #24
 8004c22:	af02      	add	r7, sp, #8
 8004c24:	60f8      	str	r0, [r7, #12]
 8004c26:	607a      	str	r2, [r7, #4]
 8004c28:	603b      	str	r3, [r7, #0]
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004c2e:	7af9      	ldrb	r1, [r7, #11]
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	9300      	str	r3, [sp, #0]
 8004c34:	2301      	movs	r3, #1
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f7fd fd1b 	bl	8002674 <OD_get_value>
 8004c3e:	4603      	mov	r3, r0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	460b      	mov	r3, r1
 8004c56:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004c58:	7af9      	ldrb	r1, [r7, #11]
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2304      	movs	r3, #4
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	68f8      	ldr	r0, [r7, #12]
 8004c64:	f7fd fd06 	bl	8002674 <OD_get_value>
 8004c68:	4603      	mov	r3, r0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <CO_SYNCsend>:
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t
CO_SYNCsend(CO_SYNC_t* SYNC) {
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b082      	sub	sp, #8
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) {
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	7c9b      	ldrb	r3, [r3, #18]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	b2da      	uxtb	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	749a      	strb	r2, [r3, #18]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	7c9a      	ldrb	r2, [r3, #18]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	7c5b      	ldrb	r3, [r3, #17]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d902      	bls.n	8004c98 <CO_SYNCsend+0x26>
        SYNC->counter = 1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	749a      	strb	r2, [r3, #18]
    }
    SYNC->timer = 0;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	bf0c      	ite	eq
 8004ca6:	2301      	moveq	r3, #1
 8004ca8:	2300      	movne	r3, #0
 8004caa:	b2db      	uxtb	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	7c92      	ldrb	r2, [r2, #18]
 8004cba:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	4610      	mov	r0, r2
 8004cc8:	f002 fc36 	bl	8007538 <CO_CANsend>
 8004ccc:	4603      	mov	r3, r0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3708      	adds	r7, #8
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_SYNC_receive(void* object, void* msg) {
 8004cd6:	b480      	push	{r7}
 8004cd8:	b087      	sub	sp, #28
 8004cda:	af00      	add	r7, sp, #0
 8004cdc:	6078      	str	r0, [r7, #4]
 8004cde:	6039      	str	r1, [r7, #0]
    CO_SYNC_t* SYNC = object;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	791b      	ldrb	r3, [r3, #4]
 8004ce8:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0U) {
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	7c5b      	ldrb	r3, [r3, #17]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d10c      	bne.n	8004d10 <CO_SYNC_receive+0x3a>
        if (DLC == 0U) {
 8004cf6:	7bfb      	ldrb	r3, [r7, #15]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d102      	bne.n	8004d02 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	617b      	str	r3, [r7, #20]
 8004d00:	e019      	b.n	8004d36 <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x40U;
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	721a      	strb	r2, [r3, #8]
 8004d0e:	e012      	b.n	8004d36 <CO_SYNC_receive+0x60>
        }
    } else {
        if (DLC == 1U) {
 8004d10:	7bfb      	ldrb	r3, [r7, #15]
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d109      	bne.n	8004d2a <CO_SYNC_receive+0x54>
            const uint8_t* data = CO_CANrxMsg_readData(msg);
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	3305      	adds	r3, #5
 8004d1a:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	781a      	ldrb	r2, [r3, #0]
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8004d24:	2301      	movs	r3, #1
 8004d26:	617b      	str	r3, [r7, #20]
 8004d28:	e005      	b.n	8004d36 <CO_SYNC_receive+0x60>
        } else {
            SYNC->receiveError = DLC | 0x80U;
 8004d2a:	7bfb      	ldrb	r3, [r7, #15]
 8004d2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004d30:	b2da      	uxtb	r2, r3
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8004d36:	697b      	ldr	r3, [r7, #20]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d00c      	beq.n	8004d56 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	bf0c      	ite	eq
 8004d44:	2301      	moveq	r3, #1
 8004d46:	2300      	movne	r3, #0
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	2201      	movs	r2, #1
 8004d54:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8004d56:	bf00      	nop
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
	...

08004d64 <OD_write_1005>:
 * Custom function for writing OD object "COB-ID sync message"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1005(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004d64:	b590      	push	{r4, r7, lr}
 8004d66:	b08f      	sub	sp, #60	; 0x3c
 8004d68:	af04      	add	r7, sp, #16
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00c      	beq.n	8004d92 <OD_write_1005+0x2e>
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	7d1b      	ldrb	r3, [r3, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d108      	bne.n	8004d92 <OD_write_1005+0x2e>
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <OD_write_1005+0x2e>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	d102      	bne.n	8004d92 <OD_write_1005+0x2e>
        || (countWritten == NULL)) {
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <OD_write_1005+0x32>
        return ODR_DEV_INCOMPAT;
 8004d92:	2309      	movs	r3, #9
 8004d94:	e0a2      	b.n	8004edc <OD_write_1005+0x178>
    }

    CO_SYNC_t* SYNC = stream->object;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 8004d9c:	68b8      	ldr	r0, [r7, #8]
 8004d9e:	f7ff ff0b 	bl	8004bb8 <CO_getUint32>
 8004da2:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8004da4:	6a3b      	ldr	r3, [r7, #32]
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004dac:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    bool_t isProducer = (cobIdSync & 0x40000000U) != 0U;
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	bf14      	ite	ne
 8004db8:	2301      	movne	r3, #1
 8004dba:	2300      	moveq	r3, #0
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	61bb      	str	r3, [r7, #24]
    if (((cobIdSync & 0xBFFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 8004dc0:	6a3a      	ldr	r2, [r7, #32]
 8004dc2:	4b48      	ldr	r3, [pc, #288]	; (8004ee4 <OD_write_1005+0x180>)
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d133      	bne.n	8004e32 <OD_write_1005+0xce>
 8004dca:	8bfb      	ldrh	r3, [r7, #30]
 8004dcc:	2b7f      	cmp	r3, #127	; 0x7f
 8004dce:	d930      	bls.n	8004e32 <OD_write_1005+0xce>
 8004dd0:	8bfb      	ldrh	r3, [r7, #30]
 8004dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004dd6:	d903      	bls.n	8004de0 <OD_write_1005+0x7c>
 8004dd8:	8bfb      	ldrh	r3, [r7, #30]
 8004dda:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004dde:	d928      	bls.n	8004e32 <OD_write_1005+0xce>
 8004de0:	8bfb      	ldrh	r3, [r7, #30]
 8004de2:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8004de6:	d903      	bls.n	8004df0 <OD_write_1005+0x8c>
 8004de8:	8bfb      	ldrh	r3, [r7, #30]
 8004dea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004dee:	d320      	bcc.n	8004e32 <OD_write_1005+0xce>
 8004df0:	8bfb      	ldrh	r3, [r7, #30]
 8004df2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004df6:	d903      	bls.n	8004e00 <OD_write_1005+0x9c>
 8004df8:	8bfb      	ldrh	r3, [r7, #30]
 8004dfa:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004dfe:	d318      	bcc.n	8004e32 <OD_write_1005+0xce>
 8004e00:	8bfb      	ldrh	r3, [r7, #30]
 8004e02:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8004e06:	d303      	bcc.n	8004e10 <OD_write_1005+0xac>
 8004e08:	8bfb      	ldrh	r3, [r7, #30]
 8004e0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e0e:	d310      	bcc.n	8004e32 <OD_write_1005+0xce>
 8004e10:	8bfb      	ldrh	r3, [r7, #30]
 8004e12:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004e16:	d80c      	bhi.n	8004e32 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && (CAN_ID != SYNC->CAN_ID))) {
 8004e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d00a      	beq.n	8004e36 <OD_write_1005+0xd2>
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <OD_write_1005+0xd2>
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004e2c:	8bfa      	ldrh	r2, [r7, #30]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d001      	beq.n	8004e36 <OD_write_1005+0xd2>
        return ODR_INVALID_VALUE;
 8004e32:	230f      	movs	r3, #15
 8004e34:	e052      	b.n	8004edc <OD_write_1005+0x178>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8004e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8004e3c:	8bfa      	ldrh	r2, [r7, #30]
 8004e3e:	429a      	cmp	r2, r3
 8004e40:	d039      	beq.n	8004eb6 <OD_write_1005+0x152>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(SYNC->CANdevRx, SYNC->CANdevRxIdx, CAN_ID, 0x7FF, false,
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e48:	8e99      	ldrh	r1, [r3, #52]	; 0x34
 8004e4a:	8bfa      	ldrh	r2, [r7, #30]
 8004e4c:	4b26      	ldr	r3, [pc, #152]	; (8004ee8 <OD_write_1005+0x184>)
 8004e4e:	9302      	str	r3, [sp, #8]
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	9301      	str	r3, [sp, #4]
 8004e54:	2300      	movs	r3, #0
 8004e56:	9300      	str	r3, [sp, #0]
 8004e58:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004e5c:	f002 fa94 	bl	8007388 <CO_CANrxBufferInit>
 8004e60:	4603      	mov	r3, r0
 8004e62:	75fb      	strb	r3, [r7, #23]
                                                     (void*)SYNC, CO_SYNC_receive);

        if (CANret != CO_ERROR_NO) {
 8004e64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d001      	beq.n	8004e70 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 8004e6c:	2309      	movs	r3, #9
 8004e6e:	e035      	b.n	8004edc <OD_write_1005+0x178>
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e72:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
                                             (SYNC->counterOverflowValue != 0U) ? 1U : 0U, false);
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e7c:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, CAN_ID, false,
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d001      	beq.n	8004e86 <OD_write_1005+0x122>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <OD_write_1005+0x124>
 8004e86:	2300      	movs	r3, #0
 8004e88:	8bfa      	ldrh	r2, [r7, #30]
 8004e8a:	2400      	movs	r4, #0
 8004e8c:	9401      	str	r4, [sp, #4]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	2300      	movs	r3, #0
 8004e92:	f002 fad7 	bl	8007444 <CO_CANtxBufferInit>
 8004e96:	4602      	mov	r2, r0
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	62da      	str	r2, [r3, #44]	; 0x2c

        if (SYNC->CANtxBuff == NULL) {
 8004e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <OD_write_1005+0x14a>
            SYNC->isProducer = false;
 8004ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 8004eaa:	2309      	movs	r3, #9
 8004eac:	e016      	b.n	8004edc <OD_write_1005+0x178>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	8bfa      	ldrh	r2, [r7, #30]
 8004eb2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = isProducer;
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	69ba      	ldr	r2, [r7, #24]
 8004eba:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <OD_write_1005+0x16a>
        SYNC->counter = 0;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eca:	2200      	movs	r2, #0
 8004ecc:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	68b9      	ldr	r1, [r7, #8]
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	f7fd f9d2 	bl	800227e <OD_writeOriginal>
 8004eda:	4603      	mov	r3, r0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	372c      	adds	r7, #44	; 0x2c
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd90      	pop	{r4, r7, pc}
 8004ee4:	bffff800 	.word	0xbffff800
 8004ee8:	08004cd7 	.word	0x08004cd7

08004eec <OD_write_1019>:
 * Custom function for writing OD object "Synchronous counter overflow value"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1019(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8004eec:	b590      	push	{r4, r7, lr}
 8004eee:	b089      	sub	sp, #36	; 0x24
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint8_t))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d00c      	beq.n	8004f1a <OD_write_1019+0x2e>
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	7d1b      	ldrb	r3, [r3, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d108      	bne.n	8004f1a <OD_write_1019+0x2e>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <OD_write_1019+0x2e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d102      	bne.n	8004f1a <OD_write_1019+0x2e>
        || (countWritten == NULL)) {
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d101      	bne.n	8004f1e <OD_write_1019+0x32>
        return ODR_DEV_INCOMPAT;
 8004f1a:	2309      	movs	r3, #9
 8004f1c:	e040      	b.n	8004fa0 <OD_write_1019+0xb4>
    }

    CO_SYNC_t* SYNC = stream->object;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8004f24:	68b8      	ldr	r0, [r7, #8]
 8004f26:	f7ff fe39 	bl	8004b9c <CO_getUint8>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if ((syncCounterOvf == 1U) || (syncCounterOvf > 240U)) {
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d002      	beq.n	8004f3a <OD_write_1019+0x4e>
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	2bf0      	cmp	r3, #240	; 0xf0
 8004f38:	d901      	bls.n	8004f3e <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 8004f3a:	230f      	movs	r3, #15
 8004f3c:	e030      	b.n	8004fa0 <OD_write_1019+0xb4>
    }
    if (*SYNC->OD_1006_period != 0U) {
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	69db      	ldr	r3, [r3, #28]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d001      	beq.n	8004f4c <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 8004f48:	2317      	movs	r3, #23
 8004f4a:	e029      	b.n	8004fa0 <OD_write_1019+0xb4>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(SYNC->CANdevTx, SYNC->CANdevTxIdx, SYNC->CAN_ID, false,
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8004f5c:	7cfb      	ldrb	r3, [r7, #19]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d001      	beq.n	8004f66 <OD_write_1019+0x7a>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <OD_write_1019+0x7c>
 8004f66:	2300      	movs	r3, #0
 8004f68:	2400      	movs	r4, #0
 8004f6a:	9401      	str	r4, [sp, #4]
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f002 fa68 	bl	8007444 <CO_CANtxBufferInit>
 8004f74:	4602      	mov	r2, r0
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	62da      	str	r2, [r3, #44]	; 0x2c
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);

    if (SYNC->CANtxBuff == NULL) {
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d104      	bne.n	8004f8c <OD_write_1019+0xa0>
        SYNC->isProducer = false;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2200      	movs	r2, #0
 8004f86:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 8004f88:	2309      	movs	r3, #9
 8004f8a:	e009      	b.n	8004fa0 <OD_write_1019+0xb4>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	7cfa      	ldrb	r2, [r7, #19]
 8004f90:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	68b9      	ldr	r1, [r7, #8]
 8004f98:	68f8      	ldr	r0, [r7, #12]
 8004f9a:	f7fd f970 	bl	800227e <OD_writeOriginal>
 8004f9e:	4603      	mov	r3, r0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd90      	pop	{r4, r7, pc}

08004fa8 <CO_SYNC_init>:
             OD_entry_t* OD_1007_syncWindowLen, OD_entry_t* OD_1019_syncCounterOvf, CO_CANmodule_t* CANdevRx,
             uint16_t CANdevRxIdx,
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08c      	sub	sp, #48	; 0x30
 8004fac:	af04      	add	r7, sp, #16
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if ((SYNC == NULL) || (em == NULL) || (OD_1005_cobIdSync == NULL)
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <CO_SYNC_init+0x32>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00b      	beq.n	8004fda <CO_SYNC_init+0x32>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d008      	beq.n	8004fda <CO_SYNC_init+0x32>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        || (OD_1006_commCyclePeriod == NULL) || (CANdevTx == NULL)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d005      	beq.n	8004fda <CO_SYNC_init+0x32>
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <CO_SYNC_init+0x32>
#endif
        || (CANdevRx == NULL)) {
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d102      	bne.n	8004fe0 <CO_SYNC_init+0x38>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8004fda:	f04f 33ff 	mov.w	r3, #4294967295
 8004fde:	e0fd      	b.n	80051dc <CO_SYNC_init+0x234>
    }

    /* clear object */
    (void)memset(SYNC, 0, sizeof(CO_SYNC_t));
 8004fe0:	225c      	movs	r2, #92	; 0x5c
 8004fe2:	2100      	movs	r1, #0
 8004fe4:	68f8      	ldr	r0, [r7, #12]
 8004fe6:	f009 febf 	bl	800ed68 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8004fee:	f107 0218 	add.w	r2, r7, #24
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	2100      	movs	r1, #0
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fe26 	bl	8004c48 <OD_get_u32>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8005000:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00c      	beq.n	8005022 <CO_SYNC_init+0x7a>
        if (errInfo != NULL) {
 8005008:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800500a:	2b00      	cmp	r3, #0
 800500c:	d006      	beq.n	800501c <CO_SYNC_init+0x74>
            *errInfo = OD_getIndex(OD_1005_cobIdSync);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7ff fde0 	bl	8004bd4 <OD_getIndex>
 8005014:	4603      	mov	r3, r0
 8005016:	461a      	mov	r2, r3
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800501c:	f06f 030b 	mvn.w	r3, #11
 8005020:	e0dc      	b.n	80051dc <CO_SYNC_init+0x234>
    }
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->OD_1005_extension.object = SYNC;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4a6e      	ldr	r2, [pc, #440]	; (80051e4 <CO_SYNC_init+0x23c>)
 800502c:	63da      	str	r2, [r3, #60]	; 0x3c
    SYNC->OD_1005_extension.write = OD_write_1005;
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	4a6d      	ldr	r2, [pc, #436]	; (80051e8 <CO_SYNC_init+0x240>)
 8005032:	641a      	str	r2, [r3, #64]	; 0x40
    (void)OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	3338      	adds	r3, #56	; 0x38
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f7ff fddb 	bl	8004bf6 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0, sizeof(uint32_t), NULL);
 8005040:	2300      	movs	r3, #0
 8005042:	2204      	movs	r2, #4
 8005044:	2100      	movs	r1, #0
 8005046:	6838      	ldr	r0, [r7, #0]
 8005048:	f7fd fb8e 	bl	8002768 <OD_getPtr>
 800504c:	4602      	mov	r2, r0
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	61da      	str	r2, [r3, #28]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    if (SYNC->OD_1006_period == NULL) {
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	69db      	ldr	r3, [r3, #28]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10c      	bne.n	8005074 <CO_SYNC_init+0xcc>
        if (errInfo != NULL) {
 800505a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800505c:	2b00      	cmp	r3, #0
 800505e:	d006      	beq.n	800506e <CO_SYNC_init+0xc6>
            *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8005060:	6838      	ldr	r0, [r7, #0]
 8005062:	f7ff fdb7 	bl	8004bd4 <OD_getIndex>
 8005066:	4603      	mov	r3, r0
 8005068:	461a      	mov	r2, r3
 800506a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506c:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800506e:	f06f 030b 	mvn.w	r3, #11
 8005072:	e0b3      	b.n	80051dc <CO_SYNC_init+0x234>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0, sizeof(uint32_t), NULL);
 8005074:	2300      	movs	r3, #0
 8005076:	2204      	movs	r2, #4
 8005078:	2100      	movs	r1, #0
 800507a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800507c:	f7fd fb74 	bl	8002768 <OD_getPtr>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	621a      	str	r2, [r3, #32]
    if ((OD_1007_syncWindowLen != NULL) && (SYNC->OD_1007_window == NULL)) {
 8005086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	d010      	beq.n	80050ae <CO_SYNC_init+0x106>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10c      	bne.n	80050ae <CO_SYNC_init+0x106>
        if (errInfo != NULL) {
 8005094:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005096:	2b00      	cmp	r3, #0
 8005098:	d006      	beq.n	80050a8 <CO_SYNC_init+0x100>
            *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 800509a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800509c:	f7ff fd9a 	bl	8004bd4 <OD_getIndex>
 80050a0:	4603      	mov	r3, r0
 80050a2:	461a      	mov	r2, r3
 80050a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050a6:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 80050a8:	f06f 030b 	mvn.w	r3, #11
 80050ac:	e096      	b.n	80051dc <CO_SYNC_init+0x234>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and configure extension */
    uint8_t syncCounterOvf = 0;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80050b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d033      	beq.n	8005120 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80050b8:	f107 0217 	add.w	r2, r7, #23
 80050bc:	2301      	movs	r3, #1
 80050be:	2100      	movs	r1, #0
 80050c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050c2:	f7ff fdac 	bl	8004c1e <OD_get_u8>
 80050c6:	4603      	mov	r3, r0
 80050c8:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 80050ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00c      	beq.n	80050ec <CO_SYNC_init+0x144>
            if (errInfo != NULL) {
 80050d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d006      	beq.n	80050e6 <CO_SYNC_init+0x13e>
                *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 80050d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80050da:	f7ff fd7b 	bl	8004bd4 <OD_getIndex>
 80050de:	4603      	mov	r3, r0
 80050e0:	461a      	mov	r2, r3
 80050e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050e4:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80050e6:	f06f 030b 	mvn.w	r3, #11
 80050ea:	e077      	b.n	80051dc <CO_SYNC_init+0x234>
        }
        if (syncCounterOvf == 1U) {
 80050ec:	7dfb      	ldrb	r3, [r7, #23]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d102      	bne.n	80050f8 <CO_SYNC_init+0x150>
            syncCounterOvf = 2;
 80050f2:	2302      	movs	r3, #2
 80050f4:	75fb      	strb	r3, [r7, #23]
 80050f6:	e004      	b.n	8005102 <CO_SYNC_init+0x15a>
        } else if (syncCounterOvf > 240U) {
 80050f8:	7dfb      	ldrb	r3, [r7, #23]
 80050fa:	2bf0      	cmp	r3, #240	; 0xf0
 80050fc:	d901      	bls.n	8005102 <CO_SYNC_init+0x15a>
            syncCounterOvf = 240;
 80050fe:	23f0      	movs	r3, #240	; 0xf0
 8005100:	75fb      	strb	r3, [r7, #23]
        } else { /* MISRA C 2004 14.10 */
        }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
        SYNC->OD_1019_extension.object = SYNC;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	64da      	str	r2, [r3, #76]	; 0x4c
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4a36      	ldr	r2, [pc, #216]	; (80051e4 <CO_SYNC_init+0x23c>)
 800510c:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.write = OD_write_1019;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	4a36      	ldr	r2, [pc, #216]	; (80051ec <CO_SYNC_init+0x244>)
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
        (void)OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	334c      	adds	r3, #76	; 0x4c
 8005118:	4619      	mov	r1, r3
 800511a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800511c:	f7ff fd6b 	bl	8004bf6 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8005120:	7dfa      	ldrb	r2, [r7, #23]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	68ba      	ldr	r2, [r7, #8]
 800512a:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->isProducer = (cobIdSync & 0x40000000U) != 0U;
 800512c:	69bb      	ldr	r3, [r7, #24]
 800512e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005132:	2b00      	cmp	r3, #0
 8005134:	bf14      	ite	ne
 8005136:	2301      	movne	r3, #1
 8005138:	2300      	moveq	r3, #0
 800513a:	b2db      	uxtb	r3, r3
 800513c:	461a      	mov	r2, r3
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	625a      	str	r2, [r3, #36]	; 0x24
    SYNC->CANdevTx = CANdevTx;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005146:	629a      	str	r2, [r3, #40]	; 0x28
#endif
#if ((CO_CONFIG_SYNC)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    SYNC->CAN_ID = (uint16_t)(cobIdSync & 0x7FFU);
 8005148:	69bb      	ldr	r3, [r7, #24]
 800514a:	b29b      	uxth	r3, r3
 800514c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SYNC->CANdevRx = CANdevRx;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800515c:	631a      	str	r2, [r3, #48]	; 0x30
    SYNC->CANdevRxIdx = CANdevRxIdx;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005162:	869a      	strh	r2, [r3, #52]	; 0x34
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANdevTxIdx = CANdevTxIdx;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8005168:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
#endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, (uint16_t)(cobIdSync & 0x7FFU), 0x7FF, false,
 800516c:	69bb      	ldr	r3, [r7, #24]
 800516e:	b29b      	uxth	r3, r3
 8005170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005174:	b29a      	uxth	r2, r3
 8005176:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <CO_SYNC_init+0x248>)
 800517a:	9302      	str	r3, [sp, #8]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	9301      	str	r3, [sp, #4]
 8005180:	2300      	movs	r3, #0
 8005182:	9300      	str	r3, [sp, #0]
 8005184:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005188:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800518a:	f002 f8fd 	bl	8007388 <CO_CANrxBufferInit>
 800518e:	4603      	mov	r3, r0
 8005190:	77bb      	strb	r3, [r7, #30]
                                              (void*)SYNC, CO_SYNC_receive);
    if (ret != CO_ERROR_NO) {
 8005192:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <CO_SYNC_init+0x1f8>
        return ret;
 800519a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800519e:	e01d      	b.n	80051dc <CO_SYNC_init+0x234>
    }

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051a8:	b29a      	uxth	r2, r3
                                         (syncCounterOvf != 0U) ? 1U : 0U, false);
 80051aa:	7dfb      	ldrb	r3, [r7, #23]
    SYNC->CANtxBuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, (uint16_t)(cobIdSync & 0x7FFU), false,
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <CO_SYNC_init+0x20c>
 80051b0:	2301      	movs	r3, #1
 80051b2:	e000      	b.n	80051b6 <CO_SYNC_init+0x20e>
 80051b4:	2300      	movs	r3, #0
 80051b6:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80051b8:	2000      	movs	r0, #0
 80051ba:	9001      	str	r0, [sp, #4]
 80051bc:	9300      	str	r3, [sp, #0]
 80051be:	2300      	movs	r3, #0
 80051c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051c2:	f002 f93f 	bl	8007444 <CO_CANtxBufferInit>
 80051c6:	4602      	mov	r2, r0
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	62da      	str	r2, [r3, #44]	; 0x2c

    if (SYNC->CANtxBuff == NULL) {
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d102      	bne.n	80051da <CO_SYNC_init+0x232>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80051d4:	f04f 33ff 	mov.w	r3, #4294967295
 80051d8:	e000      	b.n	80051dc <CO_SYNC_init+0x234>
    }
#endif

    return CO_ERROR_NO;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3720      	adds	r7, #32
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	080021cf 	.word	0x080021cf
 80051e8:	08004d65 	.word	0x08004d65
 80051ec:	08004eed 	.word	0x08004eed
 80051f0:	08004cd7 	.word	0x08004cd7

080051f4 <CO_SYNC_process>:
    }
}
#endif

CO_SYNC_status_t
CO_SYNC_process(CO_SYNC_t* SYNC, bool_t NMTisPreOrOperational, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08a      	sub	sp, #40	; 0x28
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8005202:	2300      	movs	r3, #0
 8005204:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 8088 	beq.w	800531e <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	687a      	ldr	r2, [r7, #4]
 8005214:	4413      	add	r3, r2
 8005216:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) {
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	429a      	cmp	r2, r3
 8005220:	d902      	bls.n	8005228 <CO_SYNC_process+0x34>
            SYNC->timer = timerNew;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	619a      	str	r2, [r3, #24]
        }

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2200      	movs	r2, #0
 8005234:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8005236:	2301      	movs	r3, #1
 8005238:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2200      	movs	r2, #0
 800523e:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = (SYNC->OD_1006_period != NULL) ? *SYNC->OD_1006_period : 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	69db      	ldr	r3, [r3, #28]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <CO_SYNC_process+0x5c>
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	e000      	b.n	8005252 <CO_SYNC_process+0x5e>
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0U) {
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d031      	beq.n	80052be <CO_SYNC_process+0xca>
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
            if (SYNC->isProducer) {
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	429a      	cmp	r2, r3
 800526a:	d828      	bhi.n	80052be <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 800526c:	2301      	movs	r3, #1
 800526e:	77fb      	strb	r3, [r7, #31]
                    (void)CO_SYNCsend(SYNC);
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff fcfe 	bl	8004c72 <CO_SYNCsend>
 8005276:	e022      	b.n	80052be <CO_SYNC_process+0xca>
#endif
            } else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

                /* Verify timeout of SYNC */
                if (SYNC->timeoutError == 1U) {
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	7c1b      	ldrb	r3, [r3, #16]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d11e      	bne.n	80052be <CO_SYNC_process+0xca>
                    /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                    uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	085b      	lsrs	r3, r3, #1
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4413      	add	r3, r2
 8005288:	61bb      	str	r3, [r7, #24]
                    if (periodTimeout < OD_1006_period) {
 800528a:	69ba      	ldr	r2, [r7, #24]
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	429a      	cmp	r2, r3
 8005290:	d202      	bcs.n	8005298 <CO_SYNC_process+0xa4>
                        periodTimeout = 0xFFFFFFFFU;
 8005292:	f04f 33ff 	mov.w	r3, #4294967295
 8005296:	61bb      	str	r3, [r7, #24]
                    }

                    if (SYNC->timer > periodTimeout) {
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d20d      	bcs.n	80052be <CO_SYNC_process+0xca>
                        CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT, CO_EMC_COMMUNICATION, SYNC->timer);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	6818      	ldr	r0, [r3, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80052b0:	2218      	movs	r2, #24
 80052b2:	2101      	movs	r1, #1
 80052b4:	f7fc f951 	bl	800155a <CO_error>
                        SYNC->timeoutError = 2;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2202      	movs	r2, #2
 80052bc:	741a      	strb	r2, [r3, #16]
                } else { /* MISRA C 2004 14.10 */
                }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if ((SYNC->OD_1007_window != NULL) && (*SYNC->OD_1007_window > 0U) && (SYNC->timer > *SYNC->OD_1007_window)) {
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d015      	beq.n	80052f2 <CO_SYNC_process+0xfe>
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d010      	beq.n	80052f2 <CO_SYNC_process+0xfe>
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	699a      	ldr	r2, [r3, #24]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6a1b      	ldr	r3, [r3, #32]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	429a      	cmp	r2, r3
 80052dc:	d909      	bls.n	80052f2 <CO_SYNC_process+0xfe>
            if (!SYNC->syncIsOutsideWindow) {
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d101      	bne.n	80052ea <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 80052e6:	2302      	movs	r3, #2
 80052e8:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2201      	movs	r2, #1
 80052ee:	615a      	str	r2, [r3, #20]
 80052f0:	e002      	b.n	80052f8 <CO_SYNC_process+0x104>
        } else {
            SYNC->syncIsOutsideWindow = false;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	2200      	movs	r2, #0
 80052f6:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0U) {
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	7a1b      	ldrb	r3, [r3, #8]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01a      	beq.n	8005336 <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH, CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6818      	ldr	r0, [r3, #0]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	7a1b      	ldrb	r3, [r3, #8]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	f248 2340 	movw	r3, #33344	; 0x8240
 800530e:	2219      	movs	r2, #25
 8005310:	2101      	movs	r1, #1
 8005312:	f7fc f922 	bl	800155a <CO_error>
            SYNC->receiveError = 0;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	2200      	movs	r2, #0
 800531a:	721a      	strb	r2, [r3, #8]
 800531c:	e00b      	b.n	8005336 <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2200      	movs	r2, #0
 8005322:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	2200      	movs	r2, #0
 800532e:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8005336:	7ffb      	ldrb	r3, [r7, #31]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d10f      	bne.n	800535c <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2U) {
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	7c1b      	ldrb	r3, [r3, #16]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d108      	bne.n	8005356 <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	6818      	ldr	r0, [r3, #0]
 8005348:	2300      	movs	r3, #0
 800534a:	9300      	str	r3, [sp, #0]
 800534c:	2300      	movs	r3, #0
 800534e:	2218      	movs	r2, #24
 8005350:	2100      	movs	r1, #0
 8005352:	f7fc f902 	bl	800155a <CO_error>
        }
        SYNC->timeoutError = 1;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 800535c:	7ffb      	ldrb	r3, [r7, #31]
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <CO_getUint16>:
CO_getUint16(const void* buf) {
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	881b      	ldrh	r3, [r3, #0]
 8005372:	b29b      	uxth	r3, r3
    (void)memmove((void*)&value, buf, sizeof(value));
 8005374:	81fb      	strh	r3, [r7, #14]
    return value;
 8005376:	89fb      	ldrh	r3, [r7, #14]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3714      	adds	r7, #20
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <CO_getUint32>:
CO_getUint32(const void* buf) {
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
    (void)memmove((void*)&value, buf, sizeof(value));
 8005390:	60fb      	str	r3, [r7, #12]
    return value;
 8005392:	68fb      	ldr	r3, [r7, #12]
}
 8005394:	4618      	mov	r0, r3
 8005396:	3714      	adds	r7, #20
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <OD_getIndex>:
OD_getIndex(const OD_entry_t* entry) {
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0U;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <OD_getIndex+0x14>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	881b      	ldrh	r3, [r3, #0]
 80053b2:	e000      	b.n	80053b6 <OD_getIndex+0x16>
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <OD_extension_init>:
OD_extension_init(OD_entry_t* entry, OD_extension_t* extension) {
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
    if (entry == NULL) {
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d101      	bne.n	80053d6 <OD_extension_init+0x14>
        return ODR_IDX_NOT_EXIST;
 80053d2:	2305      	movs	r3, #5
 80053d4:	e003      	b.n	80053de <OD_extension_init+0x1c>
    entry->extension = extension;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr

080053ea <OD_get_u32>:
OD_get_u32(const OD_entry_t* entry, uint8_t subIndex, uint32_t* val, bool_t odOrig) {
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b086      	sub	sp, #24
 80053ee:	af02      	add	r7, sp, #8
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	607a      	str	r2, [r7, #4]
 80053f4:	603b      	str	r3, [r7, #0]
 80053f6:	460b      	mov	r3, r1
 80053f8:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80053fa:	7af9      	ldrb	r1, [r7, #11]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	9300      	str	r3, [sp, #0]
 8005400:	2304      	movs	r3, #4
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	68f8      	ldr	r0, [r7, #12]
 8005406:	f7fd f935 	bl	8002674 <OD_get_value>
 800540a:	4603      	mov	r3, r0
}
 800540c:	4618      	mov	r0, r3
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_TIME_receive(void* object, void* msg) {
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
    CO_TIME_t* TIME = object;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	791b      	ldrb	r3, [r3, #4]
 8005426:	74fb      	strb	r3, [r7, #19]
    const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	3305      	adds	r3, #5
 800542c:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b06      	cmp	r3, #6
 8005432:	d108      	bne.n	8005446 <CO_TIME_receive+0x32>
        (void)memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2206      	movs	r2, #6
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	4618      	mov	r0, r3
 800543c:	f009 fd1f 	bl	800ee7e <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	2201      	movs	r2, #1
 8005444:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8005446:	bf00      	nop
 8005448:	3718      	adds	r7, #24
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}
	...

08005450 <OD_write_1012>:
 * Custom function for writing OD object "COB-ID time stamp"
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t
OD_write_1012(OD_stream_t* stream, const void* buf, OD_size_t count, OD_size_t* countWritten) {
 8005450:	b580      	push	{r7, lr}
 8005452:	b088      	sub	sp, #32
 8005454:	af00      	add	r7, sp, #0
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	60b9      	str	r1, [r7, #8]
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	603b      	str	r3, [r7, #0]
    if ((stream == NULL) || (stream->subIndex != 0U) || (buf == NULL) || (count != sizeof(uint32_t))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00c      	beq.n	800547e <OD_write_1012+0x2e>
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	7d1b      	ldrb	r3, [r3, #20]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d108      	bne.n	800547e <OD_write_1012+0x2e>
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d005      	beq.n	800547e <OD_write_1012+0x2e>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2b04      	cmp	r3, #4
 8005476:	d102      	bne.n	800547e <OD_write_1012+0x2e>
        || (countWritten == NULL)) {
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <OD_write_1012+0x32>
        return ODR_DEV_INCOMPAT;
 800547e:	2309      	movs	r3, #9
 8005480:	e051      	b.n	8005526 <OD_write_1012+0xd6>
    }

    CO_TIME_t* TIME = stream->object;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005488:	68b8      	ldr	r0, [r7, #8]
 800548a:	f7ff ff7b 	bl	8005384 <CO_getUint32>
 800548e:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 8005490:	69bb      	ldr	r3, [r7, #24]
 8005492:	b29b      	uxth	r3, r3
 8005494:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005498:	82fb      	strh	r3, [r7, #22]
    if (((cobIdTimeStamp & 0x3FFFF800U) != 0U) || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 800549a:	69ba      	ldr	r2, [r7, #24]
 800549c:	4b24      	ldr	r3, [pc, #144]	; (8005530 <OD_write_1012+0xe0>)
 800549e:	4013      	ands	r3, r2
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d126      	bne.n	80054f2 <OD_write_1012+0xa2>
 80054a4:	8afb      	ldrh	r3, [r7, #22]
 80054a6:	2b7f      	cmp	r3, #127	; 0x7f
 80054a8:	d923      	bls.n	80054f2 <OD_write_1012+0xa2>
 80054aa:	8afb      	ldrh	r3, [r7, #22]
 80054ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054b0:	d903      	bls.n	80054ba <OD_write_1012+0x6a>
 80054b2:	8afb      	ldrh	r3, [r7, #22]
 80054b4:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80054b8:	d91b      	bls.n	80054f2 <OD_write_1012+0xa2>
 80054ba:	8afb      	ldrh	r3, [r7, #22]
 80054bc:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80054c0:	d903      	bls.n	80054ca <OD_write_1012+0x7a>
 80054c2:	8afb      	ldrh	r3, [r7, #22]
 80054c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054c8:	d313      	bcc.n	80054f2 <OD_write_1012+0xa2>
 80054ca:	8afb      	ldrh	r3, [r7, #22]
 80054cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80054d0:	d903      	bls.n	80054da <OD_write_1012+0x8a>
 80054d2:	8afb      	ldrh	r3, [r7, #22]
 80054d4:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80054d8:	d30b      	bcc.n	80054f2 <OD_write_1012+0xa2>
 80054da:	8afb      	ldrh	r3, [r7, #22]
 80054dc:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80054e0:	d303      	bcc.n	80054ea <OD_write_1012+0x9a>
 80054e2:	8afb      	ldrh	r3, [r7, #22]
 80054e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054e8:	d303      	bcc.n	80054f2 <OD_write_1012+0xa2>
 80054ea:	8afb      	ldrh	r3, [r7, #22]
 80054ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80054f0:	d901      	bls.n	80054f6 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 80054f2:	230f      	movs	r3, #15
 80054f4:	e017      	b.n	8005526 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 80054f6:	69bb      	ldr	r3, [r7, #24]
 80054f8:	0fdb      	lsrs	r3, r3, #31
 80054fa:	b2db      	uxtb	r3, r3
 80054fc:	461a      	mov	r2, r3
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf14      	ite	ne
 800550c:	2301      	movne	r3, #1
 800550e:	2300      	moveq	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	68f8      	ldr	r0, [r7, #12]
 8005520:	f7fc fead 	bl	800227e <OD_writeOriginal>
 8005524:	4603      	mov	r3, r0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3720      	adds	r7, #32
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	3ffff800 	.word	0x3ffff800

08005534 <CO_TIME_init>:
CO_ReturnError_t
CO_TIME_init(CO_TIME_t* TIME, OD_entry_t* OD_1012_cobIdTimeStamp, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx,
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
             CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx,
#endif
             uint32_t* errInfo) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b08c      	sub	sp, #48	; 0x30
 8005538:	af04      	add	r7, sp, #16
 800553a:	60f8      	str	r0, [r7, #12]
 800553c:	60b9      	str	r1, [r7, #8]
 800553e:	607a      	str	r2, [r7, #4]
 8005540:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if ((TIME == NULL) || (OD_1012_cobIdTimeStamp == NULL) || (CANdevRx == NULL)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d005      	beq.n	8005554 <CO_TIME_init+0x20>
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <CO_TIME_init+0x20>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <CO_TIME_init+0x26>
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005554:	f04f 33ff 	mov.w	r3, #4294967295
 8005558:	e061      	b.n	800561e <CO_TIME_init+0xea>
    }

    (void)memset(TIME, 0, sizeof(CO_TIME_t));
 800555a:	222c      	movs	r2, #44	; 0x2c
 800555c:	2100      	movs	r1, #0
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f009 fc02 	bl	800ed68 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8005564:	f107 0214 	add.w	r2, r7, #20
 8005568:	2301      	movs	r3, #1
 800556a:	2100      	movs	r1, #0
 800556c:	68b8      	ldr	r0, [r7, #8]
 800556e:	f7ff ff3c 	bl	80053ea <OD_get_u32>
 8005572:	4603      	mov	r3, r0
 8005574:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8005576:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00c      	beq.n	8005598 <CO_TIME_init+0x64>
        if (errInfo != NULL) {
 800557e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005580:	2b00      	cmp	r3, #0
 8005582:	d006      	beq.n	8005592 <CO_TIME_init+0x5e>
            *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8005584:	68b8      	ldr	r0, [r7, #8]
 8005586:	f7ff ff0b 	bl	80053a0 <OD_getIndex>
 800558a:	4603      	mov	r3, r0
 800558c:	461a      	mov	r2, r3
 800558e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005590:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8005592:	f06f 030b 	mvn.w	r3, #11
 8005596:	e042      	b.n	800561e <CO_TIME_init+0xea>
    }
#if ((CO_CONFIG_TIME)&CO_CONFIG_FLAG_OD_DYNAMIC) != 0
    TIME->OD_1012_extension.object = TIME;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	68fa      	ldr	r2, [r7, #12]
 800559c:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	4a21      	ldr	r2, [pc, #132]	; (8005628 <CO_TIME_init+0xf4>)
 80055a2:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	4a21      	ldr	r2, [pc, #132]	; (800562c <CO_TIME_init+0xf8>)
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24
    (void)OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	331c      	adds	r3, #28
 80055ae:	4619      	mov	r1, r3
 80055b0:	68b8      	ldr	r0, [r7, #8]
 80055b2:	f7ff ff06 	bl	80053c2 <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = (uint16_t)(cobIdTimeStamp & 0x7FFU);
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055be:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000UL) != 0U;
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	0fdb      	lsrs	r3, r3, #31
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000UL) != 0U;
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	bf14      	ite	ne
 80055d6:	2301      	movne	r3, #1
 80055d8:	2300      	moveq	r3, #0
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
    if (TIME->isConsumer) {
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d015      	beq.n	800561c <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, cobId, 0x7FF, false, (void*)TIME,
 80055f0:	8bba      	ldrh	r2, [r7, #28]
 80055f2:	8879      	ldrh	r1, [r7, #2]
 80055f4:	4b0e      	ldr	r3, [pc, #56]	; (8005630 <CO_TIME_init+0xfc>)
 80055f6:	9302      	str	r3, [sp, #8]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	9301      	str	r3, [sp, #4]
 80055fc:	2300      	movs	r3, #0
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f001 febf 	bl	8007388 <CO_CANrxBufferInit>
 800560a:	4603      	mov	r3, r0
 800560c:	76fb      	strb	r3, [r7, #27]
                                                  CO_TIME_receive);
        if (ret != CO_ERROR_NO) {
 800560e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d002      	beq.n	800561c <CO_TIME_init+0xe8>
            return ret;
 8005616:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800561a:	e000      	b.n	800561e <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3720      	adds	r7, #32
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	080021cf 	.word	0x080021cf
 800562c:	08005451 	.word	0x08005451
 8005630:	08005415 	.word	0x08005415

08005634 <CO_TIME_process>:
    }
}
#endif

bool_t
CO_TIME_process(CO_TIME_t* TIME, bool_t NMTisPreOrOperational, uint32_t timeDifference_us) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b08a      	sub	sp, #40	; 0x28
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005640:	2300      	movs	r3, #0
 8005642:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d024      	beq.n	8005694 <CO_TIME_process+0x60>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d020      	beq.n	8005694 <CO_TIME_process+0x60>
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	699b      	ldr	r3, [r3, #24]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d01f      	beq.n	800569a <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	4618      	mov	r0, r3
 800565e:	f7ff fe91 	bl	8005384 <CO_getUint32>
 8005662:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	3304      	adds	r3, #4
 8005668:	4618      	mov	r0, r3
 800566a:	f7ff fe7c 	bl	8005366 <CO_getUint16>
 800566e:	4603      	mov	r3, r0
 8005670:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFFU;
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8bfa      	ldrh	r2, [r7, #30]
 8005680:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005688:	2301      	movs	r3, #1
 800568a:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2200      	movs	r2, #0
 8005690:	619a      	str	r2, [r3, #24]
        if (CO_FLAG_READ(TIME->CANrxNew)) {
 8005692:	e002      	b.n	800569a <CO_TIME_process+0x66>
        }
    } else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 800569a:	2300      	movs	r3, #0
 800569c:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && (timeDifference_us > 0U)) {
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d132      	bne.n	800570a <CO_TIME_process+0xd6>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d02f      	beq.n	800570a <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	89db      	ldrh	r3, [r3, #14]
 80056ae:	461a      	mov	r2, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4413      	add	r3, r2
 80056b4:	617b      	str	r3, [r7, #20]
        ms = us / 1000U;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	4a16      	ldr	r2, [pc, #88]	; (8005714 <CO_TIME_process+0xe0>)
 80056ba:	fba2 2303 	umull	r2, r3, r2, r3
 80056be:	099b      	lsrs	r3, r3, #6
 80056c0:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = (uint16_t)(us % 1000U);
 80056c2:	697a      	ldr	r2, [r7, #20]
 80056c4:	4b13      	ldr	r3, [pc, #76]	; (8005714 <CO_TIME_process+0xe0>)
 80056c6:	fba3 1302 	umull	r1, r3, r3, r2
 80056ca:	099b      	lsrs	r3, r3, #6
 80056cc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	b29a      	uxth	r2, r3
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	441a      	add	r2, r3
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000U * 60U * 60U * 24U)) {
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	4a0a      	ldr	r2, [pc, #40]	; (8005718 <CO_TIME_process+0xe4>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d90b      	bls.n	800570a <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000U * 60U * 60U * 24U);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	689a      	ldr	r2, [r3, #8]
 80056f6:	4b09      	ldr	r3, [pc, #36]	; (800571c <CO_TIME_process+0xe8>)
 80056f8:	4413      	add	r3, r2
 80056fa:	68fa      	ldr	r2, [r7, #12]
 80056fc:	6093      	str	r3, [r2, #8]
            TIME->days += 1U;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	899b      	ldrh	r3, [r3, #12]
 8005702:	3301      	adds	r3, #1
 8005704:	b29a      	uxth	r2, r3
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	819a      	strh	r2, [r3, #12]
    } else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 800570a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800570c:	4618      	mov	r0, r3
 800570e:	3728      	adds	r7, #40	; 0x28
 8005710:	46bd      	mov	sp, r7
 8005712:	bd80      	pop	{r7, pc}
 8005714:	10624dd3 	.word	0x10624dd3
 8005718:	05265bff 	.word	0x05265bff
 800571c:	fad9a400 	.word	0xfad9a400

08005720 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0

CO_ReturnError_t
CO_LEDs_init(CO_LEDs_t* LEDs) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b084      	sub	sp, #16
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005728:	2300      	movs	r3, #0
 800572a:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d102      	bne.n	8005738 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295
 8005736:	e006      	b.n	8005746 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    (void)memset(LEDs, 0, sizeof(CO_LEDs_t));
 8005738:	220c      	movs	r2, #12
 800573a:	2100      	movs	r1, #0
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f009 fb13 	bl	800ed68 <memset>

    return ret;
 8005742:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8005746:	4618      	mov	r0, r3
 8005748:	3710      	adds	r7, #16
 800574a:	46bd      	mov	sp, r7
 800574c:	bd80      	pop	{r7, pc}
	...

08005750 <CO_LEDs_process>:

void
CO_LEDs_process(CO_LEDs_t* LEDs, uint32_t timeDifference_us, CO_NMT_internalState_t NMTstate, bool_t LSSconfig,
                bool_t ErrCANbusOff, bool_t ErrCANbusWarn, bool_t ErrRpdo, bool_t ErrSync, bool_t ErrHbCons,
                bool_t ErrOther, bool_t firmwareDownload, uint32_t* timerNext_us) {
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8005760:	2300      	movs	r3, #0
 8005762:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8005764:	2300      	movs	r3, #0
 8005766:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8005768:	2300      	movs	r3, #0
 800576a:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	441a      	add	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000U) {
 8005778:	e112      	b.n	80059a0 <CO_LEDs_process+0x250>
        bool_t rdFlickerNext = (LEDs->LEDred & (uint8_t)CO_LED_flicker) == 0U;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	7a5b      	ldrb	r3, [r3, #9]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	bf0c      	ite	eq
 8005786:	2301      	moveq	r3, #1
 8005788:	2300      	movne	r3, #0
 800578a:	b2db      	uxtb	r3, r3
 800578c:	613b      	str	r3, [r7, #16]

        tick = true;
 800578e:	2301      	movs	r3, #1
 8005790:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000U;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f5a3 4343 	sub.w	r3, r3, #49920	; 0xc300
 800579a:	3b50      	subs	r3, #80	; 0x50
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3U) {
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	791b      	ldrb	r3, [r3, #4]
 80057a4:	3301      	adds	r3, #1
 80057a6:	b2da      	uxtb	r2, r3
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	711a      	strb	r2, [r3, #4]
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	791b      	ldrb	r3, [r3, #4]
 80057b0:	2b03      	cmp	r3, #3
 80057b2:	f240 80dd 	bls.w	8005970 <CO_LEDs_process+0x220>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	711a      	strb	r2, [r3, #4]
            rd = 0;
 80057bc:	2300      	movs	r3, #0
 80057be:	77fb      	strb	r3, [r7, #31]
            gr = 0;
 80057c0:	2300      	movs	r3, #0
 80057c2:	77bb      	strb	r3, [r7, #30]

            if ((LEDs->LEDred & CO_LED_blink) == 0U) {
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	7a5b      	ldrb	r3, [r3, #9]
 80057c8:	f003 0302 	and.w	r3, r3, #2
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d104      	bne.n	80057da <CO_LEDs_process+0x8a>
                rd |= CO_LED_blink;
 80057d0:	7ffb      	ldrb	r3, [r7, #31]
 80057d2:	f043 0302 	orr.w	r3, r3, #2
 80057d6:	77fb      	strb	r3, [r7, #31]
 80057d8:	e003      	b.n	80057e2 <CO_LEDs_process+0x92>
            } else {
                gr |= CO_LED_blink;
 80057da:	7fbb      	ldrb	r3, [r7, #30]
 80057dc:	f043 0302 	orr.w	r3, r3, #2
 80057e0:	77bb      	strb	r3, [r7, #30]
            }

            switch (++LEDs->LEDtmrflash_1) {
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	795b      	ldrb	r3, [r3, #5]
 80057e6:	3301      	adds	r3, #1
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	715a      	strb	r2, [r3, #5]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	795b      	ldrb	r3, [r3, #5]
 80057f2:	2b06      	cmp	r3, #6
 80057f4:	d010      	beq.n	8005818 <CO_LEDs_process+0xc8>
 80057f6:	2b06      	cmp	r3, #6
 80057f8:	dc12      	bgt.n	8005820 <CO_LEDs_process+0xd0>
 80057fa:	2b01      	cmp	r3, #1
 80057fc:	d002      	beq.n	8005804 <CO_LEDs_process+0xb4>
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d005      	beq.n	800580e <CO_LEDs_process+0xbe>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: /* none */ break;
 8005802:	e00d      	b.n	8005820 <CO_LEDs_process+0xd0>
                case 1: rd |= CO_LED_flash_1; break;
 8005804:	7ffb      	ldrb	r3, [r7, #31]
 8005806:	f043 0304 	orr.w	r3, r3, #4
 800580a:	77fb      	strb	r3, [r7, #31]
 800580c:	e009      	b.n	8005822 <CO_LEDs_process+0xd2>
                case 2: gr |= CO_LED_flash_1; break;
 800580e:	7fbb      	ldrb	r3, [r7, #30]
 8005810:	f043 0304 	orr.w	r3, r3, #4
 8005814:	77bb      	strb	r3, [r7, #30]
 8005816:	e004      	b.n	8005822 <CO_LEDs_process+0xd2>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	715a      	strb	r2, [r3, #5]
 800581e:	e000      	b.n	8005822 <CO_LEDs_process+0xd2>
                default: /* none */ break;
 8005820:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	799b      	ldrb	r3, [r3, #6]
 8005826:	3301      	adds	r3, #1
 8005828:	b2da      	uxtb	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	719a      	strb	r2, [r3, #6]
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	799b      	ldrb	r3, [r3, #6]
 8005832:	3b01      	subs	r3, #1
 8005834:	2b07      	cmp	r3, #7
 8005836:	d821      	bhi.n	800587c <CO_LEDs_process+0x12c>
 8005838:	a201      	add	r2, pc, #4	; (adr r2, 8005840 <CO_LEDs_process+0xf0>)
 800583a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800583e:	bf00      	nop
 8005840:	08005861 	.word	0x08005861
 8005844:	0800586b 	.word	0x0800586b
 8005848:	08005861 	.word	0x08005861
 800584c:	0800586b 	.word	0x0800586b
 8005850:	0800587d 	.word	0x0800587d
 8005854:	0800587d 	.word	0x0800587d
 8005858:	0800587d 	.word	0x0800587d
 800585c:	08005875 	.word	0x08005875
                case 1:
                case 3: rd |= CO_LED_flash_2; break;
 8005860:	7ffb      	ldrb	r3, [r7, #31]
 8005862:	f043 0308 	orr.w	r3, r3, #8
 8005866:	77fb      	strb	r3, [r7, #31]
 8005868:	e009      	b.n	800587e <CO_LEDs_process+0x12e>
                case 2:
                case 4: gr |= CO_LED_flash_2; break;
 800586a:	7fbb      	ldrb	r3, [r7, #30]
 800586c:	f043 0308 	orr.w	r3, r3, #8
 8005870:	77bb      	strb	r3, [r7, #30]
 8005872:	e004      	b.n	800587e <CO_LEDs_process+0x12e>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	719a      	strb	r2, [r3, #6]
 800587a:	e000      	b.n	800587e <CO_LEDs_process+0x12e>
                default: /* none */ break;
 800587c:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	79db      	ldrb	r3, [r3, #7]
 8005882:	3301      	adds	r3, #1
 8005884:	b2da      	uxtb	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	71da      	strb	r2, [r3, #7]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	79db      	ldrb	r3, [r3, #7]
 800588e:	2b0a      	cmp	r3, #10
 8005890:	bf8c      	ite	hi
 8005892:	2201      	movhi	r2, #1
 8005894:	2200      	movls	r2, #0
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	2a00      	cmp	r2, #0
 800589a:	d12c      	bne.n	80058f6 <CO_LEDs_process+0x1a6>
 800589c:	2201      	movs	r2, #1
 800589e:	fa02 f303 	lsl.w	r3, r2, r3
 80058a2:	f003 0254 	and.w	r2, r3, #84	; 0x54
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	bf14      	ite	ne
 80058aa:	2201      	movne	r2, #1
 80058ac:	2200      	moveq	r2, #0
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	2a00      	cmp	r2, #0
 80058b2:	d117      	bne.n	80058e4 <CO_LEDs_process+0x194>
 80058b4:	f003 022a 	and.w	r2, r3, #42	; 0x2a
 80058b8:	2a00      	cmp	r2, #0
 80058ba:	bf14      	ite	ne
 80058bc:	2201      	movne	r2, #1
 80058be:	2200      	moveq	r2, #0
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	2a00      	cmp	r2, #0
 80058c4:	d109      	bne.n	80058da <CO_LEDs_process+0x18a>
 80058c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bf14      	ite	ne
 80058ce:	2301      	movne	r3, #1
 80058d0:	2300      	moveq	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <CO_LEDs_process+0x19e>
                case 5: rd |= CO_LED_flash_3; break;
                case 2:
                case 4:
                case 6: gr |= CO_LED_flash_3; break;
                case 10: LEDs->LEDtmrflash_3 = 0; break;
                default: /* none */ break;
 80058d8:	e00d      	b.n	80058f6 <CO_LEDs_process+0x1a6>
                case 5: rd |= CO_LED_flash_3; break;
 80058da:	7ffb      	ldrb	r3, [r7, #31]
 80058dc:	f043 0310 	orr.w	r3, r3, #16
 80058e0:	77fb      	strb	r3, [r7, #31]
 80058e2:	e009      	b.n	80058f8 <CO_LEDs_process+0x1a8>
                case 6: gr |= CO_LED_flash_3; break;
 80058e4:	7fbb      	ldrb	r3, [r7, #30]
 80058e6:	f043 0310 	orr.w	r3, r3, #16
 80058ea:	77bb      	strb	r3, [r7, #30]
 80058ec:	e004      	b.n	80058f8 <CO_LEDs_process+0x1a8>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2200      	movs	r2, #0
 80058f2:	71da      	strb	r2, [r3, #7]
 80058f4:	e000      	b.n	80058f8 <CO_LEDs_process+0x1a8>
                default: /* none */ break;
 80058f6:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	7a1b      	ldrb	r3, [r3, #8]
 80058fc:	3301      	adds	r3, #1
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	721a      	strb	r2, [r3, #8]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	7a1b      	ldrb	r3, [r3, #8]
 8005908:	2b0c      	cmp	r3, #12
 800590a:	bf8c      	ite	hi
 800590c:	2201      	movhi	r2, #1
 800590e:	2200      	movls	r2, #0
 8005910:	b2d2      	uxtb	r2, r2
 8005912:	2a00      	cmp	r2, #0
 8005914:	d137      	bne.n	8005986 <CO_LEDs_process+0x236>
 8005916:	2201      	movs	r2, #1
 8005918:	fa02 f303 	lsl.w	r3, r2, r3
 800591c:	f403 72aa 	and.w	r2, r3, #340	; 0x154
 8005920:	2a00      	cmp	r2, #0
 8005922:	bf14      	ite	ne
 8005924:	2201      	movne	r2, #1
 8005926:	2200      	moveq	r2, #0
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	2a00      	cmp	r2, #0
 800592c:	d117      	bne.n	800595e <CO_LEDs_process+0x20e>
 800592e:	f003 02aa 	and.w	r2, r3, #170	; 0xaa
 8005932:	2a00      	cmp	r2, #0
 8005934:	bf14      	ite	ne
 8005936:	2201      	movne	r2, #1
 8005938:	2200      	moveq	r2, #0
 800593a:	b2d2      	uxtb	r2, r2
 800593c:	2a00      	cmp	r2, #0
 800593e:	d109      	bne.n	8005954 <CO_LEDs_process+0x204>
 8005940:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005944:	2b00      	cmp	r3, #0
 8005946:	bf14      	ite	ne
 8005948:	2301      	movne	r3, #1
 800594a:	2300      	moveq	r3, #0
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d10a      	bne.n	8005968 <CO_LEDs_process+0x218>
                case 2:
                case 4:
                case 6:
                case 8: gr |= CO_LED_flash_4; break;
                case 12: LEDs->LEDtmrflash_4 = 0; break;
                default: /* none */ break;
 8005952:	e018      	b.n	8005986 <CO_LEDs_process+0x236>
                case 7: rd |= CO_LED_flash_4; break;
 8005954:	7ffb      	ldrb	r3, [r7, #31]
 8005956:	f043 0320 	orr.w	r3, r3, #32
 800595a:	77fb      	strb	r3, [r7, #31]
 800595c:	e014      	b.n	8005988 <CO_LEDs_process+0x238>
                case 8: gr |= CO_LED_flash_4; break;
 800595e:	7fbb      	ldrb	r3, [r7, #30]
 8005960:	f043 0320 	orr.w	r3, r3, #32
 8005964:	77bb      	strb	r3, [r7, #30]
 8005966:	e00f      	b.n	8005988 <CO_LEDs_process+0x238>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	721a      	strb	r2, [r3, #8]
 800596e:	e00b      	b.n	8005988 <CO_LEDs_process+0x238>
            }
        } else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	7a5b      	ldrb	r3, [r3, #9]
 8005974:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005978:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFFU ^ (CO_LED_flicker | CO_LED_CANopen));
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	7a9b      	ldrb	r3, [r3, #10]
 800597e:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8005982:	77bb      	strb	r3, [r7, #30]
 8005984:	e000      	b.n	8005988 <CO_LEDs_process+0x238>
                default: /* none */ break;
 8005986:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) {
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d004      	beq.n	8005998 <CO_LEDs_process+0x248>
            rd |= CO_LED_flicker;
 800598e:	7ffb      	ldrb	r3, [r7, #31]
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	77fb      	strb	r3, [r7, #31]
 8005996:	e003      	b.n	80059a0 <CO_LEDs_process+0x250>
        } else {
            gr |= CO_LED_flicker;
 8005998:	7fbb      	ldrb	r3, [r7, #30]
 800599a:	f043 0301 	orr.w	r3, r3, #1
 800599e:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000U) {
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80059a8:	4293      	cmp	r3, r2
 80059aa:	f63f aee6 	bhi.w	800577a <CO_LEDs_process+0x2a>
        }

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d077      	beq.n	8005aa4 <CO_LEDs_process+0x354>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if (ErrCANbusOff) {
 80059b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d002      	beq.n	80059c0 <CO_LEDs_process+0x270>
            rd_co = 1;
 80059ba:	2301      	movs	r3, #1
 80059bc:	75fb      	strb	r3, [r7, #23]
 80059be:	e032      	b.n	8005a26 <CO_LEDs_process+0x2d6>
        } else if (NMTstate == CO_NMT_INITIALIZING) {
 80059c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <CO_LEDs_process+0x282>
            rd_co = rd & CO_LED_flicker;
 80059c8:	7ffb      	ldrb	r3, [r7, #31]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	75fb      	strb	r3, [r7, #23]
 80059d0:	e029      	b.n	8005a26 <CO_LEDs_process+0x2d6>
        } else if (ErrRpdo) {
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d004      	beq.n	80059e2 <CO_LEDs_process+0x292>
            rd_co = rd & CO_LED_flash_4;
 80059d8:	7ffb      	ldrb	r3, [r7, #31]
 80059da:	f003 0320 	and.w	r3, r3, #32
 80059de:	75fb      	strb	r3, [r7, #23]
 80059e0:	e021      	b.n	8005a26 <CO_LEDs_process+0x2d6>
        } else if (ErrSync) {
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d004      	beq.n	80059f2 <CO_LEDs_process+0x2a2>
            rd_co = rd & CO_LED_flash_3;
 80059e8:	7ffb      	ldrb	r3, [r7, #31]
 80059ea:	f003 0310 	and.w	r3, r3, #16
 80059ee:	75fb      	strb	r3, [r7, #23]
 80059f0:	e019      	b.n	8005a26 <CO_LEDs_process+0x2d6>
        } else if (ErrHbCons) {
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d004      	beq.n	8005a02 <CO_LEDs_process+0x2b2>
            rd_co = rd & CO_LED_flash_2;
 80059f8:	7ffb      	ldrb	r3, [r7, #31]
 80059fa:	f003 0308 	and.w	r3, r3, #8
 80059fe:	75fb      	strb	r3, [r7, #23]
 8005a00:	e011      	b.n	8005a26 <CO_LEDs_process+0x2d6>
        } else if (ErrCANbusWarn) {
 8005a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <CO_LEDs_process+0x2c2>
            rd_co = rd & CO_LED_flash_1;
 8005a08:	7ffb      	ldrb	r3, [r7, #31]
 8005a0a:	f003 0304 	and.w	r3, r3, #4
 8005a0e:	75fb      	strb	r3, [r7, #23]
 8005a10:	e009      	b.n	8005a26 <CO_LEDs_process+0x2d6>
        } else if (ErrOther) {
 8005a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d004      	beq.n	8005a22 <CO_LEDs_process+0x2d2>
            rd_co = rd & CO_LED_blink;
 8005a18:	7ffb      	ldrb	r3, [r7, #31]
 8005a1a:	f003 0302 	and.w	r3, r3, #2
 8005a1e:	75fb      	strb	r3, [r7, #23]
 8005a20:	e001      	b.n	8005a26 <CO_LEDs_process+0x2d6>
        } else {
            rd_co = 0;
 8005a22:	2300      	movs	r3, #0
 8005a24:	75fb      	strb	r3, [r7, #23]
        }

        /* CANopen green RUN LED */
        if (LSSconfig) {
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d004      	beq.n	8005a36 <CO_LEDs_process+0x2e6>
            gr_co = gr & CO_LED_flicker;
 8005a2c:	7fbb      	ldrb	r3, [r7, #30]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	75bb      	strb	r3, [r7, #22]
 8005a34:	e022      	b.n	8005a7c <CO_LEDs_process+0x32c>
        } else if (firmwareDownload) {
 8005a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d004      	beq.n	8005a46 <CO_LEDs_process+0x2f6>
            gr_co = gr & CO_LED_flash_3;
 8005a3c:	7fbb      	ldrb	r3, [r7, #30]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	75bb      	strb	r3, [r7, #22]
 8005a44:	e01a      	b.n	8005a7c <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_STOPPED) {
 8005a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d104      	bne.n	8005a58 <CO_LEDs_process+0x308>
            gr_co = gr & CO_LED_flash_1;
 8005a4e:	7fbb      	ldrb	r3, [r7, #30]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	75bb      	strb	r3, [r7, #22]
 8005a56:	e011      	b.n	8005a7c <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_PRE_OPERATIONAL) {
 8005a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5c:	2b7f      	cmp	r3, #127	; 0x7f
 8005a5e:	d104      	bne.n	8005a6a <CO_LEDs_process+0x31a>
            gr_co = gr & CO_LED_blink;
 8005a60:	7fbb      	ldrb	r3, [r7, #30]
 8005a62:	f003 0302 	and.w	r3, r3, #2
 8005a66:	75bb      	strb	r3, [r7, #22]
 8005a68:	e008      	b.n	8005a7c <CO_LEDs_process+0x32c>
        } else if (NMTstate == CO_NMT_OPERATIONAL) {
 8005a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6e:	2b05      	cmp	r3, #5
 8005a70:	d102      	bne.n	8005a78 <CO_LEDs_process+0x328>
            gr_co = 1;
 8005a72:	2301      	movs	r3, #1
 8005a74:	75bb      	strb	r3, [r7, #22]
 8005a76:	e001      	b.n	8005a7c <CO_LEDs_process+0x32c>
        } else {
            gr_co = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	75bb      	strb	r3, [r7, #22]
        }

        if (rd_co != 0U) {
 8005a7c:	7dfb      	ldrb	r3, [r7, #23]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d003      	beq.n	8005a8a <CO_LEDs_process+0x33a>
            rd |= CO_LED_CANopen;
 8005a82:	7ffb      	ldrb	r3, [r7, #31]
 8005a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a88:	77fb      	strb	r3, [r7, #31]
        }
        if (gr_co != 0U) {
 8005a8a:	7dbb      	ldrb	r3, [r7, #22]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d003      	beq.n	8005a98 <CO_LEDs_process+0x348>
            gr |= CO_LED_CANopen;
 8005a90:	7fbb      	ldrb	r3, [r7, #30]
 8005a92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005a96:	77bb      	strb	r3, [r7, #30]
        }
        LEDs->LEDred = rd;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	7ffa      	ldrb	r2, [r7, #31]
 8005a9c:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	7fba      	ldrb	r2, [r7, #30]
 8005aa2:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8005aa4:	bf00      	nop
 8005aa6:	3724      	adds	r7, #36	; 0x24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <CO_LSSslave_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN message with correct identifier
 * will be received. For more information and description of parameters see file CO_driver.h.
 */
static void
CO_LSSslave_receive(void* object, void* msg) {
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b090      	sub	sp, #64	; 0x40
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t* LSSslave = (CO_LSSslave_t*)object;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	791b      	ldrb	r3, [r3, #4]
 8005ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if ((DLC == 8U) && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8005ac6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005aca:	2b08      	cmp	r3, #8
 8005acc:	f040 814f 	bne.w	8005d6e <CO_LSSslave_receive+0x2be>
 8005ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f040 814a 	bne.w	8005d6e <CO_LSSslave_receive+0x2be>
        bool_t request_LSSslave_process = false;
 8005ada:	2300      	movs	r3, #0
 8005adc:	63fb      	str	r3, [r7, #60]	; 0x3c
        const uint8_t* data = CO_CANrxMsg_readData(msg);
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	3305      	adds	r3, #5
 8005ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
        uint8_t cs = data[0];
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 8005aec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005af0:	2b04      	cmp	r3, #4
 8005af2:	d12d      	bne.n	8005b50 <CO_LSSslave_receive+0xa0>
            uint8_t mode = data[1];
 8005af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005af6:	3301      	adds	r3, #1
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 8005afc:	7ffb      	ldrb	r3, [r7, #31]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d002      	beq.n	8005b08 <CO_LSSslave_receive+0x58>
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d020      	beq.n	8005b48 <CO_LSSslave_receive+0x98>
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
                    break;
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
                default:
                    /* none */
                    break;
 8005b06:	e12c      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
                    if ((LSSslave->lssState == CO_LSS_STATE_CONFIGURATION)
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	7c1b      	ldrb	r3, [r3, #16]
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d110      	bne.n	8005b32 <CO_LSSslave_receive+0x82>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b16:	2bff      	cmp	r3, #255	; 0xff
 8005b18:	d10b      	bne.n	8005b32 <CO_LSSslave_receive+0x82>
                        && (*LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2bff      	cmp	r3, #255	; 0xff
 8005b22:	d006      	beq.n	8005b32 <CO_LSSslave_receive+0x82>
                        LSSslave->service = cs;
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005b2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b34:	2200      	movs	r2, #0
 8005b36:	741a      	strb	r2, [r3, #16]
                    (void)memset(&LSSslave->lssSelect, 0, sizeof(LSSslave->lssSelect));
 8005b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3a:	3314      	adds	r3, #20
 8005b3c:	2210      	movs	r2, #16
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4618      	mov	r0, r3
 8005b42:	f009 f911 	bl	800ed68 <memset>
                    break;
 8005b46:	e10c      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
                case CO_LSS_STATE_CONFIGURATION: LSSslave->lssState = CO_LSS_STATE_CONFIGURATION; break;
 8005b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	741a      	strb	r2, [r3, #16]
 8005b4e:	e108      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
            }
        } else if (LSSslave->lssState == CO_LSS_STATE_WAITING) {
 8005b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b52:	7c1b      	ldrb	r3, [r3, #16]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f040 80f0 	bne.w	8005d3a <CO_LSSslave_receive+0x28a>
            switch (cs) {
 8005b5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005b5e:	3b40      	subs	r3, #64	; 0x40
 8005b60:	2b11      	cmp	r3, #17
 8005b62:	f200 80f9 	bhi.w	8005d58 <CO_LSSslave_receive+0x2a8>
 8005b66:	a201      	add	r2, pc, #4	; (adr r2, 8005b6c <CO_LSSslave_receive+0xbc>)
 8005b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6c:	08005bb5 	.word	0x08005bb5
 8005b70:	08005bc5 	.word	0x08005bc5
 8005b74:	08005bd5 	.word	0x08005bd5
 8005b78:	08005be5 	.word	0x08005be5
 8005b7c:	08005d59 	.word	0x08005d59
 8005b80:	08005d59 	.word	0x08005d59
 8005b84:	08005d59 	.word	0x08005d59
 8005b88:	08005d59 	.word	0x08005d59
 8005b8c:	08005d59 	.word	0x08005d59
 8005b90:	08005d59 	.word	0x08005d59
 8005b94:	08005d59 	.word	0x08005d59
 8005b98:	08005d59 	.word	0x08005d59
 8005b9c:	08005d59 	.word	0x08005d59
 8005ba0:	08005d59 	.word	0x08005d59
 8005ba4:	08005d59 	.word	0x08005d59
 8005ba8:	08005d59 	.word	0x08005d59
 8005bac:	08005d59 	.word	0x08005d59
 8005bb0:	08005c41 	.word	0x08005c41
                case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	61bb      	str	r3, [r7, #24]
                    LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8005bbc:	69ba      	ldr	r2, [r7, #24]
 8005bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc0:	615a      	str	r2, [r3, #20]
                    break;
 8005bc2:	e0ce      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	617b      	str	r3, [r7, #20]
                    LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bd0:	619a      	str	r2, [r3, #24]
                    break;
 8005bd2:	e0c6      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_REV: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	613b      	str	r3, [r7, #16]
                    LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005be0:	61da      	str	r2, [r3, #28]
                    break;
 8005be2:	e0be      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
                }
                case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                    uint32_t valSw;
                    (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005be6:	3301      	adds	r3, #1
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]
                    LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 8005bec:	68fa      	ldr	r2, [r7, #12]
 8005bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf0:	621a      	str	r2, [r3, #32]

                    if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress, LSSslave->lssSelect)) {
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf4:	685a      	ldr	r2, [r3, #4]
 8005bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	f040 80ae 	bne.w	8005d5c <CO_LSSslave_receive+0x2ac>
 8005c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	f040 80a7 	bne.w	8005d5c <CO_LSSslave_receive+0x2ac>
 8005c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	429a      	cmp	r2, r3
 8005c18:	f040 80a0 	bne.w	8005d5c <CO_LSSslave_receive+0x2ac>
 8005c1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	f040 8099 	bne.w	8005d5c <CO_LSSslave_receive+0x2ac>
                        LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	741a      	strb	r2, [r3, #16]
                        LSSslave->service = cs;
 8005c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c32:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005c36:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
                    }
                    break;
 8005c3e:	e08d      	b.n	8005d5c <CO_LSSslave_receive+0x2ac>
                }
                case CO_LSS_IDENT_FASTSCAN: {
                    /* fastscan is only active on unconfigured nodes */
                    if ((*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8005c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2bff      	cmp	r3, #255	; 0xff
 8005c48:	f040 808a 	bne.w	8005d60 <CO_LSSslave_receive+0x2b0>
                        && (LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c52:	2bff      	cmp	r3, #255	; 0xff
 8005c54:	f040 8084 	bne.w	8005d60 <CO_LSSslave_receive+0x2b0>
                        uint8_t bitCheck = data[5];
 8005c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c5a:	3305      	adds	r3, #5
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                        uint8_t lssSub = data[6];
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	3306      	adds	r3, #6
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                        uint8_t lssNext = data[7];
 8005c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c6e:	3307      	adds	r3, #7
 8005c70:	781b      	ldrb	r3, [r3, #0]
 8005c72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                        uint32_t valSw;
                        uint32_t idNumber;
                        bool_t ack;

                        if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub)
 8005c76:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c7a:	2b1f      	cmp	r3, #31
 8005c7c:	d903      	bls.n	8005c86 <CO_LSSslave_receive+0x1d6>
 8005c7e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c82:	2b80      	cmp	r3, #128	; 0x80
 8005c84:	d16d      	bne.n	8005d62 <CO_LSSslave_receive+0x2b2>
 8005c86:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d869      	bhi.n	8005d62 <CO_LSSslave_receive+0x2b2>
                            || !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
 8005c8e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005c92:	2b03      	cmp	r3, #3
 8005c94:	d865      	bhi.n	8005d62 <CO_LSSslave_receive+0x2b2>
                            /* Invalid request */
                            break;
                        }

                        (void)memcpy((void*)(&valSw), (const void*)(&data[1]), sizeof(valSw));
 8005c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c98:	3301      	adds	r3, #1
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	60bb      	str	r3, [r7, #8]
                        idNumber = CO_SWAP_32(valSw);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	627b      	str	r3, [r7, #36]	; 0x24
                        ack = false;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	63bb      	str	r3, [r7, #56]	; 0x38

                        if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 8005ca6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005caa:	2b80      	cmp	r3, #128	; 0x80
 8005cac:	d10d      	bne.n	8005cca <CO_LSSslave_receive+0x21a>
                            /* Confirm, Reset */
                            ack = true;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                            (void)memset(&LSSslave->lssFastscan, 0, sizeof(LSSslave->lssFastscan));
 8005cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cbc:	3324      	adds	r3, #36	; 0x24
 8005cbe:	2210      	movs	r2, #16
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f009 f850 	bl	800ed68 <memset>
 8005cc8:	e02c      	b.n	8005d24 <CO_LSSslave_receive+0x274>
                        } else if (LSSslave->fastscanPos == lssSub) {
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005cd0:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d125      	bne.n	8005d24 <CO_LSSslave_receive+0x274>
                            uint32_t mask = 0xFFFFFFFFU << bitCheck;
 8005cd8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce4:	623b      	str	r3, [r7, #32]

                            if ((LSSslave->lssAddress.addr[lssSub] & mask) == (idNumber & mask)) {
 8005ce6:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8005cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005cec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf2:	405a      	eors	r2, r3
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	4013      	ands	r3, r2
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d113      	bne.n	8005d24 <CO_LSSslave_receive+0x274>
                                /* all requested bits match */
                                ack = true;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	63bb      	str	r3, [r7, #56]	; 0x38
                                LSSslave->fastscanPos = lssNext;
 8005d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d02:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005d06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                                if ((bitCheck == 0U) && (lssNext < lssSub)) {
 8005d0a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d108      	bne.n	8005d24 <CO_LSSslave_receive+0x274>
 8005d12:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8005d16:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8005d1a:	429a      	cmp	r2, r3
 8005d1c:	d202      	bcs.n	8005d24 <CO_LSSslave_receive+0x274>
                                    /* complete match, enter configuration state */
                                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d20:	2201      	movs	r2, #1
 8005d22:	741a      	strb	r2, [r3, #16]
                                }
                            }
                        } else { /* MISRA C 2004 14.10 */
                        }
                        if (ack) {
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d01a      	beq.n	8005d60 <CO_LSSslave_receive+0x2b0>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE_FASTSCAN_DIRECT_RESPOND) != 0
                            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                            (void)memset(&LSSslave->TXbuff->data[1], 0, sizeof(LSSslave->TXbuff->data) - 1U);
                            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                            LSSslave->service = cs;
 8005d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                            request_LSSslave_process = true;
 8005d34:	2301      	movs	r3, #1
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                        }
                    }
                    break;
 8005d38:	e012      	b.n	8005d60 <CO_LSSslave_receive+0x2b0>
                    /* none */
                    break;
                }
            }
        } else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            (void)memcpy((void*)(&LSSslave->CANdata[0]), (const void*)(&data[0]), sizeof(LSSslave->CANdata));
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	3349      	adds	r3, #73	; 0x49
 8005d3e:	2208      	movs	r2, #8
 8005d40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d42:	4618      	mov	r0, r3
 8005d44:	f009 f89b 	bl	800ee7e <memcpy>
            LSSslave->service = cs;
 8005d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8005d4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8005d52:	2301      	movs	r3, #1
 8005d54:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d56:	e004      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
                    break;
 8005d58:	bf00      	nop
 8005d5a:	e002      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
                    break;
 8005d5c:	bf00      	nop
 8005d5e:	e000      	b.n	8005d62 <CO_LSSslave_receive+0x2b2>
                    break;
 8005d60:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8005d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <CO_LSSslave_receive+0x2be>
            CO_FLAG_SET(LSSslave->sendResponse);
 8005d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8005d6e:	bf00      	nop
 8005d70:	3740      	adds	r7, #64	; 0x40
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop

08005d78 <CO_LSSslave_init>:

CO_ReturnError_t
CO_LSSslave_init(CO_LSSslave_t* LSSslave, CO_LSS_address_t* lssAddress, uint16_t* pendingBitRate,
                 uint8_t* pendingNodeID, CO_CANmodule_t* CANdevRx, uint16_t CANdevRxIdx, uint16_t CANidLssMaster,
                 CO_CANmodule_t* CANdevTx, uint16_t CANdevTxIdx, uint16_t CANidLssSlave) {
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b08a      	sub	sp, #40	; 0x28
 8005d7c:	af04      	add	r7, sp, #16
 8005d7e:	60f8      	str	r0, [r7, #12]
 8005d80:	60b9      	str	r1, [r7, #8]
 8005d82:	607a      	str	r2, [r7, #4]
 8005d84:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8005d86:	2300      	movs	r3, #0
 8005d88:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if ((LSSslave == NULL) || (pendingBitRate == NULL) || (pendingNodeID == NULL) || (CANdevRx == NULL)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d018      	beq.n	8005dc2 <CO_LSSslave_init+0x4a>
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d015      	beq.n	8005dc2 <CO_LSSslave_init+0x4a>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d012      	beq.n	8005dc2 <CO_LSSslave_init+0x4a>
 8005d9c:	6a3b      	ldr	r3, [r7, #32]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d00f      	beq.n	8005dc2 <CO_LSSslave_init+0x4a>
        || (CANdevTx == NULL) || !CO_LSS_NODE_ID_VALID(*pendingNodeID)) {
 8005da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00c      	beq.n	8005dc2 <CO_LSSslave_init+0x4a>
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d004      	beq.n	8005dba <CO_LSSslave_init+0x42>
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	b25b      	sxtb	r3, r3
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	da06      	bge.n	8005dc8 <CO_LSSslave_init+0x50>
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2bff      	cmp	r3, #255	; 0xff
 8005dc0:	d002      	beq.n	8005dc8 <CO_LSSslave_init+0x50>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8005dc6:	e046      	b.n	8005e56 <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    (void)memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 8005dc8:	2274      	movs	r2, #116	; 0x74
 8005dca:	2100      	movs	r1, #0
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f008 ffcb 	bl	800ed68 <memset>

    /* Configure object variables */
    (void)memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2210      	movs	r2, #16
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f009 f850 	bl	800ee7e <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	781a      	ldrb	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(CANdevRx, CANdevRxIdx, CANidLssMaster, 0x7FF, false, (void*)LSSslave, CO_LSSslave_receive);
 8005e08:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8005e0a:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8005e0c:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <CO_LSSslave_init+0xe8>)
 8005e0e:	9302      	str	r3, [sp, #8]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	2300      	movs	r3, #0
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005e1c:	6a38      	ldr	r0, [r7, #32]
 8005e1e:	f001 fab3 	bl	8007388 <CO_CANrxBufferInit>
 8005e22:	4603      	mov	r3, r0
 8005e24:	75fb      	strb	r3, [r7, #23]

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e2a:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(CANdevTx, CANdevTxIdx, CANidLssSlave, false, 8, false);
 8005e2c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005e2e:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 8005e30:	2300      	movs	r3, #0
 8005e32:	9301      	str	r3, [sp, #4]
 8005e34:	2308      	movs	r3, #8
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005e3c:	f001 fb02 	bl	8007444 <CO_CANtxBufferInit>
 8005e40:	4602      	mov	r2, r0
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	671a      	str	r2, [r3, #112]	; 0x70

    if (LSSslave->TXbuff == NULL) {
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d101      	bne.n	8005e52 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8005e4e:	23ff      	movs	r3, #255	; 0xff
 8005e50:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8005e52:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3718      	adds	r7, #24
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	08005ab1 	.word	0x08005ab1

08005e64 <CO_LSSslave_process>:
        LSSslave->pFunctLSScfgStore = pFunctLSScfgStore;
    }
}

bool_t
CO_LSSslave_process(CO_LSSslave_t* LSSslave) {
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b08c      	sub	sp, #48	; 0x30
 8005e68:	af00      	add	r7, sp, #0
 8005e6a:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	f000 8203 	beq.w	8006280 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        (void)memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e82:	3305      	adds	r3, #5
 8005e84:	2208      	movs	r2, #8
 8005e86:	2100      	movs	r1, #0
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f008 ff6d 	bl	800ed68 <memset>

        switch (LSSslave->service) {
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005e94:	3b04      	subs	r3, #4
 8005e96:	2b5a      	cmp	r3, #90	; 0x5a
 8005e98:	f200 81dd 	bhi.w	8006256 <CO_LSSslave_process+0x3f2>
 8005e9c:	a201      	add	r2, pc, #4	; (adr r2, 8005ea4 <CO_LSSslave_process+0x40>)
 8005e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea2:	bf00      	nop
 8005ea4:	08006011 	.word	0x08006011
 8005ea8:	08006257 	.word	0x08006257
 8005eac:	08006257 	.word	0x08006257
 8005eb0:	08006257 	.word	0x08006257
 8005eb4:	08006257 	.word	0x08006257
 8005eb8:	08006257 	.word	0x08006257
 8005ebc:	08006257 	.word	0x08006257
 8005ec0:	08006257 	.word	0x08006257
 8005ec4:	08006257 	.word	0x08006257
 8005ec8:	08006257 	.word	0x08006257
 8005ecc:	08006257 	.word	0x08006257
 8005ed0:	08006257 	.word	0x08006257
 8005ed4:	08006257 	.word	0x08006257
 8005ed8:	08006025 	.word	0x08006025
 8005edc:	08006257 	.word	0x08006257
 8005ee0:	08006073 	.word	0x08006073
 8005ee4:	08006257 	.word	0x08006257
 8005ee8:	0800610f 	.word	0x0800610f
 8005eec:	08006257 	.word	0x08006257
 8005ef0:	0800614d 	.word	0x0800614d
 8005ef4:	08006257 	.word	0x08006257
 8005ef8:	08006257 	.word	0x08006257
 8005efc:	08006257 	.word	0x08006257
 8005f00:	08006257 	.word	0x08006257
 8005f04:	08006257 	.word	0x08006257
 8005f08:	08006257 	.word	0x08006257
 8005f0c:	08006257 	.word	0x08006257
 8005f10:	08006257 	.word	0x08006257
 8005f14:	08006257 	.word	0x08006257
 8005f18:	08006257 	.word	0x08006257
 8005f1c:	08006257 	.word	0x08006257
 8005f20:	08006257 	.word	0x08006257
 8005f24:	08006257 	.word	0x08006257
 8005f28:	08006257 	.word	0x08006257
 8005f2c:	08006257 	.word	0x08006257
 8005f30:	08006257 	.word	0x08006257
 8005f34:	08006257 	.word	0x08006257
 8005f38:	08006257 	.word	0x08006257
 8005f3c:	08006257 	.word	0x08006257
 8005f40:	08006257 	.word	0x08006257
 8005f44:	08006257 	.word	0x08006257
 8005f48:	08006257 	.word	0x08006257
 8005f4c:	08006257 	.word	0x08006257
 8005f50:	08006257 	.word	0x08006257
 8005f54:	08006257 	.word	0x08006257
 8005f58:	08006257 	.word	0x08006257
 8005f5c:	08006257 	.word	0x08006257
 8005f60:	08006257 	.word	0x08006257
 8005f64:	08006257 	.word	0x08006257
 8005f68:	08006257 	.word	0x08006257
 8005f6c:	08006257 	.word	0x08006257
 8005f70:	08006257 	.word	0x08006257
 8005f74:	08006257 	.word	0x08006257
 8005f78:	08006257 	.word	0x08006257
 8005f7c:	08006257 	.word	0x08006257
 8005f80:	08006257 	.word	0x08006257
 8005f84:	08006257 	.word	0x08006257
 8005f88:	08006257 	.word	0x08006257
 8005f8c:	08006257 	.word	0x08006257
 8005f90:	08006257 	.word	0x08006257
 8005f94:	08006257 	.word	0x08006257
 8005f98:	08006257 	.word	0x08006257
 8005f9c:	08006257 	.word	0x08006257
 8005fa0:	08006017 	.word	0x08006017
 8005fa4:	08006257 	.word	0x08006257
 8005fa8:	08006257 	.word	0x08006257
 8005fac:	08006257 	.word	0x08006257
 8005fb0:	08006257 	.word	0x08006257
 8005fb4:	08006257 	.word	0x08006257
 8005fb8:	08006257 	.word	0x08006257
 8005fbc:	08006257 	.word	0x08006257
 8005fc0:	08006257 	.word	0x08006257
 8005fc4:	08006257 	.word	0x08006257
 8005fc8:	08006257 	.word	0x08006257
 8005fcc:	08006257 	.word	0x08006257
 8005fd0:	08006257 	.word	0x08006257
 8005fd4:	08006257 	.word	0x08006257
 8005fd8:	08006249 	.word	0x08006249
 8005fdc:	08006257 	.word	0x08006257
 8005fe0:	08006257 	.word	0x08006257
 8005fe4:	08006257 	.word	0x08006257
 8005fe8:	08006257 	.word	0x08006257
 8005fec:	08006257 	.word	0x08006257
 8005ff0:	08006257 	.word	0x08006257
 8005ff4:	08006257 	.word	0x08006257
 8005ff8:	08006257 	.word	0x08006257
 8005ffc:	080061a3 	.word	0x080061a3
 8006000:	080061c5 	.word	0x080061c5
 8006004:	080061e7 	.word	0x080061e7
 8006008:	08006209 	.word	0x08006209
 800600c:	0800622b 	.word	0x0800622b
            case CO_LSS_SWITCH_STATE_GLOBAL: {
                /* Node-Id was unconfigured before, now it is configured,
                 * enter the NMT Reset communication autonomously. */
                resetCommunication = true;
 8006010:	2301      	movs	r3, #1
 8006012:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8006014:	e126      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800601a:	2244      	movs	r2, #68	; 0x44
 800601c:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 800601e:	2301      	movs	r3, #1
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006022:	e11f      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_NODE_ID: {
                nid = LSSslave->CANdata[1];
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800602a:	74fb      	strb	r3, [r7, #19]
                errorCode = CO_LSS_CFG_NODE_ID_OK;
 800602c:	2300      	movs	r3, #0
 800602e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (CO_LSS_NODE_ID_VALID(nid)) {
 8006032:	7cfb      	ldrb	r3, [r7, #19]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d003      	beq.n	8006040 <CO_LSSslave_process+0x1dc>
 8006038:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800603c:	2b00      	cmp	r3, #0
 800603e:	da02      	bge.n	8006046 <CO_LSSslave_process+0x1e2>
 8006040:	7cfb      	ldrb	r3, [r7, #19]
 8006042:	2bff      	cmp	r3, #255	; 0xff
 8006044:	d104      	bne.n	8006050 <CO_LSSslave_process+0x1ec>
                    *LSSslave->pendingNodeID = nid;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604a:	7cfa      	ldrb	r2, [r7, #19]
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	e002      	b.n	8006056 <CO_LSSslave_process+0x1f2>
                } else {
                    errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8006050:	2301      	movs	r3, #1
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800605a:	687a      	ldr	r2, [r7, #4]
 800605c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006060:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006066:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800606a:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 800606c:	2301      	movs	r3, #1
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006070:	e0f8      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006076:	2b00      	cmp	r3, #0
 8006078:	f000 80ef 	beq.w	800625a <CO_LSSslave_process+0x3f6>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                tableSelector = LSSslave->CANdata[1];
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006082:	777b      	strb	r3, [r7, #29]
                tableIndex = LSSslave->CANdata[2];
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800608a:	773b      	strb	r3, [r7, #28]
                errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 800608c:	2300      	movs	r3, #0
 800608e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006098:	7f7b      	ldrb	r3, [r7, #29]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d121      	bne.n	80060e2 <CO_LSSslave_process+0x27e>
 800609e:	7f3b      	ldrb	r3, [r7, #28]
 80060a0:	2b05      	cmp	r3, #5
 80060a2:	d01e      	beq.n	80060e2 <CO_LSSslave_process+0x27e>
 80060a4:	7f3b      	ldrb	r3, [r7, #28]
 80060a6:	2b09      	cmp	r3, #9
 80060a8:	d81b      	bhi.n	80060e2 <CO_LSSslave_process+0x27e>
                    uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 80060aa:	7f3b      	ldrb	r3, [r7, #28]
 80060ac:	4a77      	ldr	r2, [pc, #476]	; (800628c <CO_LSSslave_process+0x428>)
 80060ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b2:	837b      	strh	r3, [r7, #26]
                    bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(LSSslave->functLSScheckBitRateObject,
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80060bc:	8b79      	ldrh	r1, [r7, #26]
 80060be:	4610      	mov	r0, r2
 80060c0:	4798      	blx	r3
 80060c2:	6178      	str	r0, [r7, #20]
                                                                                bit);

                    if (bit_rate_supported) {
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d004      	beq.n	80060d4 <CO_LSSslave_process+0x270>
                        *LSSslave->pendingBitRate = bit;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	8b7a      	ldrh	r2, [r7, #26]
 80060d0:	801a      	strh	r2, [r3, #0]
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80060d2:	e009      	b.n	80060e8 <CO_LSSslave_process+0x284>
                    } else {
                        errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 80060d4:	23ff      	movs	r3, #255	; 0xff
 80060d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                        errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                if ((tableSelector == 0U) && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 80060e0:	e002      	b.n	80060e8 <CO_LSSslave_process+0x284>
                    }
                } else {
                    /* we currently only support CiA301 bit timing table */
                    errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 80060e2:	2301      	movs	r3, #1
 80060e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ec:	687a      	ldr	r2, [r7, #4]
 80060ee:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80060f2:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060f8:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80060fc:	719a      	strb	r2, [r3, #6]
                LSSslave->TXbuff->data[2] = errorCodeManuf;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006102:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8006106:	71da      	strb	r2, [r3, #7]
                CANsend = true;
 8006108:	2301      	movs	r3, #1
 800610a:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 800610c:	e0aa      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
                if (LSSslave->pFunctLSScheckBitRate == NULL) {
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 80a3 	beq.w	800625e <CO_LSSslave_process+0x3fa>
                    /* setting bit timing is not supported. Drop request */
                    break;
                }

                /* notify application */
                if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800611c:	2b00      	cmp	r3, #0
 800611e:	f000 80a0 	beq.w	8006262 <CO_LSSslave_process+0x3fe>
                    uint16_t delay = ((uint16_t)LSSslave->CANdata[2]) << 8;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006128:	b29b      	uxth	r3, r3
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	83fb      	strh	r3, [r7, #30]
                    delay |= LSSslave->CANdata[1];
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006134:	b29a      	uxth	r2, r3
 8006136:	8bfb      	ldrh	r3, [r7, #30]
 8006138:	4313      	orrs	r3, r2
 800613a:	83fb      	strh	r3, [r7, #30]
                    LSSslave->pFunctLSSactivateBitRate(LSSslave->functLSSactivateBitRateObject, delay);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006144:	8bf9      	ldrh	r1, [r7, #30]
 8006146:	4610      	mov	r0, r2
 8006148:	4798      	blx	r3
                }
                break;
 800614a:	e08a      	b.n	8006262 <CO_LSSslave_process+0x3fe>
            }
            case CO_LSS_CFG_STORE: {
                errorCode = CO_LSS_CFG_STORE_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

                if (LSSslave->pFunctLSScfgStore == NULL) {
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006156:	2b00      	cmp	r3, #0
 8006158:	d103      	bne.n	8006162 <CO_LSSslave_process+0x2fe>
                    /* storing is not supported. Reply error */
                    errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006160:	e011      	b.n	8006186 <CO_LSSslave_process+0x322>
                } else {
                    bool_t result;
                    /* Store "pending" to "persistent" */
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	6e90      	ldr	r0, [r2, #104]	; 0x68
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800616e:	7811      	ldrb	r1, [r2, #0]
                                                         *LSSslave->pendingBitRate);
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	6b92      	ldr	r2, [r2, #56]	; 0x38
                    result = LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject, *LSSslave->pendingNodeID,
 8006174:	8812      	ldrh	r2, [r2, #0]
 8006176:	4798      	blx	r3
 8006178:	6238      	str	r0, [r7, #32]
                    if (!result) {
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d102      	bne.n	8006186 <CO_LSSslave_process+0x322>
                        errorCode = CO_LSS_CFG_STORE_FAILED;
 8006180:	2302      	movs	r3, #2
 8006182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    }
                }

                /* send confirmation */
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006190:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = errorCode;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800619a:	719a      	strb	r2, [r3, #6]
                /* we do not use spec-error, always 0 */
                CANsend = true;
 800619c:	2301      	movs	r3, #1
 800619e:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80061a0:	e060      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_VENDOR: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80061ac:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b8:	3306      	adds	r3, #6
 80061ba:	68fa      	ldr	r2, [r7, #12]
 80061bc:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80061be:	2301      	movs	r3, #1
 80061c0:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80061c2:	e04f      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_PRODUCT: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80061ce:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061da:	3306      	adds	r3, #6
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	601a      	str	r2, [r3, #0]
                CANsend = true;
 80061e0:	2301      	movs	r3, #1
 80061e2:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 80061e4:	e03e      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_REV: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 80061f0:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	689b      	ldr	r3, [r3, #8]
 80061f6:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061fc:	3306      	adds	r3, #6
 80061fe:	68fa      	ldr	r2, [r7, #12]
 8006200:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8006202:	2301      	movs	r3, #1
 8006204:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006206:	e02d      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_SERIAL: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006212:	715a      	strb	r2, [r3, #5]
                valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	60fb      	str	r3, [r7, #12]
                (void)memcpy((void*)(&LSSslave->TXbuff->data[1]), (const void*)(&valSw), sizeof(valSw));
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	3306      	adds	r3, #6
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	601a      	str	r2, [r3, #0]
                CANsend = true;
 8006224:	2301      	movs	r3, #1
 8006226:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006228:	e01c      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_INQUIRE_NODE_ID: {
                LSSslave->TXbuff->data[0] = LSSslave->service;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800622e:	687a      	ldr	r2, [r7, #4]
 8006230:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006234:	715a      	strb	r2, [r3, #5]
                LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8006240:	719a      	strb	r2, [r3, #6]
                CANsend = true;
 8006242:	2301      	movs	r3, #1
 8006244:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006246:	e00d      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800624c:	224f      	movs	r2, #79	; 0x4f
 800624e:	715a      	strb	r2, [r3, #5]
                CANsend = true;
 8006250:	2301      	movs	r3, #1
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
                break;
 8006254:	e006      	b.n	8006264 <CO_LSSslave_process+0x400>
            }
            default: {
                /* none */
                break;
 8006256:	bf00      	nop
 8006258:	e004      	b.n	8006264 <CO_LSSslave_process+0x400>
                    break;
 800625a:	bf00      	nop
 800625c:	e002      	b.n	8006264 <CO_LSSslave_process+0x400>
                    break;
 800625e:	bf00      	nop
 8006260:	e000      	b.n	8006264 <CO_LSSslave_process+0x400>
                break;
 8006262:	bf00      	nop
            }
        }

        if (CANsend) {
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d007      	beq.n	800627a <CO_LSSslave_process+0x416>
            (void)CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006272:	4619      	mov	r1, r3
 8006274:	4610      	mov	r0, r2
 8006276:	f001 f95f 	bl	8007538 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2200      	movs	r2, #0
 800627e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8006280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006282:	4618      	mov	r0, r3
 8006284:	3730      	adds	r7, #48	; 0x30
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	0800f82c 	.word	0x0800f82c

08006290 <CO_isError>:
CO_isError(CO_EM_t* em, const uint8_t errorBit) {
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	08db      	lsrs	r3, r3, #3
 80062a0:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	f003 0307 	and.w	r3, r3, #7
 80062a8:	2201      	movs	r2, #1
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	73bb      	strb	r3, [r7, #14]
               : false;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d00a      	beq.n	80062cc <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8U)
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
 80062b8:	2b09      	cmp	r3, #9
 80062ba:	d807      	bhi.n	80062cc <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0)
 80062bc:	7bfb      	ldrb	r3, [r7, #15]
 80062be:	687a      	ldr	r2, [r7, #4]
 80062c0:	5cd2      	ldrb	r2, [r2, r3]
 80062c2:	7bbb      	ldrb	r3, [r7, #14]
 80062c4:	4013      	ands	r3, r2
 80062c6:	b2db      	uxtb	r3, r3
               : false;
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <CO_isError+0x40>
 80062cc:	2301      	movs	r3, #1
 80062ce:	e000      	b.n	80062d2 <CO_isError+0x42>
 80062d0:	2300      	movs	r3, #0
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr

080062de <CO_getErrorRegister>:
CO_getErrorRegister(CO_EM_t* em) {
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d007      	beq.n	80062fc <CO_getErrorRegister+0x1e>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <CO_getErrorRegister+0x1e>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	e000      	b.n	80062fe <CO_getErrorRegister+0x20>
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <CO_NMT_getInternalState>:
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t
CO_NMT_getInternalState(CO_NMT_t* NMT) {
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <CO_NMT_getInternalState+0x16>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f993 3000 	ldrsb.w	r3, [r3]
 800631e:	e000      	b.n	8006322 <CO_NMT_getInternalState+0x18>
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr

0800632e <CO_LSSslave_getState>:
 *
 * @param LSSslave This object.
 * @return @ref CO_LSS_STATE_state
 */
static inline uint8_t
CO_LSSslave_getState(CO_LSSslave_t* LSSslave) {
 800632e:	b480      	push	{r7}
 8006330:	b083      	sub	sp, #12
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d002      	beq.n	8006342 <CO_LSSslave_getState+0x14>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	7c1b      	ldrb	r3, [r3, #16]
 8006340:	e000      	b.n	8006344 <CO_LSSslave_getState+0x16>
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <CO_new>:
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t*
CO_new(CO_config_t* config, uint32_t* heapMemoryUsed) {
 8006350:	b580      	push	{r7, lr}
 8006352:	b086      	sub	sp, #24
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
    CO_t* co = NULL;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t* coFinal = NULL;
 800635e:	2300      	movs	r3, #0
 8006360:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8006362:	2300      	movs	r3, #0
 8006364:	613b      	str	r3, [r7, #16]
#else
        (void)config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1U, sizeof(*co));
 8006366:	2140      	movs	r1, #64	; 0x40
 8006368:	2001      	movs	r0, #1
 800636a:	f008 f947 	bl	800e5fc <calloc>
 800636e:	4603      	mov	r3, r0
 8006370:	60fb      	str	r3, [r7, #12]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 80ef 	beq.w	8006558 <CO_new+0x208>
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	3340      	adds	r3, #64	; 0x40
 800637e:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1U) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006380:	212c      	movs	r1, #44	; 0x2c
 8006382:	2001      	movs	r0, #1
 8006384:	f008 f93a 	bl	800e5fc <calloc>
 8006388:	4603      	mov	r3, r0
 800638a:	461a      	mov	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	611a      	str	r2, [r3, #16]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f000 80df 	beq.w	8006558 <CO_new+0x208>
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	332c      	adds	r3, #44	; 0x2c
 800639e:	613b      	str	r3, [r7, #16]
        }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1U) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 80063a0:	2308      	movs	r3, #8
 80063a2:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 80063a4:	2130      	movs	r1, #48	; 0x30
 80063a6:	2001      	movs	r0, #1
 80063a8:	f008 f928 	bl	800e5fc <calloc>
 80063ac:	4603      	mov	r3, r0
 80063ae:	461a      	mov	r2, r3
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	615a      	str	r2, [r3, #20]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	695b      	ldr	r3, [r3, #20]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 80cd 	beq.w	8006558 <CO_new+0x208>
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3330      	adds	r3, #48	; 0x30
 80063c2:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 80063c4:	7afb      	ldrb	r3, [r7, #11]
 80063c6:	2110      	movs	r1, #16
 80063c8:	4618      	mov	r0, r3
 80063ca:	f008 f917 	bl	800e5fc <calloc>
 80063ce:	4603      	mov	r3, r0
 80063d0:	461a      	mov	r2, r3
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	619a      	str	r2, [r3, #24]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	f000 80bc 	beq.w	8006558 <CO_new+0x208>
 80063e0:	7afb      	ldrb	r3, [r7, #11]
 80063e2:	011b      	lsls	r3, r3, #4
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	4413      	add	r3, r2
 80063e8:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1U) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 80063ea:	2150      	movs	r1, #80	; 0x50
 80063ec:	2001      	movs	r0, #1
 80063ee:	f008 f905 	bl	800e5fc <calloc>
 80063f2:	4603      	mov	r3, r0
 80063f4:	461a      	mov	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	61da      	str	r2, [r3, #28]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	69db      	ldr	r3, [r3, #28]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 80aa 	beq.w	8006558 <CO_new+0x208>
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	3350      	adds	r3, #80	; 0x50
 8006408:	613b      	str	r3, [r7, #16]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
#endif
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1U;
 800640a:	2311      	movs	r3, #17
 800640c:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2U) {
 800640e:	7abb      	ldrb	r3, [r7, #10]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d912      	bls.n	800643a <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006414:	7abb      	ldrb	r3, [r7, #10]
 8006416:	2108      	movs	r1, #8
 8006418:	4618      	mov	r0, r3
 800641a:	f008 f8ef 	bl	800e5fc <calloc>
 800641e:	4603      	mov	r3, r0
 8006420:	461a      	mov	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	621a      	str	r2, [r3, #32]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	2b00      	cmp	r3, #0
 800642c:	f000 8094 	beq.w	8006558 <CO_new+0x208>
 8006430:	7abb      	ldrb	r3, [r7, #10]
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	693a      	ldr	r2, [r7, #16]
 8006436:	4413      	add	r3, r2
 8006438:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0U) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 800643a:	21ac      	movs	r1, #172	; 0xac
 800643c:	2001      	movs	r0, #1
 800643e:	f008 f8dd 	bl	800e5fc <calloc>
 8006442:	4603      	mov	r3, r0
 8006444:	461a      	mov	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	625a      	str	r2, [r3, #36]	; 0x24
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800644e:	2b00      	cmp	r3, #0
 8006450:	f000 8082 	beq.w	8006558 <CO_new+0x208>
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	33ac      	adds	r3, #172	; 0xac
 8006458:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1U) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 800645a:	212c      	movs	r1, #44	; 0x2c
 800645c:	2001      	movs	r0, #1
 800645e:	f008 f8cd 	bl	800e5fc <calloc>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	629a      	str	r2, [r3, #40]	; 0x28
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d072      	beq.n	8006558 <CO_new+0x208>
 8006472:	693b      	ldr	r3, [r7, #16]
 8006474:	332c      	adds	r3, #44	; 0x2c
 8006476:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1U) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006478:	215c      	movs	r1, #92	; 0x5c
 800647a:	2001      	movs	r0, #1
 800647c:	f008 f8be 	bl	800e5fc <calloc>
 8006480:	4603      	mov	r3, r0
 8006482:	461a      	mov	r2, r3
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	62da      	str	r2, [r3, #44]	; 0x2c
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648c:	2b00      	cmp	r3, #0
 800648e:	d063      	beq.n	8006558 <CO_new+0x208>
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	335c      	adds	r3, #92	; 0x5c
 8006494:	613b      	str	r3, [r7, #16]
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0U) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006496:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 800649a:	2001      	movs	r0, #1
 800649c:	f008 f8ae 	bl	800e5fc <calloc>
 80064a0:	4603      	mov	r3, r0
 80064a2:	461a      	mov	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	635a      	str	r2, [r3, #52]	; 0x34
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d053      	beq.n	8006558 <CO_new+0x208>
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80064b6:	613b      	str	r3, [r7, #16]
        }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
        if (CO_GET_CNT(LEDS) == 1U) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 80064b8:	210c      	movs	r1, #12
 80064ba:	2001      	movs	r0, #1
 80064bc:	f008 f89e 	bl	800e5fc <calloc>
 80064c0:	4603      	mov	r3, r0
 80064c2:	461a      	mov	r2, r3
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	639a      	str	r2, [r3, #56]	; 0x38
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d043      	beq.n	8006558 <CO_new+0x208>
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	330c      	adds	r3, #12
 80064d4:	613b      	str	r3, [r7, #16]

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1U) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 80064d6:	2174      	movs	r1, #116	; 0x74
 80064d8:	2001      	movs	r0, #1
 80064da:	f008 f88f 	bl	800e5fc <calloc>
 80064de:	4603      	mov	r3, r0
 80064e0:	461a      	mov	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	63da      	str	r2, [r3, #60]	; 0x3c
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d034      	beq.n	8006558 <CO_new+0x208>
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	3374      	adds	r3, #116	; 0x74
 80064f2:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1U, sizeof(*co->CANmodule));
 80064f4:	2138      	movs	r1, #56	; 0x38
 80064f6:	2001      	movs	r0, #1
 80064f8:	f008 f880 	bl	800e5fc <calloc>
 80064fc:	4603      	mov	r3, r0
 80064fe:	461a      	mov	r2, r3
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d025      	beq.n	8006558 <CO_new+0x208>
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3338      	adds	r3, #56	; 0x38
 8006510:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006512:	210c      	movs	r1, #12
 8006514:	200d      	movs	r0, #13
 8006516:	f008 f871 	bl	800e5fc <calloc>
 800651a:	4603      	mov	r3, r0
 800651c:	461a      	mov	r2, r3
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	609a      	str	r2, [r3, #8]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d016      	beq.n	8006558 <CO_new+0x208>
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	339c      	adds	r3, #156	; 0x9c
 800652e:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006530:	2118      	movs	r1, #24
 8006532:	2006      	movs	r0, #6
 8006534:	f008 f862 	bl	800e5fc <calloc>
 8006538:	4603      	mov	r3, r0
 800653a:	461a      	mov	r2, r3
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	60da      	str	r2, [r3, #12]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d007      	beq.n	8006558 <CO_new+0x208>
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3390      	adds	r3, #144	; 0x90
 800654c:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2201      	movs	r2, #1
 8006552:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	617b      	str	r3, [r7, #20]
    } while (false);

    if (coFinal == NULL) {
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <CO_new+0x214>
        CO_delete(co);
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f80b 	bl	800657a <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <CO_new+0x220>
        *heapMemoryUsed = mem;
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	693a      	ldr	r2, [r7, #16]
 800656e:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006570:	697b      	ldr	r3, [r7, #20]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3718      	adds	r7, #24
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <CO_delete>:

void
CO_delete(CO_t* co) {
 800657a:	b580      	push	{r7, lr}
 800657c:	b082      	sub	sp, #8
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d053      	beq.n	8006630 <CO_delete+0xb6>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	4618      	mov	r0, r3
 800658e:	f000 fee5 	bl	800735c <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68db      	ldr	r3, [r3, #12]
 8006596:	4618      	mov	r0, r3
 8006598:	f008 f84e 	bl	800e638 <free>
    CO_free(co->CANrx);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	689b      	ldr	r3, [r3, #8]
 80065a0:	4618      	mov	r0, r3
 80065a2:	f008 f849 	bl	800e638 <free>
    CO_free(co->CANmodule);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	4618      	mov	r0, r3
 80065ac:	f008 f844 	bl	800e638 <free>
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_MASTER) != 0
    CO_free(co->LSSmaster);
#endif

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    CO_free(co->LSSslave);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065b4:	4618      	mov	r0, r3
 80065b6:	f008 f83f 	bl	800e638 <free>
#if ((CO_CONFIG_GFC)&CO_CONFIG_GFC_ENABLE) != 0
    CO_free(co->GFC);
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    CO_free(co->LEDs);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	4618      	mov	r0, r3
 80065c0:	f008 f83a 	bl	800e638 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    CO_free(co->TPDO);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065c8:	4618      	mov	r0, r3
 80065ca:	f008 f835 	bl	800e638 <free>
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
    CO_free(co->RPDO);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065d2:	4618      	mov	r0, r3
 80065d4:	f008 f830 	bl	800e638 <free>
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    CO_free(co->SYNC);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	4618      	mov	r0, r3
 80065de:	f008 f82b 	bl	800e638 <free>
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    CO_free(co->TIME);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e6:	4618      	mov	r0, r3
 80065e8:	f008 f826 	bl	800e638 <free>
#if ((CO_CONFIG_SDO_CLI)&CO_CONFIG_SDO_CLI_ENABLE) != 0
    free(co->SDOclient);
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f0:	4618      	mov	r0, r3
 80065f2:	f008 f821 	bl	800e638 <free>

    /* Emergency */
    CO_free(co->em);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	69db      	ldr	r3, [r3, #28]
 80065fa:	4618      	mov	r0, r3
 80065fc:	f008 f81c 	bl	800e638 <free>
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
    CO_free(co->em_fifo);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	4618      	mov	r0, r3
 8006606:	f008 f817 	bl	800e638 <free>
#if ((CO_CONFIG_NODE_GUARDING)&CO_CONFIG_NODE_GUARDING_MASTER_ENABLE) != 0
    CO_free(co->NGmaster);
#endif

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    CO_free(co->HBconsMonitoredNodes);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	699b      	ldr	r3, [r3, #24]
 800660e:	4618      	mov	r0, r3
 8006610:	f008 f812 	bl	800e638 <free>
    CO_free(co->HBcons);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	695b      	ldr	r3, [r3, #20]
 8006618:	4618      	mov	r0, r3
 800661a:	f008 f80d 	bl	800e638 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	691b      	ldr	r3, [r3, #16]
 8006622:	4618      	mov	r0, r3
 8006624:	f008 f808 	bl	800e638 <free>

    /* CANopen object */
    CO_free(co);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f008 f805 	bl	800e638 <free>
 800662e:	e000      	b.n	8006632 <CO_delete+0xb8>
        return;
 8006630:	bf00      	nop
}
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <CO_CANinit>:
#endif
    return en;
}

CO_ReturnError_t
CO_CANinit(CO_t* co, void* CANptr, uint16_t bitRate) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	; 0x28
 800663c:	af04      	add	r7, sp, #16
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	4613      	mov	r3, r2
 8006644:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) {
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d102      	bne.n	8006652 <CO_CANinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800664c:	f04f 33ff 	mov.w	r3, #4294967295
 8006650:	e01a      	b.n	8006688 <CO_CANinit+0x50>
    }

    co->CANmodule->CANnormal = false;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	685b      	ldr	r3, [r3, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 800665a:	68b8      	ldr	r0, [r7, #8]
 800665c:	f000 fd8e 	bl	800717c <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule, CANptr, co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), co->CANtx,
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6858      	ldr	r0, [r3, #4]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	6899      	ldr	r1, [r3, #8]
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	88fa      	ldrh	r2, [r7, #6]
 800666e:	9202      	str	r2, [sp, #8]
 8006670:	2206      	movs	r2, #6
 8006672:	9201      	str	r2, [sp, #4]
 8006674:	9300      	str	r3, [sp, #0]
 8006676:	230d      	movs	r3, #13
 8006678:	460a      	mov	r2, r1
 800667a:	68b9      	ldr	r1, [r7, #8]
 800667c:	f000 fda6 	bl	80071cc <CO_CANmodule_init>
 8006680:	4603      	mov	r3, r0
 8006682:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_TX_MSGS), bitRate);

    return err;
 8006684:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006688:	4618      	mov	r0, r3
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <CO_LSSinit>:

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
CO_ReturnError_t
CO_LSSinit(CO_t* co, CO_LSS_address_t* lssAddress, uint8_t* pendingNodeID, uint16_t* pendingBitRate) {
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af06      	add	r7, sp, #24
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if ((co == NULL) || (CO_GET_CNT(LSS_SLV) != 1U)) {
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d102      	bne.n	80066aa <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80066a4:	f04f 33ff 	mov.w	r3, #4294967295
 80066a8:	e01a      	b.n	80066e0 <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave, lssAddress, pendingBitRate, pendingNodeID, co->CANmodule,
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	6852      	ldr	r2, [r2, #4]
 80066b6:	f240 71e4 	movw	r1, #2020	; 0x7e4
 80066ba:	9105      	str	r1, [sp, #20]
 80066bc:	2105      	movs	r1, #5
 80066be:	9104      	str	r1, [sp, #16]
 80066c0:	9203      	str	r2, [sp, #12]
 80066c2:	f240 72e5 	movw	r2, #2021	; 0x7e5
 80066c6:	9202      	str	r2, [sp, #8]
 80066c8:	220c      	movs	r2, #12
 80066ca:	9201      	str	r2, [sp, #4]
 80066cc:	9300      	str	r3, [sp, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	68b9      	ldr	r1, [r7, #8]
 80066d4:	f7ff fb50 	bl	8005d78 <CO_LSSslave_init>
 80066d8:	4603      	mov	r3, r0
 80066da:	75fb      	strb	r3, [r7, #23]
                           CO_GET_CO(RX_IDX_LSS_SLV), CO_CAN_ID_LSS_MST, co->CANmodule, CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 80066dc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <CO_CANopenInit>:
#endif /* (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE */

CO_ReturnError_t
CO_CANopenInit(CO_t* co, CO_NMT_t* NMT, CO_EM_t* em, OD_t* od, OD_entry_t* OD_statusBits, uint16_t NMTcontrol,
               uint16_t firstHBTime_ms, uint16_t SDOserverTimeoutTime_ms, uint16_t SDOclientTimeoutTime_ms,
               bool_t SDOclientBlockTransfer, uint8_t nodeId, uint32_t* errInfo) {
 80066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ea:	b091      	sub	sp, #68	; 0x44
 80066ec:	af0a      	add	r7, sp, #40	; 0x28
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]

#if ((CO_CONFIG_EM)&CO_CONFIG_EM_STATUS_BITS) == 0
    (void)OD_statusBits; /* may be unused */
#endif

    if ((co == NULL) || ((CO_GET_CNT(NMT) == 0U) && (NMT == NULL)) || ((CO_GET_CNT(EM) == 0U) && (em == NULL))) {
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d102      	bne.n	8006702 <CO_CANopenInit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80066fc:	f04f 33ff 	mov.w	r3, #4294967295
 8006700:	e12f      	b.n	8006962 <CO_CANopenInit+0x27a>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0U) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d102      	bne.n	800670e <CO_CANopenInit+0x26>
        em = co->em;
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	69db      	ldr	r3, [r3, #28]
 800670c:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	601a      	str	r2, [r3, #0]
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if ((CO_GET_CNT(LSS_SLV) == 1U) && (nodeId == CO_LSS_NODE_ID_ASSIGNMENT)) {
 8006714:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006718:	2bff      	cmp	r3, #255	; 0xff
 800671a:	d103      	bne.n	8006724 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2201      	movs	r2, #1
 8006720:	601a      	str	r2, [r3, #0]
 8006722:	e00a      	b.n	800673a <CO_CANopenInit+0x52>
    } else
#endif
        if ((nodeId < 1U) || (nodeId > 127U)) {
 8006724:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8006728:	2b00      	cmp	r3, #0
 800672a:	d003      	beq.n	8006734 <CO_CANopenInit+0x4c>
 800672c:	f997 3048 	ldrsb.w	r3, [r7, #72]	; 0x48
 8006730:	2b00      	cmp	r3, #0
 8006732:	da02      	bge.n	800673a <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006734:	f04f 33ff 	mov.w	r3, #4294967295
 8006738:	e113      	b.n	8006962 <CO_CANopenInit+0x27a>
    } else { /* MISRA C 2004 14.10 */
    }

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    if (CO_GET_CNT(LEDS) == 1U) {
        err = CO_LEDs_init(co->LEDs);
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	4618      	mov	r0, r3
 8006740:	f7fe ffee 	bl	8005720 <CO_LEDs_init>
 8006744:	4603      	mov	r3, r0
 8006746:	747b      	strb	r3, [r7, #17]
        if (err != CO_ERROR_NO) {
 8006748:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d002      	beq.n	8006756 <CO_CANopenInit+0x6e>
            return err;
 8006750:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006754:	e105      	b.n	8006962 <CO_CANopenInit+0x27a>
        }
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 800675e:	f06f 0312 	mvn.w	r3, #18
 8006762:	e0fe      	b.n	8006962 <CO_CANopenInit+0x27a>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	69d8      	ldr	r0, [r3, #28]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	685c      	ldr	r4, [r3, #4]
 800676c:	4b7f      	ldr	r3, [pc, #508]	; (800696c <CO_CANopenInit+0x284>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f103 050c 	add.w	r5, r3, #12
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	6a1e      	ldr	r6, [r3, #32]
#if ((CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)) != 0
                         co->em_fifo, (CO_GET_CNT(ARR_1003) + 1U),
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PRODUCER) != 0
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY), CO_GET_CO(TX_IDX_EM_PROD),
 800677a:	4b7c      	ldr	r3, [pc, #496]	; (800696c <CO_CANopenInit+0x284>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006780:	336c      	adds	r3, #108	; 0x6c
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_PROD_INHIBIT) != 0
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
#endif
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_HISTORY) != 0
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 8006782:	4a7a      	ldr	r2, [pc, #488]	; (800696c <CO_CANopenInit+0x284>)
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em, co->CANmodule, OD_GET(H1001, OD_H1001_ERR_REG),
 8006788:	3218      	adds	r2, #24
 800678a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800678c:	9105      	str	r1, [sp, #20]
 800678e:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 8006792:	9104      	str	r1, [sp, #16]
 8006794:	9203      	str	r2, [sp, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	9202      	str	r2, [sp, #8]
 800679a:	9301      	str	r3, [sp, #4]
 800679c:	2311      	movs	r3, #17
 800679e:	9300      	str	r3, [sp, #0]
 80067a0:	4633      	mov	r3, r6
 80067a2:	462a      	mov	r2, r5
 80067a4:	4621      	mov	r1, r4
 80067a6:	f7fa fcad 	bl	8001104 <CO_EM_init>
 80067aa:	4603      	mov	r3, r0
 80067ac:	747b      	strb	r3, [r7, #17]
#endif
#if ((CO_CONFIG_EM)&CO_CONFIG_EM_CONSUMER) != 0
                         co->CANmodule, CO_GET_CO(RX_IDX_EM_CONS),
#endif
                         nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 80067ae:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d002      	beq.n	80067bc <CO_CANopenInit+0xd4>
            return err;
 80067b6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80067ba:	e0d2      	b.n	8006962 <CO_CANopenInit+0x27a>
        }
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        err = CO_NMT_init(co->NMT, OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME), em, nodeId, NMTcontrol, firstHBTime_ms,
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	691c      	ldr	r4, [r3, #16]
 80067c0:	4b6a      	ldr	r3, [pc, #424]	; (800696c <CO_CANopenInit+0x284>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f103 0590 	add.w	r5, r3, #144	; 0x90
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	6852      	ldr	r2, [r2, #4]
 80067d2:	f897 1048 	ldrb.w	r1, [r7, #72]	; 0x48
 80067d6:	b289      	uxth	r1, r1
 80067d8:	f501 61e0 	add.w	r1, r1, #1792	; 0x700
 80067dc:	b289      	uxth	r1, r1
 80067de:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 80067e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80067e4:	9008      	str	r0, [sp, #32]
 80067e6:	9107      	str	r1, [sp, #28]
 80067e8:	2104      	movs	r1, #4
 80067ea:	9106      	str	r1, [sp, #24]
 80067ec:	9205      	str	r2, [sp, #20]
 80067ee:	2200      	movs	r2, #0
 80067f0:	9204      	str	r2, [sp, #16]
 80067f2:	2200      	movs	r2, #0
 80067f4:	9203      	str	r2, [sp, #12]
 80067f6:	9302      	str	r3, [sp, #8]
 80067f8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	4633      	mov	r3, r6
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	4629      	mov	r1, r5
 8006806:	4620      	mov	r0, r4
 8006808:	f7fb fb0c 	bl	8001e24 <CO_NMT_init>
 800680c:	4603      	mov	r3, r0
 800680e:	747b      	strb	r3, [r7, #17]
                          co->CANmodule, CO_GET_CO(RX_IDX_NMT_SLV), CO_CAN_ID_NMT_SERVICE,
#if ((CO_CONFIG_NMT)&CO_CONFIG_NMT_MASTER) != 0
                          co->CANmodule, CO_GET_CO(TX_IDX_NMT_MST), CO_CAN_ID_NMT_SERVICE,
#endif
                          co->CANmodule, CO_GET_CO(TX_IDX_HB_PROD), CO_CAN_ID_HEARTBEAT + nodeId, errInfo);
        if (err != CO_ERROR_NO) {
 8006810:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d002      	beq.n	800681e <CO_CANopenInit+0x136>
            return err;
 8006818:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800681c:	e0a1      	b.n	8006962 <CO_CANopenInit+0x27a>
        }
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6958      	ldr	r0, [r3, #20]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	699c      	ldr	r4, [r3, #24]
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME), co->CANmodule, CO_GET_CO(RX_IDX_HB_CONS),
 8006826:	4b51      	ldr	r3, [pc, #324]	; (800696c <CO_CANopenInit+0x284>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons, em, co->HBconsMonitoredNodes, CO_GET_CNT(ARR_1016),
 800682c:	3384      	adds	r3, #132	; 0x84
 800682e:	68fa      	ldr	r2, [r7, #12]
 8006830:	6852      	ldr	r2, [r2, #4]
 8006832:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8006834:	9103      	str	r1, [sp, #12]
 8006836:	2104      	movs	r1, #4
 8006838:	9102      	str	r1, [sp, #8]
 800683a:	9201      	str	r2, [sp, #4]
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	2308      	movs	r3, #8
 8006840:	4622      	mov	r2, r4
 8006842:	6879      	ldr	r1, [r7, #4]
 8006844:	f7fa fff4 	bl	8001830 <CO_HBconsumer_init>
 8006848:	4603      	mov	r3, r0
 800684a:	747b      	strb	r3, [r7, #17]
                                 errInfo);
        if (err != CO_ERROR_NO) {
 800684c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d002      	beq.n	800685a <CO_CANopenInit+0x172>
            return err;
 8006854:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006858:	e083      	b.n	8006962 <CO_CANopenInit+0x27a>
    }
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0U) {
        OD_entry_t* SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 800685a:	4b44      	ldr	r3, [pc, #272]	; (800696c <CO_CANopenInit+0x284>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	33b4      	adds	r3, #180	; 0xb4
 8006862:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006864:	2300      	movs	r3, #0
 8006866:	827b      	strh	r3, [r7, #18]
 8006868:	e02f      	b.n	80068ca <CO_CANopenInit+0x1e2>
            err = CO_SDOserver_init(&co->SDOserver[i], od, SDOsrvPar, nodeId, SDOserverTimeoutTime_ms, co->CANmodule,
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800686e:	8a7b      	ldrh	r3, [r7, #18]
 8006870:	21ac      	movs	r1, #172	; 0xac
 8006872:	fb01 f303 	mul.w	r3, r1, r3
 8006876:	18d5      	adds	r5, r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	8a7a      	ldrh	r2, [r7, #18]
 800687e:	3203      	adds	r2, #3
 8006880:	b292      	uxth	r2, r2
 8006882:	68f9      	ldr	r1, [r7, #12]
 8006884:	6849      	ldr	r1, [r1, #4]
 8006886:	8a78      	ldrh	r0, [r7, #18]
 8006888:	3003      	adds	r0, #3
 800688a:	b280      	uxth	r0, r0
 800688c:	f897 6048 	ldrb.w	r6, [r7, #72]	; 0x48
 8006890:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8006892:	9405      	str	r4, [sp, #20]
 8006894:	9004      	str	r0, [sp, #16]
 8006896:	9103      	str	r1, [sp, #12]
 8006898:	9202      	str	r2, [sp, #8]
 800689a:	9301      	str	r3, [sp, #4]
 800689c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800689e:	9300      	str	r3, [sp, #0]
 80068a0:	4633      	mov	r3, r6
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	4628      	mov	r0, r5
 80068a8:	f7fd f978 	bl	8003b9c <CO_SDOserver_init>
 80068ac:	4603      	mov	r3, r0
 80068ae:	747b      	strb	r3, [r7, #17]
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i, co->CANmodule, CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err != CO_ERROR_NO) {
 80068b0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d002      	beq.n	80068be <CO_CANopenInit+0x1d6>
                return err;
 80068b8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80068bc:	e051      	b.n	8006962 <CO_CANopenInit+0x27a>
            }
            SDOsrvPar++;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	330c      	adds	r3, #12
 80068c2:	617b      	str	r3, [r7, #20]
        for (uint16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80068c4:	8a7b      	ldrh	r3, [r7, #18]
 80068c6:	3301      	adds	r3, #1
 80068c8:	827b      	strh	r3, [r7, #18]
 80068ca:	8a7b      	ldrh	r3, [r7, #18]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d0cc      	beq.n	800686a <CO_CANopenInit+0x182>
    }
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        err = CO_TIME_init(co->TIME, OD_GET(H1012, OD_H1012_COBID_TIME), co->CANmodule, CO_GET_CO(RX_IDX_TIME),
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80068d4:	4b25      	ldr	r3, [pc, #148]	; (800696c <CO_CANopenInit+0x284>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068e4:	9300      	str	r3, [sp, #0]
 80068e6:	2302      	movs	r3, #2
 80068e8:	f7fe fe24 	bl	8005534 <CO_TIME_init>
 80068ec:	4603      	mov	r3, r0
 80068ee:	747b      	strb	r3, [r7, #17]
#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 80068f0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <CO_CANopenInit+0x216>
            return err;
 80068f8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80068fc:	e031      	b.n	8006962 <CO_CANopenInit+0x27a>
    }
#endif

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
    if (CO_GET_CNT(SYNC) == 1U) {
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8006902:	4b1a      	ldr	r3, [pc, #104]	; (800696c <CO_CANopenInit+0x284>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f103 0624 	add.w	r6, r3, #36	; 0x24
 800690c:	4b17      	ldr	r3, [pc, #92]	; (800696c <CO_CANopenInit+0x284>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8006916:	4b15      	ldr	r3, [pc, #84]	; (800696c <CO_CANopenInit+0x284>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 800691c:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN), OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 800691e:	4a13      	ldr	r2, [pc, #76]	; (800696c <CO_CANopenInit+0x284>)
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC, em, OD_GET(H1005, OD_H1005_COBID_SYNC), OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 8006924:	32a8      	adds	r2, #168	; 0xa8
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	6849      	ldr	r1, [r1, #4]
 800692a:	68f8      	ldr	r0, [r7, #12]
 800692c:	6840      	ldr	r0, [r0, #4]
 800692e:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 8006930:	9406      	str	r4, [sp, #24]
 8006932:	2400      	movs	r4, #0
 8006934:	9405      	str	r4, [sp, #20]
 8006936:	9004      	str	r0, [sp, #16]
 8006938:	2001      	movs	r0, #1
 800693a:	9003      	str	r0, [sp, #12]
 800693c:	9102      	str	r1, [sp, #8]
 800693e:	9201      	str	r2, [sp, #4]
 8006940:	9300      	str	r3, [sp, #0]
 8006942:	4663      	mov	r3, ip
 8006944:	4632      	mov	r2, r6
 8006946:	6879      	ldr	r1, [r7, #4]
 8006948:	4628      	mov	r0, r5
 800694a:	f7fe fb2d 	bl	8004fa8 <CO_SYNC_init>
 800694e:	4603      	mov	r3, r0
 8006950:	747b      	strb	r3, [r7, #17]
                           co->CANmodule, CO_GET_CO(RX_IDX_SYNC),
#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_PRODUCER) != 0
                           co->CANmodule, CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err != CO_ERROR_NO) {
 8006952:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d002      	beq.n	8006960 <CO_CANopenInit+0x278>
            return err;
 800695a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800695e:	e000      	b.n	8006962 <CO_CANopenInit+0x27a>
            }
        }
    }
#endif

    return CO_ERROR_NO;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	371c      	adds	r7, #28
 8006966:	46bd      	mov	sp, r7
 8006968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800696a:	bf00      	nop
 800696c:	200002e8 	.word	0x200002e8

08006970 <CO_CANopenInitPDO>:

CO_ReturnError_t
CO_CANopenInitPDO(CO_t* co, CO_EM_t* em, OD_t* od, uint8_t nodeId, uint32_t* errInfo) {
 8006970:	b590      	push	{r4, r7, lr}
 8006972:	b08f      	sub	sp, #60	; 0x3c
 8006974:	af06      	add	r7, sp, #24
 8006976:	60f8      	str	r0, [r7, #12]
 8006978:	60b9      	str	r1, [r7, #8]
 800697a:	607a      	str	r2, [r7, #4]
 800697c:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d102      	bne.n	800698a <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006984:	f04f 33ff 	mov.w	r3, #4294967295
 8006988:	e064      	b.n	8006a54 <CO_CANopenInitPDO+0xe4>
    }
    if ((nodeId < 1U) || (nodeId > 127U) || co->nodeIdUnconfigured) {
 800698a:	78fb      	ldrb	r3, [r7, #3]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d007      	beq.n	80069a0 <CO_CANopenInitPDO+0x30>
 8006990:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006994:	2b00      	cmp	r3, #0
 8006996:	db03      	blt.n	80069a0 <CO_CANopenInitPDO+0x30>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d009      	beq.n	80069b4 <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured) ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d002      	beq.n	80069ae <CO_CANopenInitPDO+0x3e>
 80069a8:	f06f 0312 	mvn.w	r3, #18
 80069ac:	e052      	b.n	8006a54 <CO_CANopenInitPDO+0xe4>
 80069ae:	f04f 33ff 	mov.w	r3, #4294967295
 80069b2:	e04f      	b.n	8006a54 <CO_CANopenInitPDO+0xe4>
    }
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
    if (CO_GET_CNT(TPDO) > 0U) {
        OD_entry_t* TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 80069b4:	4b29      	ldr	r3, [pc, #164]	; (8006a5c <CO_CANopenInitPDO+0xec>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	33cc      	adds	r3, #204	; 0xcc
 80069bc:	617b      	str	r3, [r7, #20]
        OD_entry_t* TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 80069be:	4b27      	ldr	r3, [pc, #156]	; (8006a5c <CO_CANopenInitPDO+0xec>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	33d8      	adds	r3, #216	; 0xd8
 80069c6:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80069c8:	2300      	movs	r3, #0
 80069ca:	837b      	strh	r3, [r7, #26]
 80069cc:	e03e      	b.n	8006a4c <CO_CANopenInitPDO+0xdc>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80069ce:	2300      	movs	r3, #0
 80069d0:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 80069d2:	8b7b      	ldrh	r3, [r7, #26]
 80069d4:	2b03      	cmp	r3, #3
 80069d6:	d809      	bhi.n	80069ec <CO_CANopenInitPDO+0x7c>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (uint16_t)((CO_CAN_ID_TPDO_1 + (i * 0x100U)) + nodeId);
 80069d8:	8b7b      	ldrh	r3, [r7, #26]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	b29a      	uxth	r2, r3
 80069de:	78fb      	ldrb	r3, [r7, #3]
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	4413      	add	r3, r2
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80069ea:	833b      	strh	r3, [r7, #24]
                uint16_t pdoOffset = i % 4;
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100) + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i], od, em,
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80069f0:	8b7b      	ldrh	r3, [r7, #26]
 80069f2:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 80069f6:	fb01 f303 	mul.w	r3, r1, r3
 80069fa:	18d0      	adds	r0, r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	8b7a      	ldrh	r2, [r7, #26]
 8006a06:	3202      	adds	r2, #2
 8006a08:	b292      	uxth	r2, r2
 8006a0a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a0c:	9105      	str	r1, [sp, #20]
 8006a0e:	9204      	str	r2, [sp, #16]
 8006a10:	9303      	str	r3, [sp, #12]
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	9302      	str	r3, [sp, #8]
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	8b3b      	ldrh	r3, [r7, #24]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	4623      	mov	r3, r4
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	6879      	ldr	r1, [r7, #4]
 8006a24:	f7fc fb5e 	bl	80030e4 <CO_TPDO_init>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	74fb      	strb	r3, [r7, #19]
#if ((CO_CONFIG_PDO)&CO_CONFIG_PDO_SYNC_ENABLE) != 0
                               co->SYNC,
#endif
                               preDefinedCanId, TPDOcomm, TPDOmap, co->CANmodule, CO_GET_CO(TX_IDX_TPDO) + i, errInfo);
            if (err != CO_ERROR_NO) {
 8006a2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d002      	beq.n	8006a3a <CO_CANopenInitPDO+0xca>
                return err;
 8006a34:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8006a38:	e00c      	b.n	8006a54 <CO_CANopenInitPDO+0xe4>
            }
            TPDOcomm++;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	330c      	adds	r3, #12
 8006a3e:	617b      	str	r3, [r7, #20]
            TPDOmap++;
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	330c      	adds	r3, #12
 8006a44:	61fb      	str	r3, [r7, #28]
        for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006a46:	8b7b      	ldrh	r3, [r7, #26]
 8006a48:	3301      	adds	r3, #1
 8006a4a:	837b      	strh	r3, [r7, #26]
 8006a4c:	8b7b      	ldrh	r3, [r7, #26]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0bd      	beq.n	80069ce <CO_CANopenInitPDO+0x5e>
        }
    }
#endif

    return CO_ERROR_NO;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3724      	adds	r7, #36	; 0x24
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd90      	pop	{r4, r7, pc}
 8006a5c:	200002e8 	.word	0x200002e8

08006a60 <CO_process>:
    return CO_ERROR_NO;
}
#endif

CO_NMT_reset_cmd_t
CO_process(CO_t* co, bool_t enableGateway, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a62:	b09b      	sub	sp, #108	; 0x6c
 8006a64:	af08      	add	r7, sp, #32
 8006a66:	61f8      	str	r0, [r7, #28]
 8006a68:	61b9      	str	r1, [r7, #24]
 8006a6a:	617a      	str	r2, [r7, #20]
 8006a6c:	613b      	str	r3, [r7, #16]
    (void)enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7ff fc46 	bl	800630a <CO_NMT_getInternalState>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006a84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006a88:	2b7f      	cmp	r3, #127	; 0x7f
 8006a8a:	d003      	beq.n	8006a94 <CO_process+0x34>
 8006a8c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006a90:	2b05      	cmp	r3, #5
 8006a92:	d101      	bne.n	8006a98 <CO_process+0x38>
 8006a94:	2301      	movs	r3, #1
 8006a96:	e000      	b.n	8006a9a <CO_process+0x3a>
 8006a98:	2300      	movs	r3, #0
 8006a9a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	685b      	ldr	r3, [r3, #4]
 8006aa0:	4618      	mov	r0, r3
 8006aa2:	f000 fdf2 	bl	800768a <CO_CANmodule_process>

#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE)
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_process(co->LSSslave)) {
 8006aa6:	69fb      	ldr	r3, [r7, #28]
 8006aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7ff f9da 	bl	8005e64 <CO_LSSslave_process>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d002      	beq.n	8006abc <CO_process+0x5c>
            reset = CO_RESET_COMM;
 8006ab6:	2301      	movs	r3, #1
 8006ab8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
        }
    }
#endif

#if ((CO_CONFIG_LEDS)&CO_CONFIG_LEDS_ENABLE) != 0
    bool_t unc = co->nodeIdUnconfigured;
 8006abc:	69fb      	ldr	r3, [r7, #28]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	8a5b      	ldrh	r3, [r3, #18]
 8006ac8:	867b      	strh	r3, [r7, #50]	; 0x32
    bool_t LSSslave_configuration = false;
 8006aca:	2300      	movs	r3, #0
 8006acc:	643b      	str	r3, [r7, #64]	; 0x40
#if ((CO_CONFIG_LSS)&CO_CONFIG_LSS_SLAVE) != 0
    if (CO_GET_CNT(LSS_SLV) == 1U) {
        if (CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION) {
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff fc2b 	bl	800632e <CO_LSSslave_getState>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d101      	bne.n	8006ae2 <CO_process+0x82>
            LSSslave_configuration = true;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
#define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS false
#endif

    if (CO_GET_CNT(LEDS) == 1U) {
        bool_t ErrSync = CO_isError(co->em, CO_EM_SYNC_TIME_OUT);
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	69db      	ldr	r3, [r3, #28]
 8006ae6:	2118      	movs	r1, #24
 8006ae8:	4618      	mov	r0, r3
 8006aea:	f7ff fbd1 	bl	8006290 <CO_isError>
 8006aee:	62f8      	str	r0, [r7, #44]	; 0x2c
        bool_t ErrHbCons = CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER);
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	69db      	ldr	r3, [r3, #28]
 8006af4:	211b      	movs	r1, #27
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7ff fbca 	bl	8006290 <CO_isError>
 8006afc:	62b8      	str	r0, [r7, #40]	; 0x28
        bool_t ErrHbConsRemote = CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET);
 8006afe:	69fb      	ldr	r3, [r7, #28]
 8006b00:	69db      	ldr	r3, [r3, #28]
 8006b02:	211c      	movs	r1, #28
 8006b04:	4618      	mov	r0, r3
 8006b06:	f7ff fbc3 	bl	8006290 <CO_isError>
 8006b0a:	6278      	str	r0, [r7, #36]	; 0x24
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8006b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d102      	bne.n	8006b1c <CO_process+0xbc>
 8006b16:	f997 5023 	ldrsb.w	r5, [r7, #35]	; 0x23
 8006b1a:	e000      	b.n	8006b1e <CO_process+0xbe>
 8006b1c:	2500      	movs	r5, #0
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8006b1e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8006b20:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bf14      	ite	ne
 8006b28:	2301      	movne	r3, #1
 8006b2a:	2300      	moveq	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	60fb      	str	r3, [r7, #12]
                        (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0U, (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0U,
 8006b30:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8006b32:	f240 3303 	movw	r3, #771	; 0x303
 8006b36:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	bf14      	ite	ne
 8006b3c:	2301      	movne	r3, #1
 8006b3e:	2300      	moveq	r3, #0
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	60bb      	str	r3, [r7, #8]
 8006b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d101      	bne.n	8006b4e <CO_process+0xee>
 8006b4a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8006b4c:	e000      	b.n	8006b50 <CO_process+0xf0>
 8006b4e:	2400      	movs	r4, #0
                        false, /* RPDO event timer timeout */
                        unc ? false : ErrSync, unc ? false : (ErrHbCons || ErrHbConsRemote),
 8006b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d107      	bne.n	8006b66 <CO_process+0x106>
 8006b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d102      	bne.n	8006b62 <CO_process+0x102>
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <CO_process+0x106>
 8006b62:	2301      	movs	r3, #1
 8006b64:	e000      	b.n	8006b68 <CO_process+0x108>
 8006b66:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006b68:	607b      	str	r3, [r7, #4]
                        CO_getErrorRegister(co->em) != 0U, CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS, timerNext_us);
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	4618      	mov	r0, r3
 8006b70:	f7ff fbb5 	bl	80062de <CO_getErrorRegister>
 8006b74:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs, timeDifference_us, unc ? CO_NMT_INITIALIZING : NMTstate, LSSslave_configuration,
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	bf14      	ite	ne
 8006b7a:	2301      	movne	r3, #1
 8006b7c:	2300      	moveq	r3, #0
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	461a      	mov	r2, r3
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	9307      	str	r3, [sp, #28]
 8006b86:	2300      	movs	r3, #0
 8006b88:	9306      	str	r3, [sp, #24]
 8006b8a:	9205      	str	r2, [sp, #20]
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	9304      	str	r3, [sp, #16]
 8006b90:	9403      	str	r4, [sp, #12]
 8006b92:	2300      	movs	r3, #0
 8006b94:	9302      	str	r3, [sp, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	9301      	str	r3, [sp, #4]
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	9300      	str	r3, [sp, #0]
 8006b9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ba0:	462a      	mov	r2, r5
 8006ba2:	6979      	ldr	r1, [r7, #20]
 8006ba4:	4630      	mov	r0, r6
 8006ba6:	f7fe fdd3 	bl	8005750 <CO_LEDs_process>
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <CO_process+0x158>
        return reset;
 8006bb2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8006bb6:	e047      	b.n	8006c48 <CO_process+0x1e8>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1U) {
        CO_EM_process(co->em, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	69d8      	ldr	r0, [r3, #28]
 8006bbc:	693b      	ldr	r3, [r7, #16]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006bc2:	f7fa fb7f 	bl	80012c4 <CO_EM_process>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1U) {
        reset = CO_NMT_process(co->NMT, &NMTstate, timeDifference_us, timerNext_us);
 8006bc6:	69fb      	ldr	r3, [r7, #28]
 8006bc8:	6918      	ldr	r0, [r3, #16]
 8006bca:	f107 0123 	add.w	r1, r7, #35	; 0x23
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	f7fb f9e5 	bl	8001fa0 <CO_NMT_process>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006bdc:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006be0:	2b7f      	cmp	r3, #127	; 0x7f
 8006be2:	d003      	beq.n	8006bec <CO_process+0x18c>
 8006be4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006be8:	2b05      	cmp	r3, #5
 8006bea:	d101      	bne.n	8006bf0 <CO_process+0x190>
 8006bec:	2301      	movs	r3, #1
 8006bee:	e000      	b.n	8006bf2 <CO_process+0x192>
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	63bb      	str	r3, [r7, #56]	; 0x38

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006bfa:	e011      	b.n	8006c20 <CO_process+0x1c0>
        (void)CO_SDOserver_process(&co->SDOserver[i], NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c04:	21ac      	movs	r1, #172	; 0xac
 8006c06:	fb01 f303 	mul.w	r3, r1, r3
 8006c0a:	18d0      	adds	r0, r2, r3
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	697a      	ldr	r2, [r7, #20]
 8006c10:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c12:	f7fd faad 	bl	8004170 <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8006c16:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8006c20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d0e9      	beq.n	8006bfc <CO_process+0x19c>
    }

#if ((CO_CONFIG_HB_CONS)&CO_CONFIG_HB_CONS_ENABLE) != 0
    if (CO_GET_CNT(HB_CONS) == 1U) {
        CO_HBconsumer_process(co->HBcons, NMTisPreOrOperational, timeDifference_us, timerNext_us);
 8006c28:	69fb      	ldr	r3, [r7, #28]
 8006c2a:	6958      	ldr	r0, [r3, #20]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c32:	f7fa ff3f 	bl	8001ab4 <CO_HBconsumer_process>
    CO_nodeGuardingMaster_process(co->NGmaster, timeDifference_us, timerNext_us);
#endif

#if ((CO_CONFIG_TIME)&CO_CONFIG_TIME_ENABLE) != 0
    if (CO_GET_CNT(TIME) == 1U) {
        (void)CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fcf8 	bl	8005634 <CO_TIME_process>
    if (CO_GET_CNT(GTWA) == 1U) {
        CO_GTWA_process(co->gtwa, enableGateway, timeDifference_us, timerNext_us);
    }
#endif

    return reset;
 8006c44:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	374c      	adds	r7, #76	; 0x4c
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006c50 <CO_process_SYNC>:

#if ((CO_CONFIG_SYNC)&CO_CONFIG_SYNC_ENABLE) != 0
bool_t
CO_process_SYNC(CO_t* co, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b088      	sub	sp, #32
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	61fb      	str	r3, [r7, #28]

    if ((!co->nodeIdUnconfigured) && (CO_GET_CNT(SYNC) == 1U)) {
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d131      	bne.n	8006ccc <CO_process_SYNC+0x7c>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	691b      	ldr	r3, [r3, #16]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fb4c 	bl	800630a <CO_NMT_getInternalState>
 8006c72:	4603      	mov	r3, r0
 8006c74:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = ((NMTstate == CO_NMT_PRE_OPERATIONAL) || (NMTstate == CO_NMT_OPERATIONAL));
 8006c76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006c7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006c7c:	d003      	beq.n	8006c86 <CO_process_SYNC+0x36>
 8006c7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8006c82:	2b05      	cmp	r3, #5
 8006c84:	d101      	bne.n	8006c8a <CO_process_SYNC+0x3a>
 8006c86:	2301      	movs	r3, #1
 8006c88:	e000      	b.n	8006c8c <CO_process_SYNC+0x3c>
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC, NMTisPreOrOperational, timeDifference_us,
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	68ba      	ldr	r2, [r7, #8]
 8006c96:	6979      	ldr	r1, [r7, #20]
 8006c98:	f7fe faac 	bl	80051f4 <CO_SYNC_process>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	74fb      	strb	r3, [r7, #19]
                                                        timerNext_us);

        switch (sync_process) {
 8006ca0:	7cfb      	ldrb	r3, [r7, #19]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d009      	beq.n	8006cba <CO_process_SYNC+0x6a>
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	dc0d      	bgt.n	8006cc6 <CO_process_SYNC+0x76>
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d00d      	beq.n	8006cca <CO_process_SYNC+0x7a>
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d000      	beq.n	8006cb4 <CO_process_SYNC+0x64>
            case CO_SYNC_NONE: break;
            case CO_SYNC_RX_TX: syncWas = true; break;
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
            default:
                /* MISRA C 2004 15.3 */
                break;
 8006cb2:	e008      	b.n	8006cc6 <CO_process_SYNC+0x76>
            case CO_SYNC_RX_TX: syncWas = true; break;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	61fb      	str	r3, [r7, #28]
 8006cb8:	e008      	b.n	8006ccc <CO_process_SYNC+0x7c>
            case CO_SYNC_PASSED_WINDOW: CO_CANclearPendingSyncPDOs(co->CANmodule); break;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	4618      	mov	r0, r3
 8006cc0:	f000 fc7d 	bl	80075be <CO_CANclearPendingSyncPDOs>
 8006cc4:	e002      	b.n	8006ccc <CO_process_SYNC+0x7c>
                break;
 8006cc6:	bf00      	nop
 8006cc8:	e000      	b.n	8006ccc <CO_process_SYNC+0x7c>
            case CO_SYNC_NONE: break;
 8006cca:	bf00      	nop
        }
    }

    return syncWas;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <CO_process_RPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_ENABLE) != 0
void
CO_process_RPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b086      	sub	sp, #24
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	60f8      	str	r0, [r7, #12]
 8006cde:	60b9      	str	r1, [r7, #8]
 8006ce0:	607a      	str	r2, [r7, #4]
 8006ce2:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10e      	bne.n	8006d0a <CO_process_RPDO+0x34>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	f7ff fb0a 	bl	800630a <CO_NMT_getInternalState>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b05      	cmp	r3, #5
 8006cfa:	bf0c      	ite	eq
 8006cfc:	2301      	moveq	r3, #1
 8006cfe:	2300      	movne	r3, #0
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	617b      	str	r3, [r7, #20]

    for (uint16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8006d04:	2300      	movs	r3, #0
 8006d06:	827b      	strh	r3, [r7, #18]
 8006d08:	e000      	b.n	8006d0c <CO_process_RPDO+0x36>
        return;
 8006d0a:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_RPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006d0c:	3718      	adds	r7, #24
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <CO_process_TPDO>:
#endif

#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_ENABLE) != 0
void
CO_process_TPDO(CO_t* co, bool_t syncWas, uint32_t timeDifference_us, uint32_t* timerNext_us) {
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b088      	sub	sp, #32
 8006d16:	af02      	add	r7, sp, #8
 8006d18:	60f8      	str	r0, [r7, #12]
 8006d1a:	60b9      	str	r1, [r7, #8]
 8006d1c:	607a      	str	r2, [r7, #4]
 8006d1e:	603b      	str	r3, [r7, #0]
    (void)timeDifference_us;
    (void)timerNext_us;
    if (co->nodeIdUnconfigured) {
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d124      	bne.n	8006d72 <CO_process_TPDO+0x60>
        return;
    }

    bool_t NMTisOperational = CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff faec 	bl	800630a <CO_NMT_getInternalState>
 8006d32:	4603      	mov	r3, r0
 8006d34:	2b05      	cmp	r3, #5
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	613b      	str	r3, [r7, #16]

    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006d40:	2300      	movs	r3, #0
 8006d42:	82fb      	strh	r3, [r7, #22]
 8006d44:	e011      	b.n	8006d6a <CO_process_TPDO+0x58>
        CO_TPDO_process(&co->TPDO[i],
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d4a:	8afb      	ldrh	r3, [r7, #22]
 8006d4c:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8006d50:	fb01 f303 	mul.w	r3, r1, r3
 8006d54:	18d0      	adds	r0, r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	9300      	str	r3, [sp, #0]
 8006d5a:	693b      	ldr	r3, [r7, #16]
 8006d5c:	683a      	ldr	r2, [r7, #0]
 8006d5e:	6879      	ldr	r1, [r7, #4]
 8006d60:	f7fc fbf4 	bl	800354c <CO_TPDO_process>
    for (uint16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8006d64:	8afb      	ldrh	r3, [r7, #22]
 8006d66:	3301      	adds	r3, #1
 8006d68:	82fb      	strh	r3, [r7, #22]
 8006d6a:	8afb      	ldrh	r3, [r7, #22]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d0ea      	beq.n	8006d46 <CO_process_TPDO+0x34>
 8006d70:	e000      	b.n	8006d74 <CO_process_TPDO+0x62>
        return;
 8006d72:	bf00      	nop
#if ((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE) != 0
                        timeDifference_us, timerNext_us,
#endif
                        NMTisOperational, syncWas);
    }
}
 8006d74:	3718      	adds	r7, #24
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
	...

08006d7c <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b084      	sub	sp, #16
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8006d84:	4a13      	ldr	r2, [pc, #76]	; (8006dd4 <canopen_app_init+0x58>)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 8006d8e:	f107 0308 	add.w	r3, r7, #8
 8006d92:	4619      	mov	r1, r3
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7ff fadb 	bl	8006350 <CO_new>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	4a0e      	ldr	r2, [pc, #56]	; (8006dd8 <canopen_app_init+0x5c>)
 8006d9e:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8006da0:	4b0d      	ldr	r3, [pc, #52]	; (8006dd8 <canopen_app_init+0x5c>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d104      	bne.n	8006db2 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8006da8:	480c      	ldr	r0, [pc, #48]	; (8006ddc <canopen_app_init+0x60>)
 8006daa:	f007 fee3 	bl	800eb74 <puts>
        return 1;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e00c      	b.n	8006dcc <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	4619      	mov	r1, r3
 8006db6:	480a      	ldr	r0, [pc, #40]	; (8006de0 <canopen_app_init+0x64>)
 8006db8:	f007 fe76 	bl	800eaa8 <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 8006dbc:	4b05      	ldr	r3, [pc, #20]	; (8006dd4 <canopen_app_init+0x58>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a05      	ldr	r2, [pc, #20]	; (8006dd8 <canopen_app_init+0x5c>)
 8006dc2:	6812      	ldr	r2, [r2, #0]
 8006dc4:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 8006dc6:	f000 f80d 	bl	8006de4 <canopen_app_resetCommunication>
    return 0;
 8006dca:	2300      	movs	r3, #0
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3710      	adds	r7, #16
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	bd80      	pop	{r7, pc}
 8006dd4:	2000038c 	.word	0x2000038c
 8006dd8:	20000390 	.word	0x20000390
 8006ddc:	0800f5fc 	.word	0x0800f5fc
 8006de0:	0800f61c 	.word	0x0800f61c

08006de4 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 8006de4:	b590      	push	{r4, r7, lr}
 8006de6:	b08f      	sub	sp, #60	; 0x3c
 8006de8:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 8006dea:	487d      	ldr	r0, [pc, #500]	; (8006fe0 <canopen_app_resetCommunication+0x1fc>)
 8006dec:	f007 fec2 	bl	800eb74 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 8006df0:	4b7c      	ldr	r3, [pc, #496]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	685b      	ldr	r3, [r3, #4]
 8006df6:	2200      	movs	r2, #0
 8006df8:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8006dfa:	4b7b      	ldr	r3, [pc, #492]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 f9bc 	bl	800717c <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 8006e04:	4b77      	ldr	r3, [pc, #476]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	4618      	mov	r0, r3
 8006e0c:	f000 faa6 	bl	800735c <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 8006e10:	4b74      	ldr	r3, [pc, #464]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a74      	ldr	r2, [pc, #464]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006e16:	6811      	ldr	r1, [r2, #0]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f7ff fc0c 	bl	8006638 <CO_CANinit>
 8006e20:	4603      	mov	r3, r0
 8006e22:	461a      	mov	r2, r3
 8006e24:	4b71      	ldr	r3, [pc, #452]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006e26:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006e28:	4b70      	ldr	r3, [pc, #448]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006e2a:	f993 3000 	ldrsb.w	r3, [r3]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8006e32:	4b6e      	ldr	r3, [pc, #440]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006e34:	f993 3000 	ldrsb.w	r3, [r3]
 8006e38:	4619      	mov	r1, r3
 8006e3a:	486d      	ldr	r0, [pc, #436]	; (8006ff0 <canopen_app_resetCommunication+0x20c>)
 8006e3c:	f007 fe34 	bl	800eaa8 <iprintf>
        return 1;
 8006e40:	2301      	movs	r3, #1
 8006e42:	e0c8      	b.n	8006fd6 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006e44:	4b6b      	ldr	r3, [pc, #428]	; (8006ff4 <canopen_app_resetCommunication+0x210>)
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8006e4a:	4b6a      	ldr	r3, [pc, #424]	; (8006ff4 <canopen_app_resetCommunication+0x210>)
 8006e4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006e4e:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8006e50:	4b68      	ldr	r3, [pc, #416]	; (8006ff4 <canopen_app_resetCommunication+0x210>)
 8006e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006e54:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8006e56:	4b67      	ldr	r3, [pc, #412]	; (8006ff4 <canopen_app_resetCommunication+0x210>)
 8006e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8006e5a:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8006e5c:	4b61      	ldr	r3, [pc, #388]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006e5e:	6818      	ldr	r0, [r3, #0]
 8006e60:	4b61      	ldr	r3, [pc, #388]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	461a      	mov	r2, r3
 8006e66:	4b60      	ldr	r3, [pc, #384]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3302      	adds	r3, #2
 8006e6c:	f107 0108 	add.w	r1, r7, #8
 8006e70:	f7ff fc0e 	bl	8006690 <CO_LSSinit>
 8006e74:	4603      	mov	r3, r0
 8006e76:	461a      	mov	r2, r3
 8006e78:	4b5c      	ldr	r3, [pc, #368]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006e7a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006e7c:	4b5b      	ldr	r3, [pc, #364]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006e7e:	f993 3000 	ldrsb.w	r3, [r3]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d008      	beq.n	8006e98 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8006e86:	4b59      	ldr	r3, [pc, #356]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006e88:	f993 3000 	ldrsb.w	r3, [r3]
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	485a      	ldr	r0, [pc, #360]	; (8006ff8 <canopen_app_resetCommunication+0x214>)
 8006e90:	f007 fe0a 	bl	800eaa8 <iprintf>
        return 2;
 8006e94:	2302      	movs	r3, #2
 8006e96:	e09e      	b.n	8006fd6 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8006e98:	4b53      	ldr	r3, [pc, #332]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	4b52      	ldr	r3, [pc, #328]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	7812      	ldrb	r2, [r2, #0]
 8006ea2:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006ea8:	4b4e      	ldr	r3, [pc, #312]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006eaa:	6818      	ldr	r0, [r3, #0]
 8006eac:	4b53      	ldr	r3, [pc, #332]	; (8006ffc <canopen_app_resetCommunication+0x218>)
 8006eae:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8006eb0:	4b4d      	ldr	r3, [pc, #308]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	1d3a      	adds	r2, r7, #4
 8006eb8:	9207      	str	r2, [sp, #28]
 8006eba:	9306      	str	r3, [sp, #24]
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	9305      	str	r3, [sp, #20]
 8006ec0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006ec4:	9304      	str	r3, [sp, #16]
 8006ec6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006eca:	9303      	str	r3, [sp, #12]
 8006ecc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8006ed0:	9302      	str	r3, [sp, #8]
 8006ed2:	f242 1311 	movw	r3, #8465	; 0x2111
 8006ed6:	9301      	str	r3, [sp, #4]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	9300      	str	r3, [sp, #0]
 8006edc:	460b      	mov	r3, r1
 8006ede:	2200      	movs	r2, #0
 8006ee0:	2100      	movs	r1, #0
 8006ee2:	f7ff fc01 	bl	80066e8 <CO_CANopenInit>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	461a      	mov	r2, r3
 8006eea:	4b40      	ldr	r3, [pc, #256]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006eec:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8006eee:	4b3f      	ldr	r3, [pc, #252]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d01a      	beq.n	8006f2e <canopen_app_resetCommunication+0x14a>
 8006ef8:	4b3c      	ldr	r3, [pc, #240]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006efa:	f993 3000 	ldrsb.w	r3, [r3]
 8006efe:	f113 0f13 	cmn.w	r3, #19
 8006f02:	d014      	beq.n	8006f2e <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006f04:	4b39      	ldr	r3, [pc, #228]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006f06:	f993 3000 	ldrsb.w	r3, [r3]
 8006f0a:	f113 0f0c 	cmn.w	r3, #12
 8006f0e:	d105      	bne.n	8006f1c <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	4619      	mov	r1, r3
 8006f14:	483a      	ldr	r0, [pc, #232]	; (8007000 <canopen_app_resetCommunication+0x21c>)
 8006f16:	f007 fdc7 	bl	800eaa8 <iprintf>
 8006f1a:	e006      	b.n	8006f2a <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8006f1c:	4b33      	ldr	r3, [pc, #204]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006f1e:	f993 3000 	ldrsb.w	r3, [r3]
 8006f22:	4619      	mov	r1, r3
 8006f24:	4837      	ldr	r0, [pc, #220]	; (8007004 <canopen_app_resetCommunication+0x220>)
 8006f26:	f007 fdbf 	bl	800eaa8 <iprintf>
        }
        return 3;
 8006f2a:	2303      	movs	r3, #3
 8006f2c:	e053      	b.n	8006fd6 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8006f2e:	4b2d      	ldr	r3, [pc, #180]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006f30:	6818      	ldr	r0, [r3, #0]
 8006f32:	4b2c      	ldr	r3, [pc, #176]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	69d9      	ldr	r1, [r3, #28]
 8006f38:	4b30      	ldr	r3, [pc, #192]	; (8006ffc <canopen_app_resetCommunication+0x218>)
 8006f3a:	681a      	ldr	r2, [r3, #0]
 8006f3c:	4b2a      	ldr	r3, [pc, #168]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	785c      	ldrb	r4, [r3, #1]
 8006f42:	1d3b      	adds	r3, r7, #4
 8006f44:	9300      	str	r3, [sp, #0]
 8006f46:	4623      	mov	r3, r4
 8006f48:	f7ff fd12 	bl	8006970 <CO_CANopenInitPDO>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	461a      	mov	r2, r3
 8006f50:	4b26      	ldr	r3, [pc, #152]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006f52:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8006f54:	4b25      	ldr	r3, [pc, #148]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006f56:	f993 3000 	ldrsb.w	r3, [r3]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d014      	beq.n	8006f88 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8006f5e:	4b23      	ldr	r3, [pc, #140]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006f60:	f993 3000 	ldrsb.w	r3, [r3]
 8006f64:	f113 0f0c 	cmn.w	r3, #12
 8006f68:	d105      	bne.n	8006f76 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4824      	ldr	r0, [pc, #144]	; (8007000 <canopen_app_resetCommunication+0x21c>)
 8006f70:	f007 fd9a 	bl	800eaa8 <iprintf>
 8006f74:	e006      	b.n	8006f84 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8006f76:	4b1d      	ldr	r3, [pc, #116]	; (8006fec <canopen_app_resetCommunication+0x208>)
 8006f78:	f993 3000 	ldrsb.w	r3, [r3]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4822      	ldr	r0, [pc, #136]	; (8007008 <canopen_app_resetCommunication+0x224>)
 8006f80:	f007 fd92 	bl	800eaa8 <iprintf>
        }
        return 4;
 8006f84:	2304      	movs	r3, #4
 8006f86:	e026      	b.n	8006fd6 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8006f88:	4b17      	ldr	r3, [pc, #92]	; (8006fe8 <canopen_app_resetCommunication+0x204>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f005 fe3e 	bl	800cc10 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8006f94:	4b13      	ldr	r3, [pc, #76]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d002      	beq.n	8006fa4 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8006f9e:	481b      	ldr	r0, [pc, #108]	; (800700c <canopen_app_resetCommunication+0x228>)
 8006fa0:	f007 fde8 	bl	800eb74 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8006fa4:	4b0f      	ldr	r3, [pc, #60]	; (8006fe4 <canopen_app_resetCommunication+0x200>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	685b      	ldr	r3, [r3, #4]
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 f8f6 	bl	800719c <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8006fb0:	4817      	ldr	r0, [pc, #92]	; (8007010 <canopen_app_resetCommunication+0x22c>)
 8006fb2:	f007 fddf 	bl	800eb74 <puts>
    fflush(stdout);
 8006fb6:	4b17      	ldr	r3, [pc, #92]	; (8007014 <canopen_app_resetCommunication+0x230>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f007 fc9d 	bl	800e8fc <fflush>
    time_old = time_current = HAL_GetTick();
 8006fc2:	f002 febb 	bl	8009d3c <HAL_GetTick>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	4a13      	ldr	r2, [pc, #76]	; (8007018 <canopen_app_resetCommunication+0x234>)
 8006fca:	6013      	str	r3, [r2, #0]
 8006fcc:	4b12      	ldr	r3, [pc, #72]	; (8007018 <canopen_app_resetCommunication+0x234>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	4a12      	ldr	r2, [pc, #72]	; (800701c <canopen_app_resetCommunication+0x238>)
 8006fd2:	6013      	str	r3, [r2, #0]
    return 0;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	371c      	adds	r7, #28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd90      	pop	{r4, r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	0800f644 	.word	0x0800f644
 8006fe4:	20000390 	.word	0x20000390
 8006fe8:	2000038c 	.word	0x2000038c
 8006fec:	2000039c 	.word	0x2000039c
 8006ff0:	0800f66c 	.word	0x0800f66c
 8006ff4:	20000000 	.word	0x20000000
 8006ff8:	0800f694 	.word	0x0800f694
 8006ffc:	200002e8 	.word	0x200002e8
 8007000:	0800f6c0 	.word	0x0800f6c0
 8007004:	0800f6e8 	.word	0x0800f6e8
 8007008:	0800f714 	.word	0x0800f714
 800700c:	0800f73c 	.word	0x0800f73c
 8007010:	0800f764 	.word	0x0800f764
 8007014:	20000368 	.word	0x20000368
 8007018:	20000398 	.word	0x20000398
 800701c:	20000394 	.word	0x20000394

08007020 <canopen_app_process>:

void
canopen_app_process() {
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8007026:	f002 fe89 	bl	8009d3c <HAL_GetTick>
 800702a:	4603      	mov	r3, r0
 800702c:	4a2c      	ldr	r2, [pc, #176]	; (80070e0 <canopen_app_process+0xc0>)
 800702e:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8007030:	4b2b      	ldr	r3, [pc, #172]	; (80070e0 <canopen_app_process+0xc0>)
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	4b2b      	ldr	r3, [pc, #172]	; (80070e4 <canopen_app_process+0xc4>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	429a      	cmp	r2, r3
 800703a:	d04c      	beq.n	80070d6 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 800703c:	4b28      	ldr	r3, [pc, #160]	; (80070e0 <canopen_app_process+0xc0>)
 800703e:	681a      	ldr	r2, [r3, #0]
 8007040:	4b28      	ldr	r3, [pc, #160]	; (80070e4 <canopen_app_process+0xc4>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	1ad3      	subs	r3, r2, r3
 8007046:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800704a:	fb02 f303 	mul.w	r3, r2, r3
 800704e:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8007050:	4b23      	ldr	r3, [pc, #140]	; (80070e0 <canopen_app_process+0xc0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a23      	ldr	r2, [pc, #140]	; (80070e4 <canopen_app_process+0xc4>)
 8007056:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8007058:	4b23      	ldr	r3, [pc, #140]	; (80070e8 <canopen_app_process+0xc8>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	2300      	movs	r3, #0
 800705e:	687a      	ldr	r2, [r7, #4]
 8007060:	2100      	movs	r1, #0
 8007062:	f7ff fcfd 	bl	8006a60 <CO_process>
 8007066:	4603      	mov	r3, r0
 8007068:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 800706a:	4b1f      	ldr	r3, [pc, #124]	; (80070e8 <canopen_app_process+0xc8>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007070:	7a5a      	ldrb	r2, [r3, #9]
 8007072:	4b1e      	ldr	r3, [pc, #120]	; (80070ec <canopen_app_process+0xcc>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	09d2      	lsrs	r2, r2, #7
 8007078:	b2d2      	uxtb	r2, r2
 800707a:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 800707c:	4b1a      	ldr	r3, [pc, #104]	; (80070e8 <canopen_app_process+0xc8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007082:	7a9a      	ldrb	r2, [r3, #10]
 8007084:	4b19      	ldr	r3, [pc, #100]	; (80070ec <canopen_app_process+0xcc>)
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	09d2      	lsrs	r2, r2, #7
 800708a:	b2d2      	uxtb	r2, r2
 800708c:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 800708e:	78fb      	ldrb	r3, [r7, #3]
 8007090:	2b01      	cmp	r3, #1
 8007092:	d118      	bne.n	80070c6 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8007094:	4b15      	ldr	r3, [pc, #84]	; (80070ec <canopen_app_process+0xcc>)
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	4618      	mov	r0, r3
 800709c:	f005 fe28 	bl	800ccf0 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80070a0:	4b12      	ldr	r3, [pc, #72]	; (80070ec <canopen_app_process+0xcc>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4618      	mov	r0, r3
 80070a6:	f000 f869 	bl	800717c <CO_CANsetConfigurationMode>
            CO_delete(CO);
 80070aa:	4b0f      	ldr	r3, [pc, #60]	; (80070e8 <canopen_app_process+0xc8>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7ff fa63 	bl	800657a <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 80070b4:	480e      	ldr	r0, [pc, #56]	; (80070f0 <canopen_app_process+0xd0>)
 80070b6:	f007 fd5d 	bl	800eb74 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 80070ba:	4b0c      	ldr	r3, [pc, #48]	; (80070ec <canopen_app_process+0xcc>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4618      	mov	r0, r3
 80070c0:	f7ff fe5c 	bl	8006d7c <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 80070c4:	e007      	b.n	80070d6 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d104      	bne.n	80070d6 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 80070cc:	4809      	ldr	r0, [pc, #36]	; (80070f4 <canopen_app_process+0xd4>)
 80070ce:	f007 fd51 	bl	800eb74 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 80070d2:	f004 fa5e 	bl	800b592 <HAL_NVIC_SystemReset>
}
 80070d6:	bf00      	nop
 80070d8:	3708      	adds	r7, #8
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	20000398 	.word	0x20000398
 80070e4:	20000394 	.word	0x20000394
 80070e8:	20000390 	.word	0x20000390
 80070ec:	2000038c 	.word	0x2000038c
 80070f0:	0800f780 	.word	0x0800f780
 80070f4:	0800f7a8 	.word	0x0800f7a8

080070f8 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 80070fe:	4b1e      	ldr	r3, [pc, #120]	; (8007178 <canopen_app_interrupt+0x80>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007104:	f3ef 8210 	mrs	r2, PRIMASK
 8007108:	607a      	str	r2, [r7, #4]
  return(result);
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 800710e:	b672      	cpsid	i
}
 8007110:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007112:	4b19      	ldr	r3, [pc, #100]	; (8007178 <canopen_app_interrupt+0x80>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d120      	bne.n	800715e <canopen_app_interrupt+0x66>
 800711c:	4b16      	ldr	r3, [pc, #88]	; (8007178 <canopen_app_interrupt+0x80>)
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d01a      	beq.n	800715e <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8007128:	2300      	movs	r3, #0
 800712a:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 800712c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007130:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007132:	4b11      	ldr	r3, [pc, #68]	; (8007178 <canopen_app_interrupt+0x80>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2200      	movs	r2, #0
 8007138:	68b9      	ldr	r1, [r7, #8]
 800713a:	4618      	mov	r0, r3
 800713c:	f7ff fd88 	bl	8006c50 <CO_process_SYNC>
 8007140:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007142:	4b0d      	ldr	r3, [pc, #52]	; (8007178 <canopen_app_interrupt+0x80>)
 8007144:	6818      	ldr	r0, [r3, #0]
 8007146:	2300      	movs	r3, #0
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	68f9      	ldr	r1, [r7, #12]
 800714c:	f7ff fdc3 	bl	8006cd6 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007150:	4b09      	ldr	r3, [pc, #36]	; (8007178 <canopen_app_interrupt+0x80>)
 8007152:	6818      	ldr	r0, [r3, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	68ba      	ldr	r2, [r7, #8]
 8007158:	68f9      	ldr	r1, [r7, #12]
 800715a:	f7ff fdda 	bl	8006d12 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 800715e:	4b06      	ldr	r3, [pc, #24]	; (8007178 <canopen_app_interrupt+0x80>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	685b      	ldr	r3, [r3, #4]
 8007164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007166:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	f383 8810 	msr	PRIMASK, r3
}
 800716e:	bf00      	nop
}
 8007170:	bf00      	nop
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	20000390 	.word	0x20000390

0800717c <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d004      	beq.n	8007194 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	4618      	mov	r0, r3
 8007190:	f003 fc46 	bl	800aa20 <HAL_CAN_Stop>
#endif
    }
}
 8007194:	bf00      	nop
 8007196:	3708      	adds	r7, #8
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d00b      	beq.n	80071c4 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	4618      	mov	r0, r3
 80071b4:	f003 fbf0 	bl	800a998 <HAL_CAN_Start>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d102      	bne.n	80071c4 <CO_CANsetNormalMode+0x28>
#endif
        {
            CANmodule->CANnormal = true;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2201      	movs	r2, #1
 80071c2:	615a      	str	r2, [r3, #20]
        }
    }
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b090      	sub	sp, #64	; 0x40
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
 80071d8:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d005      	beq.n	80071ec <CO_CANmodule_init+0x20>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <CO_CANmodule_init+0x20>
 80071e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d102      	bne.n	80071f2 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80071ec:	f04f 33ff 	mov.w	r3, #4294967295
 80071f0:	e0ab      	b.n	800734a <CO_CANmodule_init+0x17e>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	68ba      	ldr	r2, [r7, #8]
 80071f6:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 80071f8:	4a56      	ldr	r2, [pc, #344]	; (8007354 <CO_CANmodule_init+0x188>)
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	687a      	ldr	r2, [r7, #4]
 8007202:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	887a      	ldrh	r2, [r7, #2]
 8007208:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800720e:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8007216:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	2200      	movs	r2, #0
 800722e:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2201      	movs	r2, #1
 8007234:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2200      	movs	r2, #0
 800723a:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007242:	2300      	movs	r3, #0
 8007244:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8007246:	e02b      	b.n	80072a0 <CO_CANmodule_init+0xd4>
        rxArray[i].ident = 0U;
 8007248:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800724a:	4613      	mov	r3, r2
 800724c:	005b      	lsls	r3, r3, #1
 800724e:	4413      	add	r3, r2
 8007250:	009b      	lsls	r3, r3, #2
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4413      	add	r3, r2
 8007258:	2200      	movs	r2, #0
 800725a:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 800725c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800725e:	4613      	mov	r3, r2
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4413      	add	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	461a      	mov	r2, r3
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4413      	add	r3, r2
 800726c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007270:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8007272:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007274:	4613      	mov	r3, r2
 8007276:	005b      	lsls	r3, r3, #1
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	461a      	mov	r2, r3
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	2200      	movs	r2, #0
 8007284:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8007286:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8007288:	4613      	mov	r3, r2
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	4413      	add	r3, r2
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	461a      	mov	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4413      	add	r3, r2
 8007296:	2200      	movs	r2, #0
 8007298:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 800729a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800729c:	3301      	adds	r3, #1
 800729e:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80072a0:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80072a2:	887b      	ldrh	r3, [r7, #2]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d3cf      	bcc.n	8007248 <CO_CANmodule_init+0x7c>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 80072a8:	2300      	movs	r3, #0
 80072aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80072ac:	e00c      	b.n	80072c8 <CO_CANmodule_init+0xfc>
        txArray[i].bufferFull = false;
 80072ae:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80072b0:	4613      	mov	r3, r2
 80072b2:	005b      	lsls	r3, r3, #1
 80072b4:	4413      	add	r3, r2
 80072b6:	00db      	lsls	r3, r3, #3
 80072b8:	461a      	mov	r2, r3
 80072ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072bc:	4413      	add	r3, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 80072c2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80072c4:	3301      	adds	r3, #1
 80072c6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80072c8:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80072ca:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072ce:	429a      	cmp	r2, r3
 80072d0:	d3ed      	bcc.n	80072ae <CO_CANmodule_init+0xe2>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	68db      	ldr	r3, [r3, #12]
 80072d6:	4798      	blx	r3
#else
    CAN_FilterTypeDef FilterConfig;
#if defined(CAN)
    FilterConfig.FilterBank = 0;
#else
    if (((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance == CAN1) {
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a1d      	ldr	r2, [pc, #116]	; (8007358 <CO_CANmodule_init+0x18c>)
 80072e2:	4293      	cmp	r3, r2
 80072e4:	d102      	bne.n	80072ec <CO_CANmodule_init+0x120>
        FilterConfig.FilterBank = 0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80072ea:	e001      	b.n	80072f0 <CO_CANmodule_init+0x124>
    } else {
        FilterConfig.FilterBank = 14;
 80072ec:	230e      	movs	r3, #14
 80072ee:	62bb      	str	r3, [r7, #40]	; 0x28
    }
#endif
    FilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80072f0:	2300      	movs	r3, #0
 80072f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    FilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80072f4:	2301      	movs	r3, #1
 80072f6:	633b      	str	r3, [r7, #48]	; 0x30
    FilterConfig.FilterIdHigh = 0x0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
    FilterConfig.FilterIdLow = 0x0;
 80072fc:	2300      	movs	r3, #0
 80072fe:	61bb      	str	r3, [r7, #24]
    FilterConfig.FilterMaskIdHigh = 0x0;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
    FilterConfig.FilterMaskIdLow = 0x0;
 8007304:	2300      	movs	r3, #0
 8007306:	623b      	str	r3, [r7, #32]
    FilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8007308:	2300      	movs	r3, #0
 800730a:	627b      	str	r3, [r7, #36]	; 0x24

    FilterConfig.FilterActivation = ENABLE;
 800730c:	2301      	movs	r3, #1
 800730e:	637b      	str	r3, [r7, #52]	; 0x34
    FilterConfig.SlaveStartFilterBank = 14;
 8007310:	230e      	movs	r3, #14
 8007312:	63bb      	str	r3, [r7, #56]	; 0x38

    if (HAL_CAN_ConfigFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, &FilterConfig) != HAL_OK) {
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f107 0214 	add.w	r2, r7, #20
 800731c:	4611      	mov	r1, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f003 fa5a 	bl	800a7d8 <HAL_CAN_ConfigFilter>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d002      	beq.n	8007330 <CO_CANmodule_init+0x164>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800732a:	f04f 33ff 	mov.w	r3, #4294967295
 800732e:	e00c      	b.n	800734a <CO_CANmodule_init+0x17e>
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#else
    if (HAL_CAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle, CAN_IT_RX_FIFO0_MSG_PENDING
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	2113      	movs	r1, #19
 8007336:	4618      	mov	r0, r3
 8007338:	f003 fde2 	bl	800af00 <HAL_CAN_ActivateNotification>
 800733c:	4603      	mov	r3, r0
 800733e:	2b00      	cmp	r3, #0
 8007340:	d002      	beq.n	8007348 <CO_CANmodule_init+0x17c>
                                                                                 | CAN_IT_RX_FIFO1_MSG_PENDING
                                                                                 | CAN_IT_TX_MAILBOX_EMPTY)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007342:	f04f 33ff 	mov.w	r3, #4294967295
 8007346:	e000      	b.n	800734a <CO_CANmodule_init+0x17e>
    }
#endif

    return CO_ERROR_NO;
 8007348:	2300      	movs	r3, #0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3740      	adds	r7, #64	; 0x40
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	200003a0 	.word	0x200003a0
 8007358:	40006400 	.word	0x40006400

0800735c <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b082      	sub	sp, #8
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d009      	beq.n	800737e <CO_CANmodule_disable+0x22>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d005      	beq.n	800737e <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	4618      	mov	r0, r3
 800737a:	f003 fb51 	bl	800aa20 <HAL_CAN_Stop>
#endif
    }
}
 800737e:	bf00      	nop
 8007380:	3708      	adds	r7, #8
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	4608      	mov	r0, r1
 8007392:	4611      	mov	r1, r2
 8007394:	461a      	mov	r2, r3
 8007396:	4603      	mov	r3, r0
 8007398:	817b      	strh	r3, [r7, #10]
 800739a:	460b      	mov	r3, r1
 800739c:	813b      	strh	r3, [r7, #8]
 800739e:	4613      	mov	r3, r2
 80073a0:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d03c      	beq.n	8007426 <CO_CANrxBufferInit+0x9e>
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d039      	beq.n	8007426 <CO_CANrxBufferInit+0x9e>
 80073b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d036      	beq.n	8007426 <CO_CANrxBufferInit+0x9e>
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	891b      	ldrh	r3, [r3, #8]
 80073bc:	897a      	ldrh	r2, [r7, #10]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d231      	bcs.n	8007426 <CO_CANrxBufferInit+0x9e>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6859      	ldr	r1, [r3, #4]
 80073c6:	897a      	ldrh	r2, [r7, #10]
 80073c8:	4613      	mov	r3, r2
 80073ca:	005b      	lsls	r3, r3, #1
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 80073d4:	693b      	ldr	r3, [r7, #16]
 80073d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073d8:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 80073da:	693b      	ldr	r3, [r7, #16]
 80073dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80073de:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 80073e0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80073e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073e8:	b21b      	sxth	r3, r3
 80073ea:	6a3a      	ldr	r2, [r7, #32]
 80073ec:	2a00      	cmp	r2, #0
 80073ee:	d001      	beq.n	80073f4 <CO_CANrxBufferInit+0x6c>
 80073f0:	4a13      	ldr	r2, [pc, #76]	; (8007440 <CO_CANrxBufferInit+0xb8>)
 80073f2:	e000      	b.n	80073f6 <CO_CANrxBufferInit+0x6e>
 80073f4:	2200      	movs	r2, #0
 80073f6:	4313      	orrs	r3, r2
 80073f8:	b21b      	sxth	r3, r3
 80073fa:	b29a      	uxth	r2, r3
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007404:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007408:	b21b      	sxth	r3, r3
 800740a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800740e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007412:	b21b      	sxth	r3, r3
 8007414:	b29a      	uxth	r2, r3
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	699b      	ldr	r3, [r3, #24]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d004      	beq.n	800742c <CO_CANrxBufferInit+0xa4>
            __NOP();
 8007422:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007424:	e002      	b.n	800742c <CO_CANrxBufferInit+0xa4>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007426:	23ff      	movs	r3, #255	; 0xff
 8007428:	75fb      	strb	r3, [r7, #23]
 800742a:	e000      	b.n	800742e <CO_CANrxBufferInit+0xa6>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 800742c:	bf00      	nop
    }

    return ret;
 800742e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007432:	4618      	mov	r0, r3
 8007434:	371c      	adds	r7, #28
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	ffff8000 	.word	0xffff8000

08007444 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007444:	b480      	push	{r7}
 8007446:	b087      	sub	sp, #28
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	607b      	str	r3, [r7, #4]
 800744e:	460b      	mov	r3, r1
 8007450:	817b      	strh	r3, [r7, #10]
 8007452:	4613      	mov	r3, r2
 8007454:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8007456:	2300      	movs	r3, #0
 8007458:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d024      	beq.n	80074aa <CO_CANtxBufferInit+0x66>
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8a1b      	ldrh	r3, [r3, #16]
 8007464:	897a      	ldrh	r2, [r7, #10]
 8007466:	429a      	cmp	r2, r3
 8007468:	d21f      	bcs.n	80074aa <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	68d9      	ldr	r1, [r3, #12]
 800746e:	897a      	ldrh	r2, [r7, #10]
 8007470:	4613      	mov	r3, r2
 8007472:	005b      	lsls	r3, r3, #1
 8007474:	4413      	add	r3, r2
 8007476:	00db      	lsls	r3, r3, #3
 8007478:	440b      	add	r3, r1
 800747a:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 800747c:	893b      	ldrh	r3, [r7, #8]
 800747e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	2a00      	cmp	r2, #0
 8007486:	d002      	beq.n	800748e <CO_CANtxBufferInit+0x4a>
 8007488:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800748c:	e000      	b.n	8007490 <CO_CANtxBufferInit+0x4c>
 800748e:	2200      	movs	r2, #0
 8007490:	431a      	orrs	r2, r3
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	f897 2020 	ldrb.w	r2, [r7, #32]
 800749c:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	2200      	movs	r2, #0
 80074a2:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a8:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 80074aa:	697b      	ldr	r3, [r7, #20]
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	371c      	adds	r7, #28
 80074b0:	46bd      	mov	sp, r7
 80074b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b6:	4770      	bx	lr

080074b8 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b084      	sub	sp, #16
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
 80074c0:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 80074c2:	2300      	movs	r3, #0
 80074c4:	73fb      	strb	r3, [r7, #15]
            == HAL_OK;
    }
#else
    static CAN_TxHeaderTypeDef tx_hdr;
    /* Check if TX FIFO is ready to accept more messages */
    if (HAL_CAN_GetTxMailboxesFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f003 fbc0 	bl	800ac52 <HAL_CAN_GetTxMailboxesFreeLevel>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d028      	beq.n	800752a <prv_send_can_message+0x72>
        /*
    		 * RTR flag is part of identifier value
    		 * hence it needs to be properly decoded
    		 */
        tx_hdr.ExtId = 0u;
 80074d8:	4b16      	ldr	r3, [pc, #88]	; (8007534 <prv_send_can_message+0x7c>)
 80074da:	2200      	movs	r2, #0
 80074dc:	605a      	str	r2, [r3, #4]
        tx_hdr.IDE = CAN_ID_STD;
 80074de:	4b15      	ldr	r3, [pc, #84]	; (8007534 <prv_send_can_message+0x7c>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	609a      	str	r2, [r3, #8]
        tx_hdr.DLC = buffer->DLC;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	791b      	ldrb	r3, [r3, #4]
 80074e8:	461a      	mov	r2, r3
 80074ea:	4b12      	ldr	r3, [pc, #72]	; (8007534 <prv_send_can_message+0x7c>)
 80074ec:	611a      	str	r2, [r3, #16]
        tx_hdr.StdId = buffer->ident & CANID_MASK;
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074f6:	4a0f      	ldr	r2, [pc, #60]	; (8007534 <prv_send_can_message+0x7c>)
 80074f8:	6013      	str	r3, [r2, #0]
        tx_hdr.RTR = (buffer->ident & FLAG_RTR) ? CAN_RTR_REMOTE : CAN_RTR_DATA;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	0b9b      	lsrs	r3, r3, #14
 8007500:	f003 0302 	and.w	r3, r3, #2
 8007504:	4a0b      	ldr	r2, [pc, #44]	; (8007534 <prv_send_can_message+0x7c>)
 8007506:	60d3      	str	r3, [r2, #12]

        uint32_t TxMailboxNum; // Transmission MailBox number

        /* Now add message to FIFO. Should not fail */
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6898      	ldr	r0, [r3, #8]
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	1d5a      	adds	r2, r3, #5
 8007512:	f107 0308 	add.w	r3, r7, #8
 8007516:	4907      	ldr	r1, [pc, #28]	; (8007534 <prv_send_can_message+0x7c>)
 8007518:	f003 facb 	bl	800aab2 <HAL_CAN_AddTxMessage>
 800751c:	4603      	mov	r3, r0
                                       &TxMailboxNum)
                  == HAL_OK;
 800751e:	2b00      	cmp	r3, #0
 8007520:	bf0c      	ite	eq
 8007522:	2301      	moveq	r3, #1
 8007524:	2300      	movne	r3, #0
 8007526:	b2db      	uxtb	r3, r3
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
 8007528:	73fb      	strb	r3, [r7, #15]
    }
#endif
    return success;
 800752a:	7bfb      	ldrb	r3, [r7, #15]
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}
 8007534:	200003a4 	.word	0x200003a4

08007538 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8007538:	b580      	push	{r7, lr}
 800753a:	b086      	sub	sp, #24
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 8007542:	2300      	movs	r3, #0
 8007544:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	691b      	ldr	r3, [r3, #16]
 800754a:	2b00      	cmp	r3, #0
 800754c:	d00c      	beq.n	8007568 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6a1b      	ldr	r3, [r3, #32]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d106      	bne.n	8007564 <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	8a5b      	ldrh	r3, [r3, #18]
 800755a:	f043 0308 	orr.w	r3, r3, #8
 800755e:	b29a      	uxth	r2, r3
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 8007564:	23f7      	movs	r3, #247	; 0xf7
 8007566:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8007568:	f3ef 8310 	mrs	r3, PRIMASK
 800756c:	613b      	str	r3, [r7, #16]
  return(result);
 800756e:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 8007574:	b672      	cpsid	i
}
 8007576:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 8007578:	6839      	ldr	r1, [r7, #0]
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f7ff ff9c 	bl	80074b8 <prv_send_can_message>
 8007580:	4603      	mov	r3, r0
 8007582:	2b00      	cmp	r3, #0
 8007584:	d004      	beq.n	8007590 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	695a      	ldr	r2, [r3, #20]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	61da      	str	r2, [r3, #28]
 800758e:	e009      	b.n	80075a4 <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	2201      	movs	r2, #1
 8007594:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800759a:	b29b      	uxth	r3, r3
 800759c:	3301      	adds	r3, #1
 800759e:	b29a      	uxth	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f383 8810 	msr	PRIMASK, r3
}
 80075b0:	bf00      	nop

    return err;
 80075b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	3718      	adds	r7, #24
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 80075be:	b480      	push	{r7}
 80075c0:	b087      	sub	sp, #28
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 80075c6:	2300      	movs	r3, #0
 80075c8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80075ca:	f3ef 8310 	mrs	r3, PRIMASK
 80075ce:	60fb      	str	r3, [r7, #12]
  return(result);
 80075d0:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80075d6:	b672      	cpsid	i
}
 80075d8:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d004      	beq.n	80075ec <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 80075e8:	2301      	movs	r3, #1
 80075ea:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80075f0:	b29b      	uxth	r3, r3
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d032      	beq.n	800765c <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	8a1b      	ldrh	r3, [r3, #16]
 80075fa:	827b      	strh	r3, [r7, #18]
 80075fc:	e02b      	b.n	8007656 <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	68d9      	ldr	r1, [r3, #12]
 8007602:	8a7a      	ldrh	r2, [r7, #18]
 8007604:	4613      	mov	r3, r2
 8007606:	005b      	lsls	r3, r3, #1
 8007608:	4413      	add	r3, r2
 800760a:	00db      	lsls	r3, r3, #3
 800760c:	440b      	add	r3, r1
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d01d      	beq.n	8007650 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	68d9      	ldr	r1, [r3, #12]
 8007618:	8a7a      	ldrh	r2, [r7, #18]
 800761a:	4613      	mov	r3, r2
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	4413      	add	r3, r2
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	440b      	add	r3, r1
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d012      	beq.n	8007650 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	68d9      	ldr	r1, [r3, #12]
 800762e:	8a7a      	ldrh	r2, [r7, #18]
 8007630:	4613      	mov	r3, r2
 8007632:	005b      	lsls	r3, r3, #1
 8007634:	4413      	add	r3, r2
 8007636:	00db      	lsls	r3, r3, #3
 8007638:	440b      	add	r3, r1
 800763a:	2200      	movs	r2, #0
 800763c:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007642:	b29b      	uxth	r3, r3
 8007644:	3b01      	subs	r3, #1
 8007646:	b29a      	uxth	r2, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 800764c:	2302      	movs	r3, #2
 800764e:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8007650:	8a7b      	ldrh	r3, [r7, #18]
 8007652:	3b01      	subs	r3, #1
 8007654:	827b      	strh	r3, [r7, #18]
 8007656:	8a7b      	ldrh	r3, [r7, #18]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1d0      	bne.n	80075fe <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	f383 8810 	msr	PRIMASK, r3
}
 8007668:	bf00      	nop
    if (tpdoDeleted) {
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d006      	beq.n	800767e <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	8a5b      	ldrh	r3, [r3, #18]
 8007674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007678:	b29a      	uxth	r2, r3
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	825a      	strh	r2, [r3, #18]
    }
}
 800767e:	bf00      	nop
 8007680:	371c      	adds	r7, #28
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 8007692:	2300      	movs	r3, #0
 8007694:	60bb      	str	r3, [r7, #8]

        CANmodule->CANerrorStatus = status;
    }
#else

    err = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	689b      	ldr	r3, [r3, #8]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	699b      	ldr	r3, [r3, #24]
 80076a0:	f003 0307 	and.w	r3, r3, #7
 80076a4:	60bb      	str	r3, [r7, #8]
          & (CAN_ESR_BOFF | CAN_ESR_EPVF | CAN_ESR_EWGF);

    //    uint32_t esrVal = ((CAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->ESR; Debug purpose
    if (CANmodule->errOld != err) {
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076aa:	68ba      	ldr	r2, [r7, #8]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d02e      	beq.n	800770e <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	8a5b      	ldrh	r3, [r3, #18]
 80076b4:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & CAN_ESR_BOFF) {
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	f003 0304 	and.w	r3, r3, #4
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d004      	beq.n	80076d0 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 80076c6:	89fb      	ldrh	r3, [r7, #14]
 80076c8:	f043 0304 	orr.w	r3, r3, #4
 80076cc:	81fb      	strh	r3, [r7, #14]
 80076ce:	e01b      	b.n	8007708 <CO_CANmodule_process+0x7e>
            // In this driver, we assume that auto bus recovery is activated ! so this error will eventually handled automatically.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 80076d0:	89fb      	ldrh	r3, [r7, #14]
 80076d2:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 80076d6:	f023 0303 	bic.w	r3, r3, #3
 80076da:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & CAN_ESR_EWGF) {
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	f003 0301 	and.w	r3, r3, #1
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d005      	beq.n	80076f2 <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 80076e6:	89fb      	ldrh	r3, [r7, #14]
 80076e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076ec:	f043 0301 	orr.w	r3, r3, #1
 80076f0:	81fb      	strh	r3, [r7, #14]
            }

            if (err & CAN_ESR_EPVF) {
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	f003 0302 	and.w	r3, r3, #2
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 80076fc:	89fb      	ldrh	r3, [r7, #14]
 80076fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007702:	f043 0302 	orr.w	r3, r3, #2
 8007706:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	89fa      	ldrh	r2, [r7, #14]
 800770c:	825a      	strh	r2, [r3, #18]
    }

#endif
}
 800770e:	bf00      	nop
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
	...

0800771c <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b08c      	sub	sp, #48	; 0x30
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8007728:	2300      	movs	r3, #0
 800772a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
    }
    rcvMsgIdent = rcvMsg.ident;
#else
    static CAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_CAN_GetRxMessage(hcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 8007732:	f107 0314 	add.w	r3, r7, #20
 8007736:	3305      	adds	r3, #5
 8007738:	4a2c      	ldr	r2, [pc, #176]	; (80077ec <prv_read_can_received_msg+0xd0>)
 800773a:	68b9      	ldr	r1, [r7, #8]
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f003 fabd 	bl	800acbc <HAL_CAN_GetRxMessage>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d14c      	bne.n	80077e2 <prv_read_can_received_msg+0xc6>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.StdId | (rx_hdr.RTR == CAN_RTR_REMOTE ? FLAG_RTR : 0x00);
 8007748:	4b28      	ldr	r3, [pc, #160]	; (80077ec <prv_read_can_received_msg+0xd0>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a27      	ldr	r2, [pc, #156]	; (80077ec <prv_read_can_received_msg+0xd0>)
 800774e:	68d2      	ldr	r2, [r2, #12]
 8007750:	2a02      	cmp	r2, #2
 8007752:	d102      	bne.n	800775a <prv_read_can_received_msg+0x3e>
 8007754:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007758:	e000      	b.n	800775c <prv_read_can_received_msg+0x40>
 800775a:	2200      	movs	r2, #0
 800775c:	4313      	orrs	r3, r2
 800775e:	617b      	str	r3, [r7, #20]
    rcvMsg.dlc = rx_hdr.DLC;
 8007760:	4b22      	ldr	r3, [pc, #136]	; (80077ec <prv_read_can_received_msg+0xd0>)
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	b2db      	uxtb	r3, r3
 8007766:	763b      	strb	r3, [r7, #24]
    rcvMsgIdent = rcvMsg.ident;
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 800776c:	4b20      	ldr	r3, [pc, #128]	; (80077f0 <prv_read_can_received_msg+0xd4>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d001      	beq.n	800777a <prv_read_can_received_msg+0x5e>
        __BKPT(0);
 8007776:	be00      	bkpt	0x0000
 8007778:	e01f      	b.n	80077ba <prv_read_can_received_msg+0x9e>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 800777a:	4b1d      	ldr	r3, [pc, #116]	; (80077f0 <prv_read_can_received_msg+0xd4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8007782:	4b1b      	ldr	r3, [pc, #108]	; (80077f0 <prv_read_can_received_msg+0xd4>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	891b      	ldrh	r3, [r3, #8]
 8007788:	857b      	strh	r3, [r7, #42]	; 0x2a
 800778a:	e013      	b.n	80077b4 <prv_read_can_received_msg+0x98>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	881b      	ldrh	r3, [r3, #0]
 8007790:	461a      	mov	r2, r3
 8007792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007794:	4053      	eors	r3, r2
 8007796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007798:	8852      	ldrh	r2, [r2, #2]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d103      	bne.n	80077a8 <prv_read_can_received_msg+0x8c>
                messageFound = 1;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 80077a6:	e008      	b.n	80077ba <prv_read_can_received_msg+0x9e>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 80077a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80077aa:	3b01      	subs	r3, #1
 80077ac:	857b      	strh	r3, [r7, #42]	; 0x2a
 80077ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077b0:	330c      	adds	r3, #12
 80077b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077b4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d1e8      	bne.n	800778c <prv_read_can_received_msg+0x70>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 80077ba:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d010      	beq.n	80077e4 <prv_read_can_received_msg+0xc8>
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00d      	beq.n	80077e4 <prv_read_can_received_msg+0xc8>
 80077c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d009      	beq.n	80077e4 <prv_read_can_received_msg+0xc8>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 80077d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077d6:	6852      	ldr	r2, [r2, #4]
 80077d8:	f107 0114 	add.w	r1, r7, #20
 80077dc:	4610      	mov	r0, r2
 80077de:	4798      	blx	r3
 80077e0:	e000      	b.n	80077e4 <prv_read_can_received_msg+0xc8>
        return;
 80077e2:	bf00      	nop
    }
}
 80077e4:	3730      	adds	r7, #48	; 0x30
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	200003bc 	.word	0x200003bc
 80077f0:	200003a0 	.word	0x200003a0

080077f4 <HAL_CAN_RxFifo0MsgPendingCallback>:
 * \brief           Rx FIFO 0 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b082      	sub	sp, #8
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO0, 0);
 80077fc:	2200      	movs	r2, #0
 80077fe:	2100      	movs	r1, #0
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff ff8b 	bl	800771c <prv_read_can_received_msg>
}
 8007806:	bf00      	nop
 8007808:	3708      	adds	r7, #8
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}

0800780e <HAL_CAN_RxFifo1MsgPendingCallback>:
 * \brief           Rx FIFO 1 callback.
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 */
void
HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan) {
 800780e:	b580      	push	{r7, lr}
 8007810:	b082      	sub	sp, #8
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
    prv_read_can_received_msg(hcan, CAN_RX_FIFO1, 0);
 8007816:	2200      	movs	r2, #0
 8007818:	2101      	movs	r1, #1
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f7ff ff7e 	bl	800771c <prv_read_can_received_msg>
}
 8007820:	bf00      	nop
 8007822:	3708      	adds	r7, #8
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <CO_CANinterrupt_TX>:
 * \param[in]       hcan: pointer to an CAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified CAN.
 * \param[in]       MailboxNumber: the mailbox number that has been transmitted
 */
void
CO_CANinterrupt_TX(CO_CANmodule_t* CANmodule, uint32_t MailboxNumber) {
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]

    CANmodule->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	621a      	str	r2, [r3, #32]
    CANmodule->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2200      	movs	r2, #0
 800783c:	61da      	str	r2, [r3, #28]
    if (CANmodule->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007842:	b29b      	uxth	r3, r3
 8007844:	2b00      	cmp	r3, #0
 8007846:	d03d      	beq.n	80078c4 <CO_CANinterrupt_TX+0x9c>
        CO_CANtx_t* buffer = &CANmodule->txArray[0]; /* Start with first buffer handle */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800784e:	f3ef 8310 	mrs	r3, PRIMASK
 8007852:	60fb      	str	r3, [r7, #12]
  return(result);
 8007854:	68fa      	ldr	r2, [r7, #12]
		 * This function is always called from interrupt,
		 * however to make sure no preemption can happen, interrupts are anyway locked
		 * (unless you can guarantee no higher priority interrupt will try to access to CAN instance and send data,
		 *  then no need to lock interrupts..)
		 */
        CO_LOCK_CAN_SEND(CANmodule);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800785a:	b672      	cpsid	i
}
 800785c:	bf00      	nop
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	8a1b      	ldrh	r3, [r3, #16]
 8007862:	827b      	strh	r3, [r7, #18]
 8007864:	e01e      	b.n	80078a4 <CO_CANinterrupt_TX+0x7c>
            /* Try to send message */
            if (buffer->bufferFull) {
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	691b      	ldr	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d014      	beq.n	8007898 <CO_CANinterrupt_TX+0x70>
                if (prv_send_can_message(CANmodule, buffer)) {
 800786e:	6979      	ldr	r1, [r7, #20]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f7ff fe21 	bl	80074b8 <prv_send_can_message>
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00d      	beq.n	8007898 <CO_CANinterrupt_TX+0x70>
                    buffer->bufferFull = false;
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2200      	movs	r2, #0
 8007880:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007886:	b29b      	uxth	r3, r3
 8007888:	3b01      	subs	r3, #1
 800788a:	b29a      	uxth	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANmodule->bufferInhibitFlag = buffer->syncFlag;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	695a      	ldr	r2, [r3, #20]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	61da      	str	r2, [r3, #28]
        for (i = CANmodule->txSize; i > 0U; --i, ++buffer) {
 8007898:	8a7b      	ldrh	r3, [r7, #18]
 800789a:	3b01      	subs	r3, #1
 800789c:	827b      	strh	r3, [r7, #18]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	3318      	adds	r3, #24
 80078a2:	617b      	str	r3, [r7, #20]
 80078a4:	8a7b      	ldrh	r3, [r7, #18]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1dd      	bne.n	8007866 <CO_CANinterrupt_TX+0x3e>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 80078aa:	8a7b      	ldrh	r3, [r7, #18]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d102      	bne.n	80078b6 <CO_CANinterrupt_TX+0x8e>
            CANmodule->CANtxCount = 0U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2200      	movs	r2, #0
 80078b4:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANmodule);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ba:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	f383 8810 	msr	PRIMASK, r3
}
 80078c2:	bf00      	nop
    }
}
 80078c4:	bf00      	nop
 80078c6:	3718      	adds	r7, #24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	bd80      	pop	{r7, pc}

080078cc <HAL_CAN_TxMailbox0CompleteCallback>:

void
HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan) {
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80078d4:	4b04      	ldr	r3, [pc, #16]	; (80078e8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2101      	movs	r1, #1
 80078da:	4618      	mov	r0, r3
 80078dc:	f7ff ffa4 	bl	8007828 <CO_CANinterrupt_TX>
}
 80078e0:	bf00      	nop
 80078e2:	3708      	adds	r7, #8
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}
 80078e8:	200003a0 	.word	0x200003a0

080078ec <HAL_CAN_TxMailbox1CompleteCallback>:

void
HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan) {
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b082      	sub	sp, #8
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2101      	movs	r1, #1
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7ff ff94 	bl	8007828 <CO_CANinterrupt_TX>
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}
 8007908:	200003a0 	.word	0x200003a0

0800790c <HAL_CAN_TxMailbox2CompleteCallback>:

void
HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan) {
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
    CO_CANinterrupt_TX(CANModule_local, CAN_TX_MAILBOX0);
 8007914:	4b04      	ldr	r3, [pc, #16]	; (8007928 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	2101      	movs	r1, #1
 800791a:	4618      	mov	r0, r3
 800791c:	f7ff ff84 	bl	8007828 <CO_CANinterrupt_TX>
}
 8007920:	bf00      	nop
 8007922:	3708      	adds	r7, #8
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}
 8007928:	200003a0 	.word	0x200003a0

0800792c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007932:	463b      	mov	r3, r7
 8007934:	2200      	movs	r2, #0
 8007936:	601a      	str	r2, [r3, #0]
 8007938:	605a      	str	r2, [r3, #4]
 800793a:	609a      	str	r2, [r3, #8]
 800793c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800793e:	4b21      	ldr	r3, [pc, #132]	; (80079c4 <MX_ADC1_Init+0x98>)
 8007940:	4a21      	ldr	r2, [pc, #132]	; (80079c8 <MX_ADC1_Init+0x9c>)
 8007942:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8007944:	4b1f      	ldr	r3, [pc, #124]	; (80079c4 <MX_ADC1_Init+0x98>)
 8007946:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800794a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800794c:	4b1d      	ldr	r3, [pc, #116]	; (80079c4 <MX_ADC1_Init+0x98>)
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8007952:	4b1c      	ldr	r3, [pc, #112]	; (80079c4 <MX_ADC1_Init+0x98>)
 8007954:	2200      	movs	r2, #0
 8007956:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007958:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <MX_ADC1_Init+0x98>)
 800795a:	2201      	movs	r2, #1
 800795c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800795e:	4b19      	ldr	r3, [pc, #100]	; (80079c4 <MX_ADC1_Init+0x98>)
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8007966:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <MX_ADC1_Init+0x98>)
 8007968:	2200      	movs	r2, #0
 800796a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800796c:	4b15      	ldr	r3, [pc, #84]	; (80079c4 <MX_ADC1_Init+0x98>)
 800796e:	4a17      	ldr	r2, [pc, #92]	; (80079cc <MX_ADC1_Init+0xa0>)
 8007970:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <MX_ADC1_Init+0x98>)
 8007974:	2200      	movs	r2, #0
 8007976:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8007978:	4b12      	ldr	r3, [pc, #72]	; (80079c4 <MX_ADC1_Init+0x98>)
 800797a:	2201      	movs	r2, #1
 800797c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800797e:	4b11      	ldr	r3, [pc, #68]	; (80079c4 <MX_ADC1_Init+0x98>)
 8007980:	2201      	movs	r2, #1
 8007982:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007986:	4b0f      	ldr	r3, [pc, #60]	; (80079c4 <MX_ADC1_Init+0x98>)
 8007988:	2201      	movs	r2, #1
 800798a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800798c:	480d      	ldr	r0, [pc, #52]	; (80079c4 <MX_ADC1_Init+0x98>)
 800798e:	f002 fa05 	bl	8009d9c <HAL_ADC_Init>
 8007992:	4603      	mov	r3, r0
 8007994:	2b00      	cmp	r3, #0
 8007996:	d001      	beq.n	800799c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8007998:	f000 fde8 	bl	800856c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800799c:	2300      	movs	r3, #0
 800799e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80079a0:	2301      	movs	r3, #1
 80079a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80079a4:	2307      	movs	r3, #7
 80079a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80079a8:	463b      	mov	r3, r7
 80079aa:	4619      	mov	r1, r3
 80079ac:	4805      	ldr	r0, [pc, #20]	; (80079c4 <MX_ADC1_Init+0x98>)
 80079ae:	f002 fb67 	bl	800a080 <HAL_ADC_ConfigChannel>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d001      	beq.n	80079bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80079b8:	f000 fdd8 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80079bc:	bf00      	nop
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	200003d8 	.word	0x200003d8
 80079c8:	40012000 	.word	0x40012000
 80079cc:	0f000001 	.word	0x0f000001

080079d0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b08a      	sub	sp, #40	; 0x28
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079d8:	f107 0314 	add.w	r3, r7, #20
 80079dc:	2200      	movs	r2, #0
 80079de:	601a      	str	r2, [r3, #0]
 80079e0:	605a      	str	r2, [r3, #4]
 80079e2:	609a      	str	r2, [r3, #8]
 80079e4:	60da      	str	r2, [r3, #12]
 80079e6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a2f      	ldr	r2, [pc, #188]	; (8007aac <HAL_ADC_MspInit+0xdc>)
 80079ee:	4293      	cmp	r3, r2
 80079f0:	d157      	bne.n	8007aa2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80079f2:	2300      	movs	r3, #0
 80079f4:	613b      	str	r3, [r7, #16]
 80079f6:	4b2e      	ldr	r3, [pc, #184]	; (8007ab0 <HAL_ADC_MspInit+0xe0>)
 80079f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079fa:	4a2d      	ldr	r2, [pc, #180]	; (8007ab0 <HAL_ADC_MspInit+0xe0>)
 80079fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a00:	6453      	str	r3, [r2, #68]	; 0x44
 8007a02:	4b2b      	ldr	r3, [pc, #172]	; (8007ab0 <HAL_ADC_MspInit+0xe0>)
 8007a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60fb      	str	r3, [r7, #12]
 8007a12:	4b27      	ldr	r3, [pc, #156]	; (8007ab0 <HAL_ADC_MspInit+0xe0>)
 8007a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a16:	4a26      	ldr	r2, [pc, #152]	; (8007ab0 <HAL_ADC_MspInit+0xe0>)
 8007a18:	f043 0301 	orr.w	r3, r3, #1
 8007a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8007a1e:	4b24      	ldr	r3, [pc, #144]	; (8007ab0 <HAL_ADC_MspInit+0xe0>)
 8007a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a22:	f003 0301 	and.w	r3, r3, #1
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007a2e:	2303      	movs	r3, #3
 8007a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a36:	f107 0314 	add.w	r3, r7, #20
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	481d      	ldr	r0, [pc, #116]	; (8007ab4 <HAL_ADC_MspInit+0xe4>)
 8007a3e:	f004 f929 	bl	800bc94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8007a42:	4b1d      	ldr	r3, [pc, #116]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a44:	4a1d      	ldr	r2, [pc, #116]	; (8007abc <HAL_ADC_MspInit+0xec>)
 8007a46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8007a48:	4b1b      	ldr	r3, [pc, #108]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007a4e:	4b1a      	ldr	r3, [pc, #104]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007a54:	4b18      	ldr	r3, [pc, #96]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007a5a:	4b17      	ldr	r3, [pc, #92]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007a60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8007a62:	4b15      	ldr	r3, [pc, #84]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8007a6a:	4b13      	ldr	r3, [pc, #76]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007a70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8007a72:	4b11      	ldr	r3, [pc, #68]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8007a7a:	4b0f      	ldr	r3, [pc, #60]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007a80:	4b0d      	ldr	r3, [pc, #52]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a82:	2200      	movs	r2, #0
 8007a84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8007a86:	480c      	ldr	r0, [pc, #48]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a88:	f003 fd94 	bl	800b5b4 <HAL_DMA_Init>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d001      	beq.n	8007a96 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8007a92:	f000 fd6b 	bl	800856c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	4a07      	ldr	r2, [pc, #28]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a9a:	639a      	str	r2, [r3, #56]	; 0x38
 8007a9c:	4a06      	ldr	r2, [pc, #24]	; (8007ab8 <HAL_ADC_MspInit+0xe8>)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8007aa2:	bf00      	nop
 8007aa4:	3728      	adds	r7, #40	; 0x28
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	40012000 	.word	0x40012000
 8007ab0:	40023800 	.word	0x40023800
 8007ab4:	40020000 	.word	0x40020000
 8007ab8:	20000420 	.word	0x20000420
 8007abc:	40026410 	.word	0x40026410

08007ac0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8007ac4:	4b17      	ldr	r3, [pc, #92]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007ac6:	4a18      	ldr	r2, [pc, #96]	; (8007b28 <MX_CAN1_Init+0x68>)
 8007ac8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8007aca:	4b16      	ldr	r3, [pc, #88]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007acc:	2206      	movs	r2, #6
 8007ace:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8007ad0:	4b14      	ldr	r3, [pc, #80]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8007ad6:	4b13      	ldr	r3, [pc, #76]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007ad8:	2200      	movs	r2, #0
 8007ada:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;
 8007adc:	4b11      	ldr	r3, [pc, #68]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007ade:	f44f 2220 	mov.w	r2, #655360	; 0xa0000
 8007ae2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8007ae4:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007ae6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007aea:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8007aec:	4b0d      	ldr	r3, [pc, #52]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8007af2:	4b0c      	ldr	r3, [pc, #48]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8007af8:	4b0a      	ldr	r3, [pc, #40]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007afa:	2200      	movs	r2, #0
 8007afc:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8007afe:	4b09      	ldr	r3, [pc, #36]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007b00:	2201      	movs	r2, #1
 8007b02:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8007b04:	4b07      	ldr	r3, [pc, #28]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8007b0a:	4b06      	ldr	r3, [pc, #24]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007b0c:	2201      	movs	r2, #1
 8007b0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8007b10:	4804      	ldr	r0, [pc, #16]	; (8007b24 <MX_CAN1_Init+0x64>)
 8007b12:	f002 fd65 	bl	800a5e0 <HAL_CAN_Init>
 8007b16:	4603      	mov	r3, r0
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8007b1c:	f000 fd26 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8007b20:	bf00      	nop
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	20000480 	.word	0x20000480
 8007b28:	40006400 	.word	0x40006400

08007b2c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b08a      	sub	sp, #40	; 0x28
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b34:	f107 0314 	add.w	r3, r7, #20
 8007b38:	2200      	movs	r2, #0
 8007b3a:	601a      	str	r2, [r3, #0]
 8007b3c:	605a      	str	r2, [r3, #4]
 8007b3e:	609a      	str	r2, [r3, #8]
 8007b40:	60da      	str	r2, [r3, #12]
 8007b42:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a25      	ldr	r2, [pc, #148]	; (8007be0 <HAL_CAN_MspInit+0xb4>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d143      	bne.n	8007bd6 <HAL_CAN_MspInit+0xaa>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007b4e:	2300      	movs	r3, #0
 8007b50:	613b      	str	r3, [r7, #16]
 8007b52:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <HAL_CAN_MspInit+0xb8>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	4a23      	ldr	r2, [pc, #140]	; (8007be4 <HAL_CAN_MspInit+0xb8>)
 8007b58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8007b5e:	4b21      	ldr	r3, [pc, #132]	; (8007be4 <HAL_CAN_MspInit+0xb8>)
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b66:	613b      	str	r3, [r7, #16]
 8007b68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
 8007b6e:	4b1d      	ldr	r3, [pc, #116]	; (8007be4 <HAL_CAN_MspInit+0xb8>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	4a1c      	ldr	r2, [pc, #112]	; (8007be4 <HAL_CAN_MspInit+0xb8>)
 8007b74:	f043 0308 	orr.w	r3, r3, #8
 8007b78:	6313      	str	r3, [r2, #48]	; 0x30
 8007b7a:	4b1a      	ldr	r3, [pc, #104]	; (8007be4 <HAL_CAN_MspInit+0xb8>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	f003 0308 	and.w	r3, r3, #8
 8007b82:	60fb      	str	r3, [r7, #12]
 8007b84:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8007b86:	2303      	movs	r3, #3
 8007b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b92:	2303      	movs	r3, #3
 8007b94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8007b96:	2309      	movs	r3, #9
 8007b98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b9a:	f107 0314 	add.w	r3, r7, #20
 8007b9e:	4619      	mov	r1, r3
 8007ba0:	4811      	ldr	r0, [pc, #68]	; (8007be8 <HAL_CAN_MspInit+0xbc>)
 8007ba2:	f004 f877 	bl	800bc94 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2100      	movs	r1, #0
 8007baa:	2013      	movs	r0, #19
 8007bac:	f003 fcc7 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8007bb0:	2013      	movs	r0, #19
 8007bb2:	f003 fce0 	bl	800b576 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	2100      	movs	r1, #0
 8007bba:	2014      	movs	r0, #20
 8007bbc:	f003 fcbf 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8007bc0:	2014      	movs	r0, #20
 8007bc2:	f003 fcd8 	bl	800b576 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	2100      	movs	r1, #0
 8007bca:	2015      	movs	r0, #21
 8007bcc:	f003 fcb7 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8007bd0:	2015      	movs	r0, #21
 8007bd2:	f003 fcd0 	bl	800b576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8007bd6:	bf00      	nop
 8007bd8:	3728      	adds	r7, #40	; 0x28
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40006400 	.word	0x40006400
 8007be4:	40023800 	.word	0x40023800
 8007be8:	40020c00 	.word	0x40020c00

08007bec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b082      	sub	sp, #8
 8007bf0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
 8007bf6:	4b0c      	ldr	r3, [pc, #48]	; (8007c28 <MX_DMA_Init+0x3c>)
 8007bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bfa:	4a0b      	ldr	r2, [pc, #44]	; (8007c28 <MX_DMA_Init+0x3c>)
 8007bfc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007c00:	6313      	str	r3, [r2, #48]	; 0x30
 8007c02:	4b09      	ldr	r3, [pc, #36]	; (8007c28 <MX_DMA_Init+0x3c>)
 8007c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c0a:	607b      	str	r3, [r7, #4]
 8007c0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2100      	movs	r1, #0
 8007c12:	2038      	movs	r0, #56	; 0x38
 8007c14:	f003 fc93 	bl	800b53e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8007c18:	2038      	movs	r0, #56	; 0x38
 8007c1a:	f003 fcac 	bl	800b576 <HAL_NVIC_EnableIRQ>

}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	40023800 	.word	0x40023800

08007c2c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b08c      	sub	sp, #48	; 0x30
 8007c30:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c32:	f107 031c 	add.w	r3, r7, #28
 8007c36:	2200      	movs	r2, #0
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	605a      	str	r2, [r3, #4]
 8007c3c:	609a      	str	r2, [r3, #8]
 8007c3e:	60da      	str	r2, [r3, #12]
 8007c40:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007c42:	2300      	movs	r3, #0
 8007c44:	61bb      	str	r3, [r7, #24]
 8007c46:	4b77      	ldr	r3, [pc, #476]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c4a:	4a76      	ldr	r2, [pc, #472]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c4c:	f043 0310 	orr.w	r3, r3, #16
 8007c50:	6313      	str	r3, [r2, #48]	; 0x30
 8007c52:	4b74      	ldr	r3, [pc, #464]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c56:	f003 0310 	and.w	r3, r3, #16
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007c5e:	2300      	movs	r3, #0
 8007c60:	617b      	str	r3, [r7, #20]
 8007c62:	4b70      	ldr	r3, [pc, #448]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c66:	4a6f      	ldr	r2, [pc, #444]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c68:	f043 0304 	orr.w	r3, r3, #4
 8007c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8007c6e:	4b6d      	ldr	r3, [pc, #436]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c72:	f003 0304 	and.w	r3, r3, #4
 8007c76:	617b      	str	r3, [r7, #20]
 8007c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	613b      	str	r3, [r7, #16]
 8007c7e:	4b69      	ldr	r3, [pc, #420]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c82:	4a68      	ldr	r2, [pc, #416]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007c88:	6313      	str	r3, [r2, #48]	; 0x30
 8007c8a:	4b66      	ldr	r3, [pc, #408]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c92:	613b      	str	r3, [r7, #16]
 8007c94:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c96:	2300      	movs	r3, #0
 8007c98:	60fb      	str	r3, [r7, #12]
 8007c9a:	4b62      	ldr	r3, [pc, #392]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9e:	4a61      	ldr	r2, [pc, #388]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007ca0:	f043 0301 	orr.w	r3, r3, #1
 8007ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8007ca6:	4b5f      	ldr	r3, [pc, #380]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	60fb      	str	r3, [r7, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60bb      	str	r3, [r7, #8]
 8007cb6:	4b5b      	ldr	r3, [pc, #364]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cba:	4a5a      	ldr	r2, [pc, #360]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007cbc:	f043 0302 	orr.w	r3, r3, #2
 8007cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cc2:	4b58      	ldr	r3, [pc, #352]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	60bb      	str	r3, [r7, #8]
 8007ccc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007cce:	2300      	movs	r3, #0
 8007cd0:	607b      	str	r3, [r7, #4]
 8007cd2:	4b54      	ldr	r3, [pc, #336]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd6:	4a53      	ldr	r2, [pc, #332]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007cd8:	f043 0308 	orr.w	r3, r3, #8
 8007cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8007cde:	4b51      	ldr	r3, [pc, #324]	; (8007e24 <MX_GPIO_Init+0x1f8>)
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce2:	f003 0308 	and.w	r3, r3, #8
 8007ce6:	607b      	str	r3, [r7, #4]
 8007ce8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Heat_Enable_Pin|Pill_Gate_Enable_Pin|Pill_Gate_Dir_Pin, GPIO_PIN_RESET);
 8007cea:	2200      	movs	r2, #0
 8007cec:	2113      	movs	r1, #19
 8007cee:	484e      	ldr	r0, [pc, #312]	; (8007e28 <MX_GPIO_Init+0x1fc>)
 8007cf0:	f004 f994 	bl	800c01c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_Default_Pin|CAN_Mode_Pin|Roller_In_1_Pin|Roller_In_2_Pin, GPIO_PIN_RESET);
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	f242 0131 	movw	r1, #8241	; 0x2031
 8007cfa:	484c      	ldr	r0, [pc, #304]	; (8007e2c <MX_GPIO_Init+0x200>)
 8007cfc:	f004 f98e 	bl	800c01c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Pkg_Len_In_1_Pin|Pkg_Len_In_2_Pin, GPIO_PIN_RESET);
 8007d00:	2200      	movs	r2, #0
 8007d02:	2130      	movs	r1, #48	; 0x30
 8007d04:	484a      	ldr	r0, [pc, #296]	; (8007e30 <MX_GPIO_Init+0x204>)
 8007d06:	f004 f989 	bl	800c01c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Pill_Pkg_Rev_Pin|Pill_Pkg_Brk_Pin|Pill_Pkg_Fwd_Pin|Pkg_Dis_Enable_Pin
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	f24b 01c0 	movw	r1, #45248	; 0xb0c0
 8007d10:	4848      	ldr	r0, [pc, #288]	; (8007e34 <MX_GPIO_Init+0x208>)
 8007d12:	f004 f983 	bl	800c01c <HAL_GPIO_WritePin>
                          |Pkg_Dis_Dir_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Pill_Pkg_Jog_Pin|Pill_Pkg_Clr_Pin, GPIO_PIN_RESET);
 8007d16:	2200      	movs	r2, #0
 8007d18:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007d1c:	4846      	ldr	r0, [pc, #280]	; (8007e38 <MX_GPIO_Init+0x20c>)
 8007d1e:	f004 f97d 	bl	800c01c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SV_X2_Pin|SV_X1_Pin|SV_X4_Pin|SV_X3_Pin
 8007d22:	2201      	movs	r2, #1
 8007d24:	21f8      	movs	r1, #248	; 0xf8
 8007d26:	4844      	ldr	r0, [pc, #272]	; (8007e38 <MX_GPIO_Init+0x20c>)
 8007d28:	f004 f978 	bl	800c01c <HAL_GPIO_WritePin>
                          |LED_2_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_1_Pin|LED_4_Pin|LED_3_Pin, GPIO_PIN_SET);
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	2138      	movs	r1, #56	; 0x38
 8007d30:	4840      	ldr	r0, [pc, #256]	; (8007e34 <MX_GPIO_Init+0x208>)
 8007d32:	f004 f973 	bl	800c01c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = Heat_Enable_Pin|Pill_Gate_Enable_Pin|Pill_Gate_Dir_Pin;
 8007d36:	2313      	movs	r3, #19
 8007d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d3e:	2300      	movs	r3, #0
 8007d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d42:	2300      	movs	r3, #0
 8007d44:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007d46:	f107 031c 	add.w	r3, r7, #28
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	4836      	ldr	r0, [pc, #216]	; (8007e28 <MX_GPIO_Init+0x1fc>)
 8007d4e:	f003 ffa1 	bl	800bc94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_Default_Pin|CAN_Mode_Pin|Roller_In_1_Pin|Roller_In_2_Pin;
 8007d52:	f242 0331 	movw	r3, #8241	; 0x2031
 8007d56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d60:	2300      	movs	r3, #0
 8007d62:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007d64:	f107 031c 	add.w	r3, r7, #28
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4830      	ldr	r0, [pc, #192]	; (8007e2c <MX_GPIO_Init+0x200>)
 8007d6c:	f003 ff92 	bl	800bc94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Pkg_Len_In_1_Pin|Pkg_Len_In_2_Pin;
 8007d70:	2330      	movs	r3, #48	; 0x30
 8007d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007d74:	2301      	movs	r3, #1
 8007d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d78:	2300      	movs	r3, #0
 8007d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d80:	f107 031c 	add.w	r3, r7, #28
 8007d84:	4619      	mov	r1, r3
 8007d86:	482a      	ldr	r0, [pc, #168]	; (8007e30 <MX_GPIO_Init+0x204>)
 8007d88:	f003 ff84 	bl	800bc94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PH_X1_Pin;
 8007d8c:	2380      	movs	r3, #128	; 0x80
 8007d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007d90:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007d96:	2301      	movs	r3, #1
 8007d98:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PH_X1_GPIO_Port, &GPIO_InitStruct);
 8007d9a:	f107 031c 	add.w	r3, r7, #28
 8007d9e:	4619      	mov	r1, r3
 8007da0:	4821      	ldr	r0, [pc, #132]	; (8007e28 <MX_GPIO_Init+0x1fc>)
 8007da2:	f003 ff77 	bl	800bc94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PH_X2_Pin|PH_X3_Pin|PH_X7_Pin|PH_X8_Pin;
 8007da6:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 8007daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007dac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007db0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007db2:	2301      	movs	r3, #1
 8007db4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007db6:	f107 031c 	add.w	r3, r7, #28
 8007dba:	4619      	mov	r1, r3
 8007dbc:	481a      	ldr	r0, [pc, #104]	; (8007e28 <MX_GPIO_Init+0x1fc>)
 8007dbe:	f003 ff69 	bl	800bc94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Pill_Pkg_Rev_Pin|Pill_Pkg_Brk_Pin|Pill_Pkg_Fwd_Pin|LED_1_Pin
 8007dc2:	f24b 03f8 	movw	r3, #45304	; 0xb0f8
 8007dc6:	61fb      	str	r3, [r7, #28]
                          |LED_4_Pin|LED_3_Pin|Pkg_Dis_Enable_Pin|Pkg_Dis_Dir_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007dd4:	f107 031c 	add.w	r3, r7, #28
 8007dd8:	4619      	mov	r1, r3
 8007dda:	4816      	ldr	r0, [pc, #88]	; (8007e34 <MX_GPIO_Init+0x208>)
 8007ddc:	f003 ff5a 	bl	800bc94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = Pill_Pkg_Jog_Pin|Pill_Pkg_Clr_Pin|SV_X2_Pin|SV_X1_Pin
 8007de0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8007de4:	61fb      	str	r3, [r7, #28]
                          |SV_X4_Pin|SV_X3_Pin|LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007de6:	2301      	movs	r3, #1
 8007de8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007dee:	2300      	movs	r3, #0
 8007df0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007df2:	f107 031c 	add.w	r3, r7, #28
 8007df6:	4619      	mov	r1, r3
 8007df8:	480f      	ldr	r0, [pc, #60]	; (8007e38 <MX_GPIO_Init+0x20c>)
 8007dfa:	f003 ff4b 	bl	800bc94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RS_X2_Pin|RS_X1_Pin;
 8007dfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8007e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007e04:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007e08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007e0e:	f107 031c 	add.w	r3, r7, #28
 8007e12:	4619      	mov	r1, r3
 8007e14:	4808      	ldr	r0, [pc, #32]	; (8007e38 <MX_GPIO_Init+0x20c>)
 8007e16:	f003 ff3d 	bl	800bc94 <HAL_GPIO_Init>

}
 8007e1a:	bf00      	nop
 8007e1c:	3730      	adds	r7, #48	; 0x30
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	40023800 	.word	0x40023800
 8007e28:	40021000 	.word	0x40021000
 8007e2c:	40020800 	.word	0x40020800
 8007e30:	40020000 	.word	0x40020000
 8007e34:	40020400 	.word	0x40020400
 8007e38:	40020c00 	.word	0x40020c00

08007e3c <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8007e40:	4b09      	ldr	r3, [pc, #36]	; (8007e68 <MX_IWDG_Init+0x2c>)
 8007e42:	4a0a      	ldr	r2, [pc, #40]	; (8007e6c <MX_IWDG_Init+0x30>)
 8007e44:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_16;
 8007e46:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <MX_IWDG_Init+0x2c>)
 8007e48:	2202      	movs	r2, #2
 8007e4a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 2000-1;
 8007e4c:	4b06      	ldr	r3, [pc, #24]	; (8007e68 <MX_IWDG_Init+0x2c>)
 8007e4e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8007e52:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8007e54:	4804      	ldr	r0, [pc, #16]	; (8007e68 <MX_IWDG_Init+0x2c>)
 8007e56:	f004 f97b 	bl	800c150 <HAL_IWDG_Init>
 8007e5a:	4603      	mov	r3, r0
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d001      	beq.n	8007e64 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 8007e60:	f000 fb84 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8007e64:	bf00      	nop
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	200004a8 	.word	0x200004a8
 8007e6c:	40003000 	.word	0x40003000

08007e70 <OD_get_u8>:
OD_get_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t* val, bool_t odOrig) {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b086      	sub	sp, #24
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	607a      	str	r2, [r7, #4]
 8007e7a:	603b      	str	r3, [r7, #0]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8007e80:	7af9      	ldrb	r1, [r7, #11]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	9300      	str	r3, [sp, #0]
 8007e86:	2301      	movs	r3, #1
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f7fa fbf2 	bl	8002674 <OD_get_value>
 8007e90:	4603      	mov	r3, r0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <OD_set_u8>:
OD_set_u8(const OD_entry_t* entry, uint8_t subIndex, uint8_t val, bool_t odOrig) {
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b086      	sub	sp, #24
 8007e9e:	af02      	add	r7, sp, #8
 8007ea0:	60f8      	str	r0, [r7, #12]
 8007ea2:	607b      	str	r3, [r7, #4]
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	72fb      	strb	r3, [r7, #11]
 8007ea8:	4613      	mov	r3, r2
 8007eaa:	72bb      	strb	r3, [r7, #10]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8007eac:	f107 020a 	add.w	r2, r7, #10
 8007eb0:	7af9      	ldrb	r1, [r7, #11]
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	9300      	str	r3, [sp, #0]
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	68f8      	ldr	r0, [r7, #12]
 8007eba:	f7fa fc18 	bl	80026ee <OD_set_value>
 8007ebe:	4603      	mov	r3, r0
}
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	3710      	adds	r7, #16
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}

08007ec8 <OD_set_u16>:
OD_set_u16(const OD_entry_t* entry, uint8_t subIndex, uint16_t val, bool_t odOrig) {
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b086      	sub	sp, #24
 8007ecc:	af02      	add	r7, sp, #8
 8007ece:	60f8      	str	r0, [r7, #12]
 8007ed0:	607b      	str	r3, [r7, #4]
 8007ed2:	460b      	mov	r3, r1
 8007ed4:	72fb      	strb	r3, [r7, #11]
 8007ed6:	4613      	mov	r3, r2
 8007ed8:	813b      	strh	r3, [r7, #8]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 8007eda:	f107 0208 	add.w	r2, r7, #8
 8007ede:	7af9      	ldrb	r1, [r7, #11]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	9300      	str	r3, [sp, #0]
 8007ee4:	2302      	movs	r3, #2
 8007ee6:	68f8      	ldr	r0, [r7, #12]
 8007ee8:	f7fa fc01 	bl	80026ee <OD_set_value>
 8007eec:	4603      	mov	r3, r0
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3710      	adds	r7, #16
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b088      	sub	sp, #32
 8007efc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007efe:	f001 feb7 	bl	8009c70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007f02:	f000 f8c3 	bl	800808c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007f06:	f7ff fe91 	bl	8007c2c <MX_GPIO_Init>
  MX_DMA_Init();
 8007f0a:	f7ff fe6f 	bl	8007bec <MX_DMA_Init>
  MX_IWDG_Init();
 8007f0e:	f7ff ff95 	bl	8007e3c <MX_IWDG_Init>
  MX_ADC1_Init();
 8007f12:	f7ff fd0b 	bl	800792c <MX_ADC1_Init>
  MX_CAN1_Init();
 8007f16:	f7ff fdd3 	bl	8007ac0 <MX_CAN1_Init>
  MX_TIM10_Init();
 8007f1a:	f001 f979 	bl	8009210 <MX_TIM10_Init>
  MX_TIM11_Init();
 8007f1e:	f001 f9c5 	bl	80092ac <MX_TIM11_Init>
  MX_TIM12_Init();
 8007f22:	f001 fa0f 	bl	8009344 <MX_TIM12_Init>
  MX_TIM13_Init();
 8007f26:	f001 fa6f 	bl	8009408 <MX_TIM13_Init>
  MX_TIM14_Init();
 8007f2a:	f001 fab9 	bl	80094a0 <MX_TIM14_Init>
  MX_USART1_UART_Init();
 8007f2e:	f001 fd37 	bl	80099a0 <MX_USART1_UART_Init>
  MX_TIM9_Init();
 8007f32:	f001 f8ff 	bl	8009134 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 8007f36:	f001 fd5d 	bl	80099f4 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_HCD_Init();
 8007f3a:	f001 fe01 	bl	8009b40 <MX_USB_OTG_FS_HCD_Init>
  MX_TIM5_Init();
 8007f3e:	f001 f8ab 	bl	8009098 <MX_TIM5_Init>
  MX_TIM1_Init();
 8007f42:	f000 ffbf 	bl	8008ec4 <MX_TIM1_Init>
  MX_TIM4_Init();
 8007f46:	f001 f859 	bl	8008ffc <MX_TIM4_Init>
  MX_TIM2_Init();
 8007f4a:	f001 f80b 	bl	8008f64 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  CANopenNodeSTM32 canOpenNodeSTM32;
  canOpenNodeSTM32.CANHandle = &hcan1;
 8007f4e:	4b40      	ldr	r3, [pc, #256]	; (8008050 <main+0x158>)
 8007f50:	60bb      	str	r3, [r7, #8]
  canOpenNodeSTM32.HWInitFunction = MX_CAN1_Init;
 8007f52:	4b40      	ldr	r3, [pc, #256]	; (8008054 <main+0x15c>)
 8007f54:	60fb      	str	r3, [r7, #12]
  canOpenNodeSTM32.timerHandle = &htim1;
 8007f56:	4b40      	ldr	r3, [pc, #256]	; (8008058 <main+0x160>)
 8007f58:	607b      	str	r3, [r7, #4]
  canOpenNodeSTM32.desiredNodeID = 32;
 8007f5a:	2320      	movs	r3, #32
 8007f5c:	703b      	strb	r3, [r7, #0]
  canOpenNodeSTM32.baudrate = 500;
 8007f5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007f62:	807b      	strh	r3, [r7, #2]
  canopen_app_init(&canOpenNodeSTM32);
 8007f64:	463b      	mov	r3, r7
 8007f66:	4618      	mov	r0, r3
 8007f68:	f7fe ff08 	bl	8006d7c <canopen_app_init>

  HAL_TIM_Base_Start_IT(&htim4);	// start to refresh watchdog
 8007f6c:	483b      	ldr	r0, [pc, #236]	; (800805c <main+0x164>)
 8007f6e:	f004 fe4f 	bl	800cc10 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start_DMA(&hadc1, (uint32_t*) &temperature_adc, 1);
 8007f72:	2201      	movs	r2, #1
 8007f74:	493a      	ldr	r1, [pc, #232]	; (8008060 <main+0x168>)
 8007f76:	483b      	ldr	r0, [pc, #236]	; (8008064 <main+0x16c>)
 8007f78:	f001 ff54 	bl	8009e24 <HAL_ADC_Start_DMA>

  HAL_TIM_Base_Start_IT(&htim2);	// valve control
 8007f7c:	483a      	ldr	r0, [pc, #232]	; (8008068 <main+0x170>)
 8007f7e:	f004 fe47 	bl	800cc10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim5);	// temperature control
 8007f82:	483a      	ldr	r0, [pc, #232]	; (800806c <main+0x174>)
 8007f84:	f004 fe44 	bl	800cc10 <HAL_TIM_Base_Start_IT>

  PID(&TPID, &Temp, &PIDOut, &TempSetpoint, 40, 80, 30, _PID_P_ON_E, _PID_CD_DIRECT);
 8007f88:	2300      	movs	r3, #0
 8007f8a:	9301      	str	r3, [sp, #4]
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	ed9f 2b25 	vldr	d2, [pc, #148]	; 8008028 <main+0x130>
 8007f94:	ed9f 1b26 	vldr	d1, [pc, #152]	; 8008030 <main+0x138>
 8007f98:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8008038 <main+0x140>
 8007f9c:	4b34      	ldr	r3, [pc, #208]	; (8008070 <main+0x178>)
 8007f9e:	4a35      	ldr	r2, [pc, #212]	; (8008074 <main+0x17c>)
 8007fa0:	4935      	ldr	r1, [pc, #212]	; (8008078 <main+0x180>)
 8007fa2:	4836      	ldr	r0, [pc, #216]	; (800807c <main+0x184>)
 8007fa4:	f000 fb24 	bl	80085f0 <PID>
  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
 8007fa8:	2101      	movs	r1, #1
 8007faa:	4834      	ldr	r0, [pc, #208]	; (800807c <main+0x184>)
 8007fac:	f000 fc56 	bl	800885c <PID_SetMode>
  PID_SetSampleTime(&TPID, 100);
 8007fb0:	2164      	movs	r1, #100	; 0x64
 8007fb2:	4832      	ldr	r0, [pc, #200]	; (800807c <main+0x184>)
 8007fb4:	f000 fdc6 	bl	8008b44 <PID_SetSampleTime>
  PID_SetOutputLimits(&TPID, 500, 4000);
 8007fb8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8008040 <main+0x148>
 8007fbc:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8008048 <main+0x150>
 8007fc0:	482e      	ldr	r0, [pc, #184]	; (800807c <main+0x184>)
 8007fc2:	f000 fc69 	bl	8008898 <PID_SetOutputLimits>
//  HAL_TIM_Base_Start_IT(&htim11);

//  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
//  htim11.Instance->CCR1 = 50;

  HAL_TIM_Base_Start_IT(&htim9);
 8007fc6:	482e      	ldr	r0, [pc, #184]	; (8008080 <main+0x188>)
 8007fc8:	f004 fe22 	bl	800cc10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8007fcc:	2100      	movs	r1, #0
 8007fce:	482c      	ldr	r0, [pc, #176]	; (8008080 <main+0x188>)
 8007fd0:	f004 ff16 	bl	800ce00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 8007fd4:	2104      	movs	r1, #4
 8007fd6:	482a      	ldr	r0, [pc, #168]	; (8008080 <main+0x188>)
 8007fd8:	f004 ff12 	bl	800ce00 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 0);
 8007fdc:	4b28      	ldr	r3, [pc, #160]	; (8008080 <main+0x188>)
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, 0);
 8007fe4:	4b26      	ldr	r3, [pc, #152]	; (8008080 <main+0x188>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2200      	movs	r2, #0
 8007fea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, !canOpenNodeSTM32.outStatusLEDGreen);
 8007fec:	7c3b      	ldrb	r3, [r7, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	bf0c      	ite	eq
 8007ff2:	2301      	moveq	r3, #1
 8007ff4:	2300      	movne	r3, #0
 8007ff6:	b2db      	uxtb	r3, r3
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	2108      	movs	r1, #8
 8007ffc:	4821      	ldr	r0, [pc, #132]	; (8008084 <main+0x18c>)
 8007ffe:	f004 f80d 	bl	800c01c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(LED_2_GPIO_Port, LED_2_Pin, !canOpenNodeSTM32.outStatusLEDRed);
 8008002:	7c7b      	ldrb	r3, [r7, #17]
 8008004:	2b00      	cmp	r3, #0
 8008006:	bf0c      	ite	eq
 8008008:	2301      	moveq	r3, #1
 800800a:	2300      	movne	r3, #0
 800800c:	b2db      	uxtb	r3, r3
 800800e:	461a      	mov	r2, r3
 8008010:	2180      	movs	r1, #128	; 0x80
 8008012:	481d      	ldr	r0, [pc, #116]	; (8008088 <main+0x190>)
 8008014:	f004 f802 	bl	800c01c <HAL_GPIO_WritePin>
	  canopen_app_process();
 8008018:	f7ff f802 	bl	8007020 <canopen_app_process>

	  HAL_Delay(1);
 800801c:	2001      	movs	r0, #1
 800801e:	f001 fe99 	bl	8009d54 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_1_GPIO_Port, LED_1_Pin, !canOpenNodeSTM32.outStatusLEDGreen);
 8008022:	e7e3      	b.n	8007fec <main+0xf4>
 8008024:	f3af 8000 	nop.w
 8008028:	00000000 	.word	0x00000000
 800802c:	403e0000 	.word	0x403e0000
 8008030:	00000000 	.word	0x00000000
 8008034:	40540000 	.word	0x40540000
 8008038:	00000000 	.word	0x00000000
 800803c:	40440000 	.word	0x40440000
 8008040:	00000000 	.word	0x00000000
 8008044:	40af4000 	.word	0x40af4000
 8008048:	00000000 	.word	0x00000000
 800804c:	407f4000 	.word	0x407f4000
 8008050:	20000480 	.word	0x20000480
 8008054:	08007ac1 	.word	0x08007ac1
 8008058:	20000554 	.word	0x20000554
 800805c:	200005e4 	.word	0x200005e4
 8008060:	200004b4 	.word	0x200004b4
 8008064:	200003d8 	.word	0x200003d8
 8008068:	2000059c 	.word	0x2000059c
 800806c:	2000062c 	.word	0x2000062c
 8008070:	200002f0 	.word	0x200002f0
 8008074:	20000530 	.word	0x20000530
 8008078:	20000528 	.word	0x20000528
 800807c:	200004b8 	.word	0x200004b8
 8008080:	20000674 	.word	0x20000674
 8008084:	40020400 	.word	0x40020400
 8008088:	40020c00 	.word	0x40020c00

0800808c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800808c:	b580      	push	{r7, lr}
 800808e:	b094      	sub	sp, #80	; 0x50
 8008090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008092:	f107 0320 	add.w	r3, r7, #32
 8008096:	2230      	movs	r2, #48	; 0x30
 8008098:	2100      	movs	r1, #0
 800809a:	4618      	mov	r0, r3
 800809c:	f006 fe64 	bl	800ed68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080a0:	f107 030c 	add.w	r3, r7, #12
 80080a4:	2200      	movs	r2, #0
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	605a      	str	r2, [r3, #4]
 80080aa:	609a      	str	r2, [r3, #8]
 80080ac:	60da      	str	r2, [r3, #12]
 80080ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80080b0:	2300      	movs	r3, #0
 80080b2:	60bb      	str	r3, [r7, #8]
 80080b4:	4b2a      	ldr	r3, [pc, #168]	; (8008160 <SystemClock_Config+0xd4>)
 80080b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b8:	4a29      	ldr	r2, [pc, #164]	; (8008160 <SystemClock_Config+0xd4>)
 80080ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080be:	6413      	str	r3, [r2, #64]	; 0x40
 80080c0:	4b27      	ldr	r3, [pc, #156]	; (8008160 <SystemClock_Config+0xd4>)
 80080c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c8:	60bb      	str	r3, [r7, #8]
 80080ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80080cc:	2300      	movs	r3, #0
 80080ce:	607b      	str	r3, [r7, #4]
 80080d0:	4b24      	ldr	r3, [pc, #144]	; (8008164 <SystemClock_Config+0xd8>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	4a23      	ldr	r2, [pc, #140]	; (8008164 <SystemClock_Config+0xd8>)
 80080d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80080da:	6013      	str	r3, [r2, #0]
 80080dc:	4b21      	ldr	r3, [pc, #132]	; (8008164 <SystemClock_Config+0xd8>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80080e4:	607b      	str	r3, [r7, #4]
 80080e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80080e8:	2309      	movs	r3, #9
 80080ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80080ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80080f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80080f2:	2301      	movs	r3, #1
 80080f4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80080f6:	2302      	movs	r3, #2
 80080f8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80080fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80080fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008100:	2308      	movs	r3, #8
 8008102:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008104:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008108:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800810a:	2302      	movs	r3, #2
 800810c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800810e:	2307      	movs	r3, #7
 8008110:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008112:	f107 0320 	add.w	r3, r7, #32
 8008116:	4618      	mov	r0, r3
 8008118:	f004 f86c 	bl	800c1f4 <HAL_RCC_OscConfig>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8008122:	f000 fa23 	bl	800856c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008126:	230f      	movs	r3, #15
 8008128:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800812a:	2302      	movs	r3, #2
 800812c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800812e:	2300      	movs	r3, #0
 8008130:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8008132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8008136:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8008138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800813c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800813e:	f107 030c 	add.w	r3, r7, #12
 8008142:	2105      	movs	r1, #5
 8008144:	4618      	mov	r0, r3
 8008146:	f004 facd 	bl	800c6e4 <HAL_RCC_ClockConfig>
 800814a:	4603      	mov	r3, r0
 800814c:	2b00      	cmp	r3, #0
 800814e:	d001      	beq.n	8008154 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8008150:	f000 fa0c 	bl	800856c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8008154:	f004 fbac 	bl	800c8b0 <HAL_RCC_EnableCSS>
}
 8008158:	bf00      	nop
 800815a:	3750      	adds	r7, #80	; 0x50
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	40023800 	.word	0x40023800
 8008164:	40007000 	.word	0x40007000

08008168 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	if (htim == canopenNodeSTM32->timerHandle)
 8008170:	4b69      	ldr	r3, [pc, #420]	; (8008318 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	687a      	ldr	r2, [r7, #4]
 8008178:	429a      	cmp	r2, r3
 800817a:	d102      	bne.n	8008182 <HAL_TIM_PeriodElapsedCallback+0x1a>
	{
		canopen_app_interrupt();
 800817c:	f7fe ffbc 	bl	80070f8 <canopen_app_interrupt>
	}
	else if (htim == (&htim11))
	{
		count++;
	}
}
 8008180:	e0c6      	b.n	8008310 <HAL_TIM_PeriodElapsedCallback+0x1a8>
	else if (htim == (&htim2))
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a65      	ldr	r2, [pc, #404]	; (800831c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d120      	bne.n	80081cc <HAL_TIM_PeriodElapsedCallback+0x64>
	    control_valve(0x2050, 0x2054, SV_X1_GPIO_Port, SV_X1_Pin);
 800818a:	2310      	movs	r3, #16
 800818c:	4a64      	ldr	r2, [pc, #400]	; (8008320 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800818e:	f242 0154 	movw	r1, #8276	; 0x2054
 8008192:	f242 0050 	movw	r0, #8272	; 0x2050
 8008196:	f000 f8e1 	bl	800835c <control_valve>
	    control_valve(0x2051, 0x2055, SV_X2_GPIO_Port, SV_X2_Pin);
 800819a:	2308      	movs	r3, #8
 800819c:	4a60      	ldr	r2, [pc, #384]	; (8008320 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 800819e:	f242 0155 	movw	r1, #8277	; 0x2055
 80081a2:	f242 0051 	movw	r0, #8273	; 0x2051
 80081a6:	f000 f8d9 	bl	800835c <control_valve>
	    control_valve(0x2052, 0x2056, SV_X3_GPIO_Port, SV_X3_Pin);
 80081aa:	2340      	movs	r3, #64	; 0x40
 80081ac:	4a5c      	ldr	r2, [pc, #368]	; (8008320 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80081ae:	f242 0156 	movw	r1, #8278	; 0x2056
 80081b2:	f242 0052 	movw	r0, #8274	; 0x2052
 80081b6:	f000 f8d1 	bl	800835c <control_valve>
	    control_valve(0x2053, 0x2057, SV_X4_GPIO_Port, SV_X4_Pin);
 80081ba:	2320      	movs	r3, #32
 80081bc:	4a58      	ldr	r2, [pc, #352]	; (8008320 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80081be:	f242 0157 	movw	r1, #8279	; 0x2057
 80081c2:	f242 0053 	movw	r0, #8275	; 0x2053
 80081c6:	f000 f8c9 	bl	800835c <control_valve>
}
 80081ca:	e0a1      	b.n	8008310 <HAL_TIM_PeriodElapsedCallback+0x1a8>
	else if (htim == (&htim4))
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a55      	ldr	r2, [pc, #340]	; (8008324 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d10d      	bne.n	80081f0 <HAL_TIM_PeriodElapsedCallback+0x88>
		HAL_GPIO_TogglePin(LED_Default_GPIO_Port, LED_Default_Pin);
 80081d4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80081d8:	4853      	ldr	r0, [pc, #332]	; (8008328 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80081da:	f003 ff38 	bl	800c04e <HAL_GPIO_TogglePin>
		HAL_IWDG_Refresh(&hiwdg);
 80081de:	4853      	ldr	r0, [pc, #332]	; (800832c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80081e0:	f003 fff8 	bl	800c1d4 <HAL_IWDG_Refresh>
		running++;
 80081e4:	4b52      	ldr	r3, [pc, #328]	; (8008330 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	3301      	adds	r3, #1
 80081ea:	4a51      	ldr	r2, [pc, #324]	; (8008330 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80081ec:	6013      	str	r3, [r2, #0]
}
 80081ee:	e08f      	b.n	8008310 <HAL_TIM_PeriodElapsedCallback+0x1a8>
	else if (htim == (&htim5))
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	4a50      	ldr	r2, [pc, #320]	; (8008334 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d172      	bne.n	80082de <HAL_TIM_PeriodElapsedCallback+0x176>
		uint16_t adc_sample = temperature_adc;
 80081f8:	4b4f      	ldr	r3, [pc, #316]	; (8008338 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80081fa:	881b      	ldrh	r3, [r3, #0]
 80081fc:	82fb      	strh	r3, [r7, #22]
		float temperature_curr = get_temperature(kalman_filter(adc_sample));
 80081fe:	8afb      	ldrh	r3, [r7, #22]
 8008200:	4618      	mov	r0, r3
 8008202:	f000 f93b 	bl	800847c <kalman_filter>
 8008206:	4603      	mov	r3, r0
 8008208:	4618      	mov	r0, r3
 800820a:	f000 f8f5 	bl	80083f8 <get_temperature>
 800820e:	ed87 0a04 	vstr	s0, [r7, #16]
		if (OD_set_u16(OD_find(OD, 0x2001), 0x00, (uint16_t) temperature_curr, false) != ODR_OK)
 8008212:	4b4a      	ldr	r3, [pc, #296]	; (800833c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f242 0101 	movw	r1, #8193	; 0x2001
 800821a:	4618      	mov	r0, r3
 800821c:	f7fa f8b8 	bl	8002390 <OD_find>
 8008220:	edd7 7a04 	vldr	s15, [r7, #16]
 8008224:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008228:	ee17 3a90 	vmov	r3, s15
 800822c:	b29a      	uxth	r2, r3
 800822e:	2300      	movs	r3, #0
 8008230:	2100      	movs	r1, #0
 8008232:	f7ff fe49 	bl	8007ec8 <OD_set_u16>
 8008236:	4603      	mov	r3, r0
 8008238:	2b00      	cmp	r3, #0
 800823a:	d001      	beq.n	8008240 <HAL_TIM_PeriodElapsedCallback+0xd8>
			show_err_LED();
 800823c:	f000 f912 	bl	8008464 <show_err_LED>
		if (OD_set_u16(OD_find(OD, 0x2002), 0x00, adc_sample, false) != ODR_OK)
 8008240:	4b3e      	ldr	r3, [pc, #248]	; (800833c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f242 0102 	movw	r1, #8194	; 0x2002
 8008248:	4618      	mov	r0, r3
 800824a:	f7fa f8a1 	bl	8002390 <OD_find>
 800824e:	8afa      	ldrh	r2, [r7, #22]
 8008250:	2300      	movs	r3, #0
 8008252:	2100      	movs	r1, #0
 8008254:	f7ff fe38 	bl	8007ec8 <OD_set_u16>
 8008258:	4603      	mov	r3, r0
 800825a:	2b00      	cmp	r3, #0
 800825c:	d001      	beq.n	8008262 <HAL_TIM_PeriodElapsedCallback+0xfa>
			show_err_LED();
 800825e:	f000 f901 	bl	8008464 <show_err_LED>
		Temp = temperature_curr;
 8008262:	6938      	ldr	r0, [r7, #16]
 8008264:	f7f8 f980 	bl	8000568 <__aeabi_f2d>
 8008268:	4602      	mov	r2, r0
 800826a:	460b      	mov	r3, r1
 800826c:	4934      	ldr	r1, [pc, #208]	; (8008340 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800826e:	e9c1 2300 	strd	r2, r3, [r1]
		PID_Compute(&TPID);
 8008272:	4834      	ldr	r0, [pc, #208]	; (8008344 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8008274:	f000 fa08 	bl	8008688 <PID_Compute>
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, (uint16_t) PIDOut);
 8008278:	4b33      	ldr	r3, [pc, #204]	; (8008348 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800827a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800827e:	4610      	mov	r0, r2
 8008280:	4619      	mov	r1, r3
 8008282:	f7f8 fc63 	bl	8000b4c <__aeabi_d2uiz>
 8008286:	4603      	mov	r3, r0
 8008288:	b29a      	uxth	r2, r3
 800828a:	4b30      	ldr	r3, [pc, #192]	; (800834c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_2, (uint16_t) PIDOut);
 8008290:	4b2d      	ldr	r3, [pc, #180]	; (8008348 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	4610      	mov	r0, r2
 8008298:	4619      	mov	r1, r3
 800829a:	f7f8 fc57 	bl	8000b4c <__aeabi_d2uiz>
 800829e:	4603      	mov	r3, r0
 80082a0:	b29a      	uxth	r2, r3
 80082a2:	4b2a      	ldr	r3, [pc, #168]	; (800834c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38
		uint8_t disable_heater = 0;
 80082a8:	2300      	movs	r3, #0
 80082aa:	73fb      	strb	r3, [r7, #15]
		if (OD_get_u8(OD_find(OD, 0x2003), 0x00, &disable_heater, false) != ODR_OK)
 80082ac:	4b23      	ldr	r3, [pc, #140]	; (800833c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f242 0103 	movw	r1, #8195	; 0x2003
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7fa f86b 	bl	8002390 <OD_find>
 80082ba:	f107 020f 	add.w	r2, r7, #15
 80082be:	2300      	movs	r3, #0
 80082c0:	2100      	movs	r1, #0
 80082c2:	f7ff fdd5 	bl	8007e70 <OD_get_u8>
 80082c6:	4603      	mov	r3, r0
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <HAL_TIM_PeriodElapsedCallback+0x168>
			show_err_LED();
 80082cc:	f000 f8ca 	bl	8008464 <show_err_LED>
		HAL_GPIO_WritePin(Heat_Enable_GPIO_Port, Heat_Enable_Pin, disable_heater);
 80082d0:	7bfb      	ldrb	r3, [r7, #15]
 80082d2:	461a      	mov	r2, r3
 80082d4:	2110      	movs	r1, #16
 80082d6:	481e      	ldr	r0, [pc, #120]	; (8008350 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80082d8:	f003 fea0 	bl	800c01c <HAL_GPIO_WritePin>
}
 80082dc:	e018      	b.n	8008310 <HAL_TIM_PeriodElapsedCallback+0x1a8>
	else if (htim == (&htim9))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	4a1a      	ldr	r2, [pc, #104]	; (800834c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d106      	bne.n	80082f4 <HAL_TIM_PeriodElapsedCallback+0x18c>
		count++;
 80082e6:	4b1b      	ldr	r3, [pc, #108]	; (8008354 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80082e8:	881b      	ldrh	r3, [r3, #0]
 80082ea:	3301      	adds	r3, #1
 80082ec:	b29a      	uxth	r2, r3
 80082ee:	4b19      	ldr	r3, [pc, #100]	; (8008354 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80082f0:	801a      	strh	r2, [r3, #0]
}
 80082f2:	e00d      	b.n	8008310 <HAL_TIM_PeriodElapsedCallback+0x1a8>
	else if (htim == (&htim11))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a18      	ldr	r2, [pc, #96]	; (8008358 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d009      	beq.n	8008310 <HAL_TIM_PeriodElapsedCallback+0x1a8>
	else if (htim == (&htim11))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a16      	ldr	r2, [pc, #88]	; (8008358 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d105      	bne.n	8008310 <HAL_TIM_PeriodElapsedCallback+0x1a8>
		count++;
 8008304:	4b13      	ldr	r3, [pc, #76]	; (8008354 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	3301      	adds	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	4b11      	ldr	r3, [pc, #68]	; (8008354 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800830e:	801a      	strh	r2, [r3, #0]
}
 8008310:	bf00      	nop
 8008312:	3718      	adds	r7, #24
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}
 8008318:	2000038c 	.word	0x2000038c
 800831c:	2000059c 	.word	0x2000059c
 8008320:	40020c00 	.word	0x40020c00
 8008324:	200005e4 	.word	0x200005e4
 8008328:	40020800 	.word	0x40020800
 800832c:	200004a8 	.word	0x200004a8
 8008330:	20000538 	.word	0x20000538
 8008334:	2000062c 	.word	0x2000062c
 8008338:	200004b4 	.word	0x200004b4
 800833c:	200002e8 	.word	0x200002e8
 8008340:	20000528 	.word	0x20000528
 8008344:	200004b8 	.word	0x200004b8
 8008348:	20000530 	.word	0x20000530
 800834c:	20000674 	.word	0x20000674
 8008350:	40021000 	.word	0x40021000
 8008354:	2000053c 	.word	0x2000053c
 8008358:	20000704 	.word	0x20000704

0800835c <control_valve>:

	}
}

void control_valve(uint16_t ctrl_index, uint16_t status_index, GPIO_TypeDef* port, uint16_t pin)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	60ba      	str	r2, [r7, #8]
 8008364:	461a      	mov	r2, r3
 8008366:	4603      	mov	r3, r0
 8008368:	81fb      	strh	r3, [r7, #14]
 800836a:	460b      	mov	r3, r1
 800836c:	81bb      	strh	r3, [r7, #12]
 800836e:	4613      	mov	r3, r2
 8008370:	80fb      	strh	r3, [r7, #6]
    uint8_t valve_control = 0;
 8008372:	2300      	movs	r3, #0
 8008374:	75bb      	strb	r3, [r7, #22]

    if (OD_get_u8(OD_find(OD, ctrl_index), 0x00, &valve_control, false) != ODR_OK) {
 8008376:	4b1f      	ldr	r3, [pc, #124]	; (80083f4 <control_valve+0x98>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	89fa      	ldrh	r2, [r7, #14]
 800837c:	4611      	mov	r1, r2
 800837e:	4618      	mov	r0, r3
 8008380:	f7fa f806 	bl	8002390 <OD_find>
 8008384:	f107 0216 	add.w	r2, r7, #22
 8008388:	2300      	movs	r3, #0
 800838a:	2100      	movs	r1, #0
 800838c:	f7ff fd70 	bl	8007e70 <OD_get_u8>
 8008390:	4603      	mov	r3, r0
 8008392:	2b00      	cmp	r3, #0
 8008394:	d001      	beq.n	800839a <control_valve+0x3e>
        show_err_LED();
 8008396:	f000 f865 	bl	8008464 <show_err_LED>
    }
    HAL_GPIO_WritePin(port, pin, !valve_control);
 800839a:	7dbb      	ldrb	r3, [r7, #22]
 800839c:	2b00      	cmp	r3, #0
 800839e:	bf0c      	ite	eq
 80083a0:	2301      	moveq	r3, #1
 80083a2:	2300      	movne	r3, #0
 80083a4:	b2db      	uxtb	r3, r3
 80083a6:	461a      	mov	r2, r3
 80083a8:	88fb      	ldrh	r3, [r7, #6]
 80083aa:	4619      	mov	r1, r3
 80083ac:	68b8      	ldr	r0, [r7, #8]
 80083ae:	f003 fe35 	bl	800c01c <HAL_GPIO_WritePin>

    uint8_t status = !HAL_GPIO_ReadPin(port, pin); // Read the pin and negate the value
 80083b2:	88fb      	ldrh	r3, [r7, #6]
 80083b4:	4619      	mov	r1, r3
 80083b6:	68b8      	ldr	r0, [r7, #8]
 80083b8:	f003 fe18 	bl	800bfec <HAL_GPIO_ReadPin>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	bf0c      	ite	eq
 80083c2:	2301      	moveq	r3, #1
 80083c4:	2300      	movne	r3, #0
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	75fb      	strb	r3, [r7, #23]
    if (OD_set_u8(OD_find(OD, status_index), 0x00, status, false) != ODR_OK) {
 80083ca:	4b0a      	ldr	r3, [pc, #40]	; (80083f4 <control_valve+0x98>)
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	89ba      	ldrh	r2, [r7, #12]
 80083d0:	4611      	mov	r1, r2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f7f9 ffdc 	bl	8002390 <OD_find>
 80083d8:	7dfa      	ldrb	r2, [r7, #23]
 80083da:	2300      	movs	r3, #0
 80083dc:	2100      	movs	r1, #0
 80083de:	f7ff fd5c 	bl	8007e9a <OD_set_u8>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d001      	beq.n	80083ec <control_valve+0x90>
        show_err_LED();
 80083e8:	f000 f83c 	bl	8008464 <show_err_LED>
    }
}
 80083ec:	bf00      	nop
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	200002e8 	.word	0x200002e8

080083f8 <get_temperature>:

float get_temperature(uint16_t adc_value)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b085      	sub	sp, #20
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	4603      	mov	r3, r0
 8008400:	80fb      	strh	r3, [r7, #6]
	float temp = ((3.3f * (float) adc_value / 4096.0f ) - 1.25f) / 0.005f;
 8008402:	88fb      	ldrh	r3, [r7, #6]
 8008404:	ee07 3a90 	vmov	s15, r3
 8008408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800840c:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8008458 <get_temperature+0x60>
 8008410:	ee27 7a87 	vmul.f32	s14, s15, s14
 8008414:	eddf 6a11 	vldr	s13, [pc, #68]	; 800845c <get_temperature+0x64>
 8008418:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800841c:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8008420:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8008424:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8008460 <get_temperature+0x68>
 8008428:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800842c:	edc7 7a03 	vstr	s15, [r7, #12]

	if (temp > 0.0)
 8008430:	edd7 7a03 	vldr	s15, [r7, #12]
 8008434:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800843c:	dd01      	ble.n	8008442 <get_temperature+0x4a>
		return temp;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	e001      	b.n	8008446 <get_temperature+0x4e>
	else
		return 0.0;
 8008442:	f04f 0300 	mov.w	r3, #0
}
 8008446:	ee07 3a90 	vmov	s15, r3
 800844a:	eeb0 0a67 	vmov.f32	s0, s15
 800844e:	3714      	adds	r7, #20
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	40533333 	.word	0x40533333
 800845c:	45800000 	.word	0x45800000
 8008460:	3ba3d70a 	.word	0x3ba3d70a

08008464 <show_err_LED>:

void show_err_LED()
{
 8008464:	b580      	push	{r7, lr}
 8008466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_4_GPIO_Port, LED_4_Pin, GPIO_PIN_RESET);
 8008468:	2200      	movs	r2, #0
 800846a:	2110      	movs	r1, #16
 800846c:	4802      	ldr	r0, [pc, #8]	; (8008478 <show_err_LED+0x14>)
 800846e:	f003 fdd5 	bl	800c01c <HAL_GPIO_WritePin>
}
 8008472:	bf00      	nop
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	40020400 	.word	0x40020400

0800847c <kalman_filter>:

uint16_t kalman_filter(uint16_t adc_value)
{
 800847c:	b480      	push	{r7}
 800847e:	b087      	sub	sp, #28
 8008480:	af00      	add	r7, sp, #0
 8008482:	4603      	mov	r3, r0
 8008484:	80fb      	strh	r3, [r7, #6]
    static float Kg = 0;
    static float P_k_k1 = 1;

    float kalman_adc;
    static float kalman_adc_old = 0;
    Z_k = adc_value;
 8008486:	88fb      	ldrh	r3, [r7, #6]
 8008488:	ee07 3a90 	vmov	s15, r3
 800848c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008490:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 8008494:	4b2e      	ldr	r3, [pc, #184]	; (8008550 <kalman_filter+0xd4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 800849a:	693b      	ldr	r3, [r7, #16]
 800849c:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 800849e:	4b2d      	ldr	r3, [pc, #180]	; (8008554 <kalman_filter+0xd8>)
 80084a0:	ed93 7a00 	vldr	s14, [r3]
 80084a4:	4b2c      	ldr	r3, [pc, #176]	; (8008558 <kalman_filter+0xdc>)
 80084a6:	edd3 7a00 	vldr	s15, [r3]
 80084aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084ae:	4b2b      	ldr	r3, [pc, #172]	; (800855c <kalman_filter+0xe0>)
 80084b0:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1 / (P_k_k1 + R);
 80084b4:	4b29      	ldr	r3, [pc, #164]	; (800855c <kalman_filter+0xe0>)
 80084b6:	edd3 6a00 	vldr	s13, [r3]
 80084ba:	4b28      	ldr	r3, [pc, #160]	; (800855c <kalman_filter+0xe0>)
 80084bc:	ed93 7a00 	vldr	s14, [r3]
 80084c0:	4b27      	ldr	r3, [pc, #156]	; (8008560 <kalman_filter+0xe4>)
 80084c2:	edd3 7a00 	vldr	s15, [r3]
 80084c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80084ce:	4b25      	ldr	r3, [pc, #148]	; (8008564 <kalman_filter+0xe8>)
 80084d0:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80084d4:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <kalman_filter+0xd4>)
 80084d6:	edd3 7a00 	vldr	s15, [r3]
 80084da:	ed97 7a05 	vldr	s14, [r7, #20]
 80084de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80084e2:	4b20      	ldr	r3, [pc, #128]	; (8008564 <kalman_filter+0xe8>)
 80084e4:	edd3 7a00 	vldr	s15, [r3]
 80084e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084ec:	ed97 7a03 	vldr	s14, [r7, #12]
 80084f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80084f4:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg) * P_k_k1;
 80084f8:	4b1a      	ldr	r3, [pc, #104]	; (8008564 <kalman_filter+0xe8>)
 80084fa:	edd3 7a00 	vldr	s15, [r3]
 80084fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008502:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008506:	4b15      	ldr	r3, [pc, #84]	; (800855c <kalman_filter+0xe0>)
 8008508:	edd3 7a00 	vldr	s15, [r3]
 800850c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008510:	4b10      	ldr	r3, [pc, #64]	; (8008554 <kalman_filter+0xd8>)
 8008512:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8008516:	4b0f      	ldr	r3, [pc, #60]	; (8008554 <kalman_filter+0xd8>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	4a10      	ldr	r2, [pc, #64]	; (800855c <kalman_filter+0xe0>)
 800851c:	6013      	str	r3, [r2, #0]

    adc_old_value = adc_value;
 800851e:	88fb      	ldrh	r3, [r7, #6]
 8008520:	ee07 3a90 	vmov	s15, r3
 8008524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008528:	4b0f      	ldr	r3, [pc, #60]	; (8008568 <kalman_filter+0xec>)
 800852a:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 800852e:	4a08      	ldr	r2, [pc, #32]	; (8008550 <kalman_filter+0xd4>)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	6013      	str	r3, [r2, #0]

    return kalman_adc;
 8008534:	edd7 7a02 	vldr	s15, [r7, #8]
 8008538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800853c:	ee17 3a90 	vmov	r3, s15
 8008540:	b29b      	uxth	r3, r3
}
 8008542:	4618      	mov	r0, r3
 8008544:	371c      	adds	r7, #28
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
 800854e:	bf00      	nop
 8008550:	20000540 	.word	0x20000540
 8008554:	20000544 	.word	0x20000544
 8008558:	200002f8 	.word	0x200002f8
 800855c:	200002fc 	.word	0x200002fc
 8008560:	20000300 	.word	0x20000300
 8008564:	20000548 	.word	0x20000548
 8008568:	2000054c 	.word	0x2000054c

0800856c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800856c:	b480      	push	{r7}
 800856e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008570:	b672      	cpsid	i
}
 8008572:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008574:	e7fe      	b.n	8008574 <Error_Handler+0x8>

08008576 <PID_Init>:
#include "pid.h"

/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
/* ~~~~~~~~~~~~~~~~~ Initialize ~~~~~~~~~~~~~~~~ */
void PID_Init(PID_TypeDef *uPID)
{
 8008576:	b580      	push	{r7, lr}
 8008578:	b082      	sub	sp, #8
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->OutputSum = *uPID->MyOutput;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008586:	6879      	ldr	r1, [r7, #4]
 8008588:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	uPID->LastInput = *uPID->MyInput;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58

	if (uPID->OutputSum > uPID->OutMax)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80085a6:	f7f8 fac7 	bl	8000b38 <__aeabi_dcmpgt>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d006      	beq.n	80085be <PID_Init+0x48>
	{
		uPID->OutputSum = uPID->OutMax;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80085b6:	6879      	ldr	r1, [r7, #4]
 80085b8:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
	{
		uPID->OutputSum = uPID->OutMin;
	}
	else { }

}
 80085bc:	e011      	b.n	80085e2 <PID_Init+0x6c>
	else if (uPID->OutputSum < uPID->OutMin)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80085ca:	f7f8 fa97 	bl	8000afc <__aeabi_dcmplt>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d100      	bne.n	80085d6 <PID_Init+0x60>
}
 80085d4:	e005      	b.n	80085e2 <PID_Init+0x6c>
		uPID->OutputSum = uPID->OutMin;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 80085dc:	6879      	ldr	r1, [r7, #4]
 80085de:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 80085e2:	bf00      	nop
 80085e4:	3708      	adds	r7, #8
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	0000      	movs	r0, r0
 80085ec:	0000      	movs	r0, r0
	...

080085f0 <PID>:

void PID(PID_TypeDef *uPID, double *Input, double *Output, double *Setpoint, double Kp, double Ki, double Kd, PIDPON_TypeDef POn, PIDCD_TypeDef ControllerDirection)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08a      	sub	sp, #40	; 0x28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6278      	str	r0, [r7, #36]	; 0x24
 80085f8:	6239      	str	r1, [r7, #32]
 80085fa:	61fa      	str	r2, [r7, #28]
 80085fc:	61bb      	str	r3, [r7, #24]
 80085fe:	ed87 0b04 	vstr	d0, [r7, #16]
 8008602:	ed87 1b02 	vstr	d1, [r7, #8]
 8008606:	ed87 2b00 	vstr	d2, [r7]
	/* ~~~~~~~~~~ Set parameter ~~~~~~~~~~ */
	uPID->MyOutput   = Output;
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	69fa      	ldr	r2, [r7, #28]
 800860e:	645a      	str	r2, [r3, #68]	; 0x44
	uPID->MyInput    = Input;
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	6a3a      	ldr	r2, [r7, #32]
 8008614:	641a      	str	r2, [r3, #64]	; 0x40
	uPID->MySetpoint = Setpoint;
 8008616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008618:	69ba      	ldr	r2, [r7, #24]
 800861a:	649a      	str	r2, [r3, #72]	; 0x48
	uPID->InAuto     = (PIDMode_TypeDef)_FALSE;
 800861c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861e:	2200      	movs	r2, #0
 8008620:	705a      	strb	r2, [r3, #1]

	PID_SetOutputLimits(uPID, 0, _PID_8BIT_PWM_MAX);
 8008622:	ed9f 1b15 	vldr	d1, [pc, #84]	; 8008678 <PID+0x88>
 8008626:	ed9f 0b16 	vldr	d0, [pc, #88]	; 8008680 <PID+0x90>
 800862a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800862c:	f000 f934 	bl	8008898 <PID_SetOutputLimits>

	uPID->SampleTime = _PID_SAMPLE_TIME_MS_DEF; /* default Controller Sample Time is 0.1 seconds */
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2264      	movs	r2, #100	; 0x64
 8008634:	609a      	str	r2, [r3, #8]

	PID_SetControllerDirection(uPID, ControllerDirection);
 8008636:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800863a:	4619      	mov	r1, r3
 800863c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800863e:	f000 fa41 	bl	8008ac4 <PID_SetControllerDirection>
	PID_SetTunings2(uPID, Kp, Ki, Kd, POn);
 8008642:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008646:	4619      	mov	r1, r3
 8008648:	ed97 2b00 	vldr	d2, [r7]
 800864c:	ed97 1b02 	vldr	d1, [r7, #8]
 8008650:	ed97 0b04 	vldr	d0, [r7, #16]
 8008654:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008656:	f000 f98d 	bl	8008974 <PID_SetTunings2>

	uPID->LastTime = GetTime() - uPID->SampleTime;
 800865a:	f001 fb6f 	bl	8009d3c <HAL_GetTick>
 800865e:	4602      	mov	r2, r0
 8008660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008662:	689b      	ldr	r3, [r3, #8]
 8008664:	1ad2      	subs	r2, r2, r3
 8008666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008668:	605a      	str	r2, [r3, #4]

}
 800866a:	bf00      	nop
 800866c:	3728      	adds	r7, #40	; 0x28
 800866e:	46bd      	mov	sp, r7
 8008670:	bd80      	pop	{r7, pc}
 8008672:	bf00      	nop
 8008674:	f3af 8000 	nop.w
 8008678:	00000000 	.word	0x00000000
 800867c:	406fe000 	.word	0x406fe000
	...

08008688 <PID_Compute>:
	PID(uPID, Input, Output, Setpoint, Kp, Ki, Kd, _PID_P_ON_E, ControllerDirection);
}

/* ~~~~~~~~~~~~~~~~~ Computing ~~~~~~~~~~~~~~~~~ */
uint8_t PID_Compute(PID_TypeDef *uPID)
{
 8008688:	b5b0      	push	{r4, r5, r7, lr}
 800868a:	b08c      	sub	sp, #48	; 0x30
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
	double error;
	double dInput;
	double output;

	/* ~~~~~~~~~~ Check PID mode ~~~~~~~~~~ */
	if (!uPID->InAuto)
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	785b      	ldrb	r3, [r3, #1]
 8008694:	2b00      	cmp	r3, #0
 8008696:	d101      	bne.n	800869c <PID_Compute+0x14>
	{
		return _FALSE;
 8008698:	2300      	movs	r3, #0
 800869a:	e0db      	b.n	8008854 <PID_Compute+0x1cc>
	}

	/* ~~~~~~~~~~ Calculate time ~~~~~~~~~~ */
	now        = GetTime();
 800869c:	f001 fb4e 	bl	8009d3c <HAL_GetTick>
 80086a0:	6278      	str	r0, [r7, #36]	; 0x24
	timeChange = (now - uPID->LastTime);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	685b      	ldr	r3, [r3, #4]
 80086a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80086a8:	1ad3      	subs	r3, r2, r3
 80086aa:	623b      	str	r3, [r7, #32]

	if (timeChange >= uPID->SampleTime)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	689b      	ldr	r3, [r3, #8]
 80086b0:	6a3a      	ldr	r2, [r7, #32]
 80086b2:	429a      	cmp	r2, r3
 80086b4:	f0c0 80cd 	bcc.w	8008852 <PID_Compute+0x1ca>
	{
		/* ..... Compute all the working error variables ..... */
		input   = *uPID->MyInput;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086c0:	e9c7 2306 	strd	r2, r3, [r7, #24]
		error   = *uPID->MySetpoint - input;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80086c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80086cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80086d0:	f7f7 fdea 	bl	80002a8 <__aeabi_dsub>
 80086d4:	4602      	mov	r2, r0
 80086d6:	460b      	mov	r3, r1
 80086d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
		dInput  = (input - uPID->LastInput);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 80086e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80086e6:	f7f7 fddf 	bl	80002a8 <__aeabi_dsub>
 80086ea:	4602      	mov	r2, r0
 80086ec:	460b      	mov	r3, r1
 80086ee:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->OutputSum     += (uPID->Ki * error);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80086fe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008702:	f7f7 ff89 	bl	8000618 <__aeabi_dmul>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4620      	mov	r0, r4
 800870c:	4629      	mov	r1, r5
 800870e:	f7f7 fdcd 	bl	80002ac <__adddf3>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	6879      	ldr	r1, [r7, #4]
 8008718:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50

		/* ..... Add Proportional on Measurement, if P_ON_M is specified ..... */
		if (!uPID->POnE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d114      	bne.n	800874e <PID_Compute+0xc6>
		{
			uPID->OutputSum -= uPID->Kp * dInput;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8008730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008734:	f7f7 ff70 	bl	8000618 <__aeabi_dmul>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f7 fdb2 	bl	80002a8 <__aeabi_dsub>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	6879      	ldr	r1, [r7, #4]
 800874a:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}

		if (uPID->OutputSum > uPID->OutMax)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800875a:	f7f8 f9ed 	bl	8000b38 <__aeabi_dcmpgt>
 800875e:	4603      	mov	r3, r0
 8008760:	2b00      	cmp	r3, #0
 8008762:	d006      	beq.n	8008772 <PID_Compute+0xea>
		{
			uPID->OutputSum = uPID->OutMax;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800876a:	6879      	ldr	r1, [r7, #4]
 800876c:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8008770:	e010      	b.n	8008794 <PID_Compute+0x10c>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800877e:	f7f8 f9bd 	bl	8000afc <__aeabi_dcmplt>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d005      	beq.n	8008794 <PID_Compute+0x10c>
		{
			uPID->OutputSum = uPID->OutMin;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800878e:	6879      	ldr	r1, [r7, #4]
 8008790:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
		}
		else { }

		/* ..... Add Proportional on Error, if P_ON_E is specified ..... */
		if (uPID->POnE)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	781b      	ldrb	r3, [r3, #0]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d00b      	beq.n	80087b4 <PID_Compute+0x12c>
		{
			output = uPID->Kp * error;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80087a2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80087a6:	f7f7 ff37 	bl	8000618 <__aeabi_dmul>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80087b2:	e005      	b.n	80087c0 <PID_Compute+0x138>
		}
		else
		{
			output = 0;
 80087b4:	f04f 0200 	mov.w	r2, #0
 80087b8:	f04f 0300 	mov.w	r3, #0
 80087bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}

		/* ..... Compute Rest of PID Output ..... */
		output += uPID->OutputSum - uPID->Kd * dInput;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	e9d3 4514 	ldrd	r4, r5, [r3, #80]	; 0x50
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80087cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80087d0:	f7f7 ff22 	bl	8000618 <__aeabi_dmul>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4620      	mov	r0, r4
 80087da:	4629      	mov	r1, r5
 80087dc:	f7f7 fd64 	bl	80002a8 <__aeabi_dsub>
 80087e0:	4602      	mov	r2, r0
 80087e2:	460b      	mov	r3, r1
 80087e4:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087e8:	f7f7 fd60 	bl	80002ac <__adddf3>
 80087ec:	4602      	mov	r2, r0
 80087ee:	460b      	mov	r3, r1
 80087f0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

		if (output > uPID->OutMax)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80087fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80087fe:	f7f8 f99b 	bl	8000b38 <__aeabi_dcmpgt>
 8008802:	4603      	mov	r3, r0
 8008804:	2b00      	cmp	r3, #0
 8008806:	d005      	beq.n	8008814 <PID_Compute+0x18c>
		{
			output = uPID->OutMax;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 800880e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8008812:	e00e      	b.n	8008832 <PID_Compute+0x1aa>
		}
		else if (output < uPID->OutMin)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800881a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800881e:	f7f8 f96d 	bl	8000afc <__aeabi_dcmplt>
 8008822:	4603      	mov	r3, r0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d004      	beq.n	8008832 <PID_Compute+0x1aa>
		{
			output = uPID->OutMin;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800882e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
		}
		else { }

		*uPID->MyOutput = output;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8008836:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800883a:	e9c1 2300 	strd	r2, r3, [r1]

		/* ..... Remember some variables for next time ..... */
		uPID->LastInput = input;
 800883e:	6879      	ldr	r1, [r7, #4]
 8008840:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008844:	e9c1 2316 	strd	r2, r3, [r1, #88]	; 0x58
		uPID->LastTime = now;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800884c:	605a      	str	r2, [r3, #4]

		return _TRUE;
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <PID_Compute+0x1cc>

	}
	else
	{
		return _FALSE;
 8008852:	2300      	movs	r3, #0
	}

}
 8008854:	4618      	mov	r0, r3
 8008856:	3730      	adds	r7, #48	; 0x30
 8008858:	46bd      	mov	sp, r7
 800885a:	bdb0      	pop	{r4, r5, r7, pc}

0800885c <PID_SetMode>:

/* ~~~~~~~~~~~~~~~~~ PID Mode ~~~~~~~~~~~~~~~~~~ */
void            PID_SetMode(PID_TypeDef *uPID, PIDMode_TypeDef Mode)
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b084      	sub	sp, #16
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]

	uint8_t newAuto = (Mode == _PID_MODE_AUTOMATIC);
 8008868:	78fb      	ldrb	r3, [r7, #3]
 800886a:	2b01      	cmp	r3, #1
 800886c:	bf0c      	ite	eq
 800886e:	2301      	moveq	r3, #1
 8008870:	2300      	movne	r3, #0
 8008872:	b2db      	uxtb	r3, r3
 8008874:	73fb      	strb	r3, [r7, #15]

	/* ~~~~~~~~~~ Initialize the PID ~~~~~~~~~~ */
	if (newAuto && !uPID->InAuto)
 8008876:	7bfb      	ldrb	r3, [r7, #15]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d006      	beq.n	800888a <PID_SetMode+0x2e>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	785b      	ldrb	r3, [r3, #1]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d102      	bne.n	800888a <PID_SetMode+0x2e>
	{
		PID_Init(uPID);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f7ff fe76 	bl	8008576 <PID_Init>
	}

	uPID->InAuto = (PIDMode_TypeDef)newAuto;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	7bfa      	ldrb	r2, [r7, #15]
 800888e:	705a      	strb	r2, [r3, #1]

}
 8008890:	bf00      	nop
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}

08008898 <PID_SetOutputLimits>:
	return uPID->InAuto ? _PID_MODE_AUTOMATIC : _PID_MODE_MANUAL;
}

/* ~~~~~~~~~~~~~~~~ PID Limits ~~~~~~~~~~~~~~~~~ */
void PID_SetOutputLimits(PID_TypeDef *uPID, double Min, double Max)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0
 800889e:	6178      	str	r0, [r7, #20]
 80088a0:	ed87 0b02 	vstr	d0, [r7, #8]
 80088a4:	ed87 1b00 	vstr	d1, [r7]
	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Min >= Max)
 80088a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80088b0:	f7f8 f938 	bl	8000b24 <__aeabi_dcmpge>
 80088b4:	4603      	mov	r3, r0
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d158      	bne.n	800896c <PID_SetOutputLimits+0xd4>
	{
		return;
	}

	uPID->OutMin = Min;
 80088ba:	6979      	ldr	r1, [r7, #20]
 80088bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088c0:	e9c1 2318 	strd	r2, r3, [r1, #96]	; 0x60
	uPID->OutMax = Max;
 80088c4:	6979      	ldr	r1, [r7, #20]
 80088c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80088ca:	e9c1 231a 	strd	r2, r3, [r1, #104]	; 0x68

	/* ~~~~~~~~~~ Check PID Mode ~~~~~~~~~~ */
	if (uPID->InAuto)
 80088ce:	697b      	ldr	r3, [r7, #20]
 80088d0:	785b      	ldrb	r3, [r3, #1]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d04b      	beq.n	800896e <PID_SetOutputLimits+0xd6>
	{

		/* ..... Check out value ..... */
		if (*uPID->MyOutput > uPID->OutMax)
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80088e4:	f7f8 f928 	bl	8000b38 <__aeabi_dcmpgt>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d007      	beq.n	80088fe <PID_SetOutputLimits+0x66>
		{
			*uPID->MyOutput = uPID->OutMax;
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80088f2:	697b      	ldr	r3, [r7, #20]
 80088f4:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 80088f8:	e9c1 2300 	strd	r2, r3, [r1]
 80088fc:	e012      	b.n	8008924 <PID_SetOutputLimits+0x8c>
		}
		else if (*uPID->MyOutput < uPID->OutMin)
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008902:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008906:	697b      	ldr	r3, [r7, #20]
 8008908:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 800890c:	f7f8 f8f6 	bl	8000afc <__aeabi_dcmplt>
 8008910:	4603      	mov	r3, r0
 8008912:	2b00      	cmp	r3, #0
 8008914:	d006      	beq.n	8008924 <PID_SetOutputLimits+0x8c>
		{
			*uPID->MyOutput = uPID->OutMin;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	6c59      	ldr	r1, [r3, #68]	; 0x44
 800891a:	697b      	ldr	r3, [r7, #20]
 800891c:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008920:	e9c1 2300 	strd	r2, r3, [r1]
		}
		else { }

		/* ..... Check out value ..... */
		if (uPID->OutputSum > uPID->OutMax)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008930:	f7f8 f902 	bl	8000b38 <__aeabi_dcmpgt>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d006      	beq.n	8008948 <PID_SetOutputLimits+0xb0>
		{
			uPID->OutputSum = uPID->OutMax;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8008940:	6979      	ldr	r1, [r7, #20]
 8008942:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 8008946:	e012      	b.n	800896e <PID_SetOutputLimits+0xd6>
		}
		else if (uPID->OutputSum < uPID->OutMin)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008954:	f7f8 f8d2 	bl	8000afc <__aeabi_dcmplt>
 8008958:	4603      	mov	r3, r0
 800895a:	2b00      	cmp	r3, #0
 800895c:	d007      	beq.n	800896e <PID_SetOutputLimits+0xd6>
		{
			uPID->OutputSum = uPID->OutMin;
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8008964:	6979      	ldr	r1, [r7, #20]
 8008966:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800896a:	e000      	b.n	800896e <PID_SetOutputLimits+0xd6>
		return;
 800896c:	bf00      	nop
		}
		else { }

	}

}
 800896e:	3718      	adds	r7, #24
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <PID_SetTunings2>:
void PID_SetTunings(PID_TypeDef *uPID, double Kp, double Ki, double Kd)
{
	PID_SetTunings2(uPID, Kp, Ki, Kd, uPID->POn);
}
void PID_SetTunings2(PID_TypeDef *uPID, double Kp, double Ki, double Kd, PIDPON_TypeDef POn)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	; 0x28
 8008978:	af00      	add	r7, sp, #0
 800897a:	61f8      	str	r0, [r7, #28]
 800897c:	ed87 0b04 	vstr	d0, [r7, #16]
 8008980:	ed87 1b02 	vstr	d1, [r7, #8]
 8008984:	ed87 2b00 	vstr	d2, [r7]
 8008988:	460b      	mov	r3, r1
 800898a:	76fb      	strb	r3, [r7, #27]

	double SampleTimeInSec;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (Kp < 0 || Ki < 0 || Kd < 0)
 800898c:	f04f 0200 	mov.w	r2, #0
 8008990:	f04f 0300 	mov.w	r3, #0
 8008994:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8008998:	f7f8 f8b0 	bl	8000afc <__aeabi_dcmplt>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f040 8089 	bne.w	8008ab6 <PID_SetTunings2+0x142>
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	f04f 0300 	mov.w	r3, #0
 80089ac:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80089b0:	f7f8 f8a4 	bl	8000afc <__aeabi_dcmplt>
 80089b4:	4603      	mov	r3, r0
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d17d      	bne.n	8008ab6 <PID_SetTunings2+0x142>
 80089ba:	f04f 0200 	mov.w	r2, #0
 80089be:	f04f 0300 	mov.w	r3, #0
 80089c2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80089c6:	f7f8 f899 	bl	8000afc <__aeabi_dcmplt>
 80089ca:	4603      	mov	r3, r0
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d172      	bne.n	8008ab6 <PID_SetTunings2+0x142>
	{
		return;
	}

	/* ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ */
	uPID->POn    = POn;
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	7efa      	ldrb	r2, [r7, #27]
 80089d4:	709a      	strb	r2, [r3, #2]
	uPID->POnE   = (PIDPON_TypeDef)(POn == _PID_P_ON_E);
 80089d6:	7efb      	ldrb	r3, [r7, #27]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	bf0c      	ite	eq
 80089dc:	2301      	moveq	r3, #1
 80089de:	2300      	movne	r3, #0
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	461a      	mov	r2, r3
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	701a      	strb	r2, [r3, #0]

	uPID->DispKp = Kp;
 80089e8:	69f9      	ldr	r1, [r7, #28]
 80089ea:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uPID->DispKi = Ki;
 80089f2:	69f9      	ldr	r1, [r7, #28]
 80089f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80089f8:	e9c1 2306 	strd	r2, r3, [r1, #24]
	uPID->DispKd = Kd;
 80089fc:	69f9      	ldr	r1, [r7, #28]
 80089fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a02:	e9c1 2308 	strd	r2, r3, [r1, #32]

	/* ~~~~~~~~~ Calculate time ~~~~~~~~ */
	SampleTimeInSec = ((double)uPID->SampleTime) / 1000;
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f7f7 fd8a 	bl	8000524 <__aeabi_ui2d>
 8008a10:	f04f 0200 	mov.w	r2, #0
 8008a14:	4b2a      	ldr	r3, [pc, #168]	; (8008ac0 <PID_SetTunings2+0x14c>)
 8008a16:	f7f7 ff29 	bl	800086c <__aeabi_ddiv>
 8008a1a:	4602      	mov	r2, r0
 8008a1c:	460b      	mov	r3, r1
 8008a1e:	e9c7 2308 	strd	r2, r3, [r7, #32]

	uPID->Kp = Kp;
 8008a22:	69f9      	ldr	r1, [r7, #28]
 8008a24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008a28:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	uPID->Ki = Ki * SampleTimeInSec;
 8008a2c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a30:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008a34:	f7f7 fdf0 	bl	8000618 <__aeabi_dmul>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	69f9      	ldr	r1, [r7, #28]
 8008a3e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	uPID->Kd = Kd / SampleTimeInSec;
 8008a42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008a46:	e9d7 0100 	ldrd	r0, r1, [r7]
 8008a4a:	f7f7 ff0f 	bl	800086c <__aeabi_ddiv>
 8008a4e:	4602      	mov	r2, r0
 8008a50:	460b      	mov	r3, r1
 8008a52:	69f9      	ldr	r1, [r7, #28]
 8008a54:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	/* ~~~~~~~~ Check direction ~~~~~~~~ */
	if (uPID->ControllerDirection == _PID_CD_REVERSE)
 8008a58:	69fb      	ldr	r3, [r7, #28]
 8008a5a:	78db      	ldrb	r3, [r3, #3]
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d12b      	bne.n	8008ab8 <PID_SetTunings2+0x144>
	{

		uPID->Kp = (0 - uPID->Kp);
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008a66:	f04f 0000 	mov.w	r0, #0
 8008a6a:	f04f 0100 	mov.w	r1, #0
 8008a6e:	f7f7 fc1b 	bl	80002a8 <__aeabi_dsub>
 8008a72:	4602      	mov	r2, r0
 8008a74:	460b      	mov	r3, r1
 8008a76:	69f9      	ldr	r1, [r7, #28]
 8008a78:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8008a7c:	69fb      	ldr	r3, [r7, #28]
 8008a7e:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008a82:	f04f 0000 	mov.w	r0, #0
 8008a86:	f04f 0100 	mov.w	r1, #0
 8008a8a:	f7f7 fc0d 	bl	80002a8 <__aeabi_dsub>
 8008a8e:	4602      	mov	r2, r0
 8008a90:	460b      	mov	r3, r1
 8008a92:	69f9      	ldr	r1, [r7, #28]
 8008a94:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008a9e:	f04f 0000 	mov.w	r0, #0
 8008aa2:	f04f 0100 	mov.w	r1, #0
 8008aa6:	f7f7 fbff 	bl	80002a8 <__aeabi_dsub>
 8008aaa:	4602      	mov	r2, r0
 8008aac:	460b      	mov	r3, r1
 8008aae:	69f9      	ldr	r1, [r7, #28]
 8008ab0:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
 8008ab4:	e000      	b.n	8008ab8 <PID_SetTunings2+0x144>
		return;
 8008ab6:	bf00      	nop

	}

}
 8008ab8:	3728      	adds	r7, #40	; 0x28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	408f4000 	.word	0x408f4000

08008ac4 <PID_SetControllerDirection>:

/* ~~~~~~~~~~~~~~~ PID Direction ~~~~~~~~~~~~~~~ */
void          PID_SetControllerDirection(PID_TypeDef *uPID, PIDCD_TypeDef Direction)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b082      	sub	sp, #8
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	460b      	mov	r3, r1
 8008ace:	70fb      	strb	r3, [r7, #3]
	/* ~~~~~~~~~~ Check parameters ~~~~~~~~~~ */
	if ((uPID->InAuto) && (Direction !=uPID->ControllerDirection))
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	785b      	ldrb	r3, [r3, #1]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d02e      	beq.n	8008b36 <PID_SetControllerDirection+0x72>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	78db      	ldrb	r3, [r3, #3]
 8008adc:	78fa      	ldrb	r2, [r7, #3]
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d029      	beq.n	8008b36 <PID_SetControllerDirection+0x72>
	{

		uPID->Kp = (0 - uPID->Kp);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8008ae8:	f04f 0000 	mov.w	r0, #0
 8008aec:	f04f 0100 	mov.w	r1, #0
 8008af0:	f7f7 fbda 	bl	80002a8 <__aeabi_dsub>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	6879      	ldr	r1, [r7, #4]
 8008afa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
		uPID->Ki = (0 - uPID->Ki);
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8008b04:	f04f 0000 	mov.w	r0, #0
 8008b08:	f04f 0100 	mov.w	r1, #0
 8008b0c:	f7f7 fbcc 	bl	80002a8 <__aeabi_dsub>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	6879      	ldr	r1, [r7, #4]
 8008b16:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd = (0 - uPID->Kd);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 8008b20:	f04f 0000 	mov.w	r0, #0
 8008b24:	f04f 0100 	mov.w	r1, #0
 8008b28:	f7f7 fbbe 	bl	80002a8 <__aeabi_dsub>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	6879      	ldr	r1, [r7, #4]
 8008b32:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	}

	uPID->ControllerDirection = Direction;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	78fa      	ldrb	r2, [r7, #3]
 8008b3a:	70da      	strb	r2, [r3, #3]

}
 8008b3c:	bf00      	nop
 8008b3e:	3708      	adds	r7, #8
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}

08008b44 <PID_SetSampleTime>:
	return uPID->ControllerDirection;
}

/* ~~~~~~~~~~~~~~~ PID Sampling ~~~~~~~~~~~~~~~~ */
void PID_SetSampleTime(PID_TypeDef *uPID, int32_t NewSampleTime)
{
 8008b44:	b5b0      	push	{r4, r5, r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]

	double ratio;

	/* ~~~~~~~~~~ Check value ~~~~~~~~~~ */
	if (NewSampleTime > 0)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dd2e      	ble.n	8008bb2 <PID_SetSampleTime+0x6e>
	{

		ratio = (double)NewSampleTime / (double)uPID->SampleTime;
 8008b54:	6838      	ldr	r0, [r7, #0]
 8008b56:	f7f7 fcf5 	bl	8000544 <__aeabi_i2d>
 8008b5a:	4604      	mov	r4, r0
 8008b5c:	460d      	mov	r5, r1
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f7f7 fcde 	bl	8000524 <__aeabi_ui2d>
 8008b68:	4602      	mov	r2, r0
 8008b6a:	460b      	mov	r3, r1
 8008b6c:	4620      	mov	r0, r4
 8008b6e:	4629      	mov	r1, r5
 8008b70:	f7f7 fe7c 	bl	800086c <__aeabi_ddiv>
 8008b74:	4602      	mov	r2, r0
 8008b76:	460b      	mov	r3, r1
 8008b78:	e9c7 2302 	strd	r2, r3, [r7, #8]

		uPID->Ki *= ratio;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8008b82:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b86:	f7f7 fd47 	bl	8000618 <__aeabi_dmul>
 8008b8a:	4602      	mov	r2, r0
 8008b8c:	460b      	mov	r3, r1
 8008b8e:	6879      	ldr	r1, [r7, #4]
 8008b90:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
		uPID->Kd /= ratio;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8008b9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008b9e:	f7f7 fe65 	bl	800086c <__aeabi_ddiv>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	6879      	ldr	r1, [r7, #4]
 8008ba8:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
		uPID->SampleTime = (uint32_t)NewSampleTime;
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	609a      	str	r2, [r3, #8]

	}

}
 8008bb2:	bf00      	nop
 8008bb4:	3710      	adds	r7, #16
 8008bb6:	46bd      	mov	sp, r7
 8008bb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008bbc:	b480      	push	{r7}
 8008bbe:	b083      	sub	sp, #12
 8008bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	607b      	str	r3, [r7, #4]
 8008bc6:	4b10      	ldr	r3, [pc, #64]	; (8008c08 <HAL_MspInit+0x4c>)
 8008bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bca:	4a0f      	ldr	r2, [pc, #60]	; (8008c08 <HAL_MspInit+0x4c>)
 8008bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8008bd2:	4b0d      	ldr	r3, [pc, #52]	; (8008c08 <HAL_MspInit+0x4c>)
 8008bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bda:	607b      	str	r3, [r7, #4]
 8008bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008bde:	2300      	movs	r3, #0
 8008be0:	603b      	str	r3, [r7, #0]
 8008be2:	4b09      	ldr	r3, [pc, #36]	; (8008c08 <HAL_MspInit+0x4c>)
 8008be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be6:	4a08      	ldr	r2, [pc, #32]	; (8008c08 <HAL_MspInit+0x4c>)
 8008be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bec:	6413      	str	r3, [r2, #64]	; 0x40
 8008bee:	4b06      	ldr	r3, [pc, #24]	; (8008c08 <HAL_MspInit+0x4c>)
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bf6:	603b      	str	r3, [r7, #0]
 8008bf8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008bfa:	bf00      	nop
 8008bfc:	370c      	adds	r7, #12
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	40023800 	.word	0x40023800

08008c0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8008c10:	f003 ff94 	bl	800cb3c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8008c14:	e7fe      	b.n	8008c14 <NMI_Handler+0x8>

08008c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c16:	b480      	push	{r7}
 8008c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c1a:	e7fe      	b.n	8008c1a <HardFault_Handler+0x4>

08008c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c20:	e7fe      	b.n	8008c20 <MemManage_Handler+0x4>

08008c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c22:	b480      	push	{r7}
 8008c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c26:	e7fe      	b.n	8008c26 <BusFault_Handler+0x4>

08008c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c28:	b480      	push	{r7}
 8008c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c2c:	e7fe      	b.n	8008c2c <UsageFault_Handler+0x4>

08008c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c2e:	b480      	push	{r7}
 8008c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c32:	bf00      	nop
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr

08008c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c40:	bf00      	nop
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c4e:	bf00      	nop
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr

08008c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c5c:	f001 f85a 	bl	8009d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c60:	bf00      	nop
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008c68:	4802      	ldr	r0, [pc, #8]	; (8008c74 <CAN1_TX_IRQHandler+0x10>)
 8008c6a:	f002 f96f 	bl	800af4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8008c6e:	bf00      	nop
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20000480 	.word	0x20000480

08008c78 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008c7c:	4802      	ldr	r0, [pc, #8]	; (8008c88 <CAN1_RX0_IRQHandler+0x10>)
 8008c7e:	f002 f965 	bl	800af4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8008c82:	bf00      	nop
 8008c84:	bd80      	pop	{r7, pc}
 8008c86:	bf00      	nop
 8008c88:	20000480 	.word	0x20000480

08008c8c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8008c90:	4802      	ldr	r0, [pc, #8]	; (8008c9c <CAN1_RX1_IRQHandler+0x10>)
 8008c92:	f002 f95b 	bl	800af4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8008c96:	bf00      	nop
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	20000480 	.word	0x20000480

08008ca0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8008ca0:	b580      	push	{r7, lr}
 8008ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008ca4:	4803      	ldr	r0, [pc, #12]	; (8008cb4 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8008ca6:	f004 f973 	bl	800cf90 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8008caa:	4803      	ldr	r0, [pc, #12]	; (8008cb8 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8008cac:	f004 f970 	bl	800cf90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8008cb0:	bf00      	nop
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20000554 	.word	0x20000554
 8008cb8:	20000674 	.word	0x20000674

08008cbc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8008cbc:	b580      	push	{r7, lr}
 8008cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008cc0:	4803      	ldr	r0, [pc, #12]	; (8008cd0 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8008cc2:	f004 f965 	bl	800cf90 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8008cc6:	4803      	ldr	r0, [pc, #12]	; (8008cd4 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8008cc8:	f004 f962 	bl	800cf90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8008ccc:	bf00      	nop
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	20000554 	.word	0x20000554
 8008cd4:	200006bc 	.word	0x200006bc

08008cd8 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008cdc:	4803      	ldr	r0, [pc, #12]	; (8008cec <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8008cde:	f004 f957 	bl	800cf90 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8008ce2:	4803      	ldr	r0, [pc, #12]	; (8008cf0 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8008ce4:	f004 f954 	bl	800cf90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8008ce8:	bf00      	nop
 8008cea:	bd80      	pop	{r7, pc}
 8008cec:	20000554 	.word	0x20000554
 8008cf0:	20000704 	.word	0x20000704

08008cf4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008cf8:	4802      	ldr	r0, [pc, #8]	; (8008d04 <TIM2_IRQHandler+0x10>)
 8008cfa:	f004 f949 	bl	800cf90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008cfe:	bf00      	nop
 8008d00:	bd80      	pop	{r7, pc}
 8008d02:	bf00      	nop
 8008d04:	2000059c 	.word	0x2000059c

08008d08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8008d0c:	4802      	ldr	r0, [pc, #8]	; (8008d18 <TIM4_IRQHandler+0x10>)
 8008d0e:	f004 f93f 	bl	800cf90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8008d12:	bf00      	nop
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	200005e4 	.word	0x200005e4

08008d1c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8008d20:	4802      	ldr	r0, [pc, #8]	; (8008d2c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8008d22:	f004 f935 	bl	800cf90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8008d26:	bf00      	nop
 8008d28:	bd80      	pop	{r7, pc}
 8008d2a:	bf00      	nop
 8008d2c:	20000794 	.word	0x20000794

08008d30 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008d34:	4802      	ldr	r0, [pc, #8]	; (8008d40 <TIM5_IRQHandler+0x10>)
 8008d36:	f004 f92b 	bl	800cf90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008d3a:	bf00      	nop
 8008d3c:	bd80      	pop	{r7, pc}
 8008d3e:	bf00      	nop
 8008d40:	2000062c 	.word	0x2000062c

08008d44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008d48:	4802      	ldr	r0, [pc, #8]	; (8008d54 <DMA2_Stream0_IRQHandler+0x10>)
 8008d4a:	f002 fd39 	bl	800b7c0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008d4e:	bf00      	nop
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	bf00      	nop
 8008d54:	20000420 	.word	0x20000420

08008d58 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008d58:	b580      	push	{r7, lr}
 8008d5a:	b086      	sub	sp, #24
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d64:	2300      	movs	r3, #0
 8008d66:	617b      	str	r3, [r7, #20]
 8008d68:	e00a      	b.n	8008d80 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008d6a:	f3af 8000 	nop.w
 8008d6e:	4601      	mov	r1, r0
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	1c5a      	adds	r2, r3, #1
 8008d74:	60ba      	str	r2, [r7, #8]
 8008d76:	b2ca      	uxtb	r2, r1
 8008d78:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	617b      	str	r3, [r7, #20]
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	429a      	cmp	r2, r3
 8008d86:	dbf0      	blt.n	8008d6a <_read+0x12>
  }

  return len;
 8008d88:	687b      	ldr	r3, [r7, #4]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3718      	adds	r7, #24
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b086      	sub	sp, #24
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	60f8      	str	r0, [r7, #12]
 8008d9a:	60b9      	str	r1, [r7, #8]
 8008d9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008d9e:	2300      	movs	r3, #0
 8008da0:	617b      	str	r3, [r7, #20]
 8008da2:	e009      	b.n	8008db8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	60ba      	str	r2, [r7, #8]
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	4618      	mov	r0, r3
 8008dae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	3301      	adds	r3, #1
 8008db6:	617b      	str	r3, [r7, #20]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	dbf1      	blt.n	8008da4 <_write+0x12>
  }
  return len;
 8008dc0:	687b      	ldr	r3, [r7, #4]
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	3718      	adds	r7, #24
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd80      	pop	{r7, pc}

08008dca <_close>:

int _close(int file)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	b083      	sub	sp, #12
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008dd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr

08008de2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008de2:	b480      	push	{r7}
 8008de4:	b083      	sub	sp, #12
 8008de6:	af00      	add	r7, sp, #0
 8008de8:	6078      	str	r0, [r7, #4]
 8008dea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008df2:	605a      	str	r2, [r3, #4]
  return 0;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	370c      	adds	r7, #12
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e00:	4770      	bx	lr

08008e02 <_isatty>:

int _isatty(int file)
{
 8008e02:	b480      	push	{r7}
 8008e04:	b083      	sub	sp, #12
 8008e06:	af00      	add	r7, sp, #0
 8008e08:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008e0a:	2301      	movs	r3, #1
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	370c      	adds	r7, #12
 8008e10:	46bd      	mov	sp, r7
 8008e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e16:	4770      	bx	lr

08008e18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008e18:	b480      	push	{r7}
 8008e1a:	b085      	sub	sp, #20
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	60b9      	str	r1, [r7, #8]
 8008e22:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
	...

08008e34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e3c:	4a14      	ldr	r2, [pc, #80]	; (8008e90 <_sbrk+0x5c>)
 8008e3e:	4b15      	ldr	r3, [pc, #84]	; (8008e94 <_sbrk+0x60>)
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e48:	4b13      	ldr	r3, [pc, #76]	; (8008e98 <_sbrk+0x64>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d102      	bne.n	8008e56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e50:	4b11      	ldr	r3, [pc, #68]	; (8008e98 <_sbrk+0x64>)
 8008e52:	4a12      	ldr	r2, [pc, #72]	; (8008e9c <_sbrk+0x68>)
 8008e54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e56:	4b10      	ldr	r3, [pc, #64]	; (8008e98 <_sbrk+0x64>)
 8008e58:	681a      	ldr	r2, [r3, #0]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	4413      	add	r3, r2
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	429a      	cmp	r2, r3
 8008e62:	d207      	bcs.n	8008e74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e64:	f005 ffde 	bl	800ee24 <__errno>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	220c      	movs	r2, #12
 8008e6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e72:	e009      	b.n	8008e88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e74:	4b08      	ldr	r3, [pc, #32]	; (8008e98 <_sbrk+0x64>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e7a:	4b07      	ldr	r3, [pc, #28]	; (8008e98 <_sbrk+0x64>)
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4413      	add	r3, r2
 8008e82:	4a05      	ldr	r2, [pc, #20]	; (8008e98 <_sbrk+0x64>)
 8008e84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008e86:	68fb      	ldr	r3, [r7, #12]
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3718      	adds	r7, #24
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}
 8008e90:	20030000 	.word	0x20030000
 8008e94:	00000400 	.word	0x00000400
 8008e98:	20000550 	.word	0x20000550
 8008e9c:	20000de8 	.word	0x20000de8

08008ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008ea4:	4b06      	ldr	r3, [pc, #24]	; (8008ec0 <SystemInit+0x20>)
 8008ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eaa:	4a05      	ldr	r2, [pc, #20]	; (8008ec0 <SystemInit+0x20>)
 8008eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008eb4:	bf00      	nop
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ebc:	4770      	bx	lr
 8008ebe:	bf00      	nop
 8008ec0:	e000ed00 	.word	0xe000ed00

08008ec4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b086      	sub	sp, #24
 8008ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008eca:	f107 0308 	add.w	r3, r7, #8
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
 8008ed2:	605a      	str	r2, [r3, #4]
 8008ed4:	609a      	str	r2, [r3, #8]
 8008ed6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008ed8:	463b      	mov	r3, r7
 8008eda:	2200      	movs	r2, #0
 8008edc:	601a      	str	r2, [r3, #0]
 8008ede:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008ee0:	4b1e      	ldr	r3, [pc, #120]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008ee2:	4a1f      	ldr	r2, [pc, #124]	; (8008f60 <MX_TIM1_Init+0x9c>)
 8008ee4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 168-1;
 8008ee6:	4b1d      	ldr	r3, [pc, #116]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008ee8:	22a7      	movs	r2, #167	; 0xa7
 8008eea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008eec:	4b1b      	ldr	r3, [pc, #108]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008eee:	2200      	movs	r2, #0
 8008ef0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8008ef2:	4b1a      	ldr	r3, [pc, #104]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008ef8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008efa:	4b18      	ldr	r3, [pc, #96]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008f00:	4b16      	ldr	r3, [pc, #88]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008f06:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008f08:	2200      	movs	r2, #0
 8008f0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008f0c:	4813      	ldr	r0, [pc, #76]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008f0e:	f003 fe30 	bl	800cb72 <HAL_TIM_Base_Init>
 8008f12:	4603      	mov	r3, r0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d001      	beq.n	8008f1c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8008f18:	f7ff fb28 	bl	800856c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008f1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008f20:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008f22:	f107 0308 	add.w	r3, r7, #8
 8008f26:	4619      	mov	r1, r3
 8008f28:	480c      	ldr	r0, [pc, #48]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008f2a:	f004 f9e3 	bl	800d2f4 <HAL_TIM_ConfigClockSource>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8008f34:	f7ff fb1a 	bl	800856c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008f40:	463b      	mov	r3, r7
 8008f42:	4619      	mov	r1, r3
 8008f44:	4805      	ldr	r0, [pc, #20]	; (8008f5c <MX_TIM1_Init+0x98>)
 8008f46:	f004 fde1 	bl	800db0c <HAL_TIMEx_MasterConfigSynchronization>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8008f50:	f7ff fb0c 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008f54:	bf00      	nop
 8008f56:	3718      	adds	r7, #24
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	20000554 	.word	0x20000554
 8008f60:	40010000 	.word	0x40010000

08008f64 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b086      	sub	sp, #24
 8008f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008f6a:	f107 0308 	add.w	r3, r7, #8
 8008f6e:	2200      	movs	r2, #0
 8008f70:	601a      	str	r2, [r3, #0]
 8008f72:	605a      	str	r2, [r3, #4]
 8008f74:	609a      	str	r2, [r3, #8]
 8008f76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008f78:	463b      	mov	r3, r7
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	601a      	str	r2, [r3, #0]
 8008f7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008f80:	4b1d      	ldr	r3, [pc, #116]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008f82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008f86:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 8008f88:	4b1b      	ldr	r3, [pc, #108]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008f8a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8008f8e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008f90:	4b19      	ldr	r3, [pc, #100]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8008f96:	4b18      	ldr	r3, [pc, #96]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008f98:	2263      	movs	r2, #99	; 0x63
 8008f9a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008f9c:	4b16      	ldr	r3, [pc, #88]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008fa2:	4b15      	ldr	r3, [pc, #84]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008fa8:	4813      	ldr	r0, [pc, #76]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008faa:	f003 fde2 	bl	800cb72 <HAL_TIM_Base_Init>
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d001      	beq.n	8008fb8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8008fb4:	f7ff fada 	bl	800856c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008fbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008fbe:	f107 0308 	add.w	r3, r7, #8
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	480c      	ldr	r0, [pc, #48]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008fc6:	f004 f995 	bl	800d2f4 <HAL_TIM_ConfigClockSource>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d001      	beq.n	8008fd4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8008fd0:	f7ff facc 	bl	800856c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008fdc:	463b      	mov	r3, r7
 8008fde:	4619      	mov	r1, r3
 8008fe0:	4805      	ldr	r0, [pc, #20]	; (8008ff8 <MX_TIM2_Init+0x94>)
 8008fe2:	f004 fd93 	bl	800db0c <HAL_TIMEx_MasterConfigSynchronization>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d001      	beq.n	8008ff0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8008fec:	f7ff fabe 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8008ff0:	bf00      	nop
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	2000059c 	.word	0x2000059c

08008ffc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	b086      	sub	sp, #24
 8009000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009002:	f107 0308 	add.w	r3, r7, #8
 8009006:	2200      	movs	r2, #0
 8009008:	601a      	str	r2, [r3, #0]
 800900a:	605a      	str	r2, [r3, #4]
 800900c:	609a      	str	r2, [r3, #8]
 800900e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009010:	463b      	mov	r3, r7
 8009012:	2200      	movs	r2, #0
 8009014:	601a      	str	r2, [r3, #0]
 8009016:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8009018:	4b1d      	ldr	r3, [pc, #116]	; (8009090 <MX_TIM4_Init+0x94>)
 800901a:	4a1e      	ldr	r2, [pc, #120]	; (8009094 <MX_TIM4_Init+0x98>)
 800901c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 800901e:	4b1c      	ldr	r3, [pc, #112]	; (8009090 <MX_TIM4_Init+0x94>)
 8009020:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8009024:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009026:	4b1a      	ldr	r3, [pc, #104]	; (8009090 <MX_TIM4_Init+0x94>)
 8009028:	2200      	movs	r2, #0
 800902a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 5000-1;
 800902c:	4b18      	ldr	r3, [pc, #96]	; (8009090 <MX_TIM4_Init+0x94>)
 800902e:	f241 3287 	movw	r2, #4999	; 0x1387
 8009032:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009034:	4b16      	ldr	r3, [pc, #88]	; (8009090 <MX_TIM4_Init+0x94>)
 8009036:	2200      	movs	r2, #0
 8009038:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800903a:	4b15      	ldr	r3, [pc, #84]	; (8009090 <MX_TIM4_Init+0x94>)
 800903c:	2200      	movs	r2, #0
 800903e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8009040:	4813      	ldr	r0, [pc, #76]	; (8009090 <MX_TIM4_Init+0x94>)
 8009042:	f003 fd96 	bl	800cb72 <HAL_TIM_Base_Init>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d001      	beq.n	8009050 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800904c:	f7ff fa8e 	bl	800856c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8009056:	f107 0308 	add.w	r3, r7, #8
 800905a:	4619      	mov	r1, r3
 800905c:	480c      	ldr	r0, [pc, #48]	; (8009090 <MX_TIM4_Init+0x94>)
 800905e:	f004 f949 	bl	800d2f4 <HAL_TIM_ConfigClockSource>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d001      	beq.n	800906c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8009068:	f7ff fa80 	bl	800856c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800906c:	2300      	movs	r3, #0
 800906e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8009070:	2300      	movs	r3, #0
 8009072:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8009074:	463b      	mov	r3, r7
 8009076:	4619      	mov	r1, r3
 8009078:	4805      	ldr	r0, [pc, #20]	; (8009090 <MX_TIM4_Init+0x94>)
 800907a:	f004 fd47 	bl	800db0c <HAL_TIMEx_MasterConfigSynchronization>
 800907e:	4603      	mov	r3, r0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8009084:	f7ff fa72 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8009088:	bf00      	nop
 800908a:	3718      	adds	r7, #24
 800908c:	46bd      	mov	sp, r7
 800908e:	bd80      	pop	{r7, pc}
 8009090:	200005e4 	.word	0x200005e4
 8009094:	40000800 	.word	0x40000800

08009098 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b086      	sub	sp, #24
 800909c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800909e:	f107 0308 	add.w	r3, r7, #8
 80090a2:	2200      	movs	r2, #0
 80090a4:	601a      	str	r2, [r3, #0]
 80090a6:	605a      	str	r2, [r3, #4]
 80090a8:	609a      	str	r2, [r3, #8]
 80090aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80090ac:	463b      	mov	r3, r7
 80090ae:	2200      	movs	r2, #0
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80090b4:	4b1d      	ldr	r3, [pc, #116]	; (800912c <MX_TIM5_Init+0x94>)
 80090b6:	4a1e      	ldr	r2, [pc, #120]	; (8009130 <MX_TIM5_Init+0x98>)
 80090b8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 8400-1;
 80090ba:	4b1c      	ldr	r3, [pc, #112]	; (800912c <MX_TIM5_Init+0x94>)
 80090bc:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80090c0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80090c2:	4b1a      	ldr	r3, [pc, #104]	; (800912c <MX_TIM5_Init+0x94>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000-1;
 80090c8:	4b18      	ldr	r3, [pc, #96]	; (800912c <MX_TIM5_Init+0x94>)
 80090ca:	f240 32e7 	movw	r2, #999	; 0x3e7
 80090ce:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80090d0:	4b16      	ldr	r3, [pc, #88]	; (800912c <MX_TIM5_Init+0x94>)
 80090d2:	2200      	movs	r2, #0
 80090d4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80090d6:	4b15      	ldr	r3, [pc, #84]	; (800912c <MX_TIM5_Init+0x94>)
 80090d8:	2200      	movs	r2, #0
 80090da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80090dc:	4813      	ldr	r0, [pc, #76]	; (800912c <MX_TIM5_Init+0x94>)
 80090de:	f003 fd48 	bl	800cb72 <HAL_TIM_Base_Init>
 80090e2:	4603      	mov	r3, r0
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80090e8:	f7ff fa40 	bl	800856c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80090ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80090f2:	f107 0308 	add.w	r3, r7, #8
 80090f6:	4619      	mov	r1, r3
 80090f8:	480c      	ldr	r0, [pc, #48]	; (800912c <MX_TIM5_Init+0x94>)
 80090fa:	f004 f8fb 	bl	800d2f4 <HAL_TIM_ConfigClockSource>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8009104:	f7ff fa32 	bl	800856c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8009108:	2300      	movs	r3, #0
 800910a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800910c:	2300      	movs	r3, #0
 800910e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8009110:	463b      	mov	r3, r7
 8009112:	4619      	mov	r1, r3
 8009114:	4805      	ldr	r0, [pc, #20]	; (800912c <MX_TIM5_Init+0x94>)
 8009116:	f004 fcf9 	bl	800db0c <HAL_TIMEx_MasterConfigSynchronization>
 800911a:	4603      	mov	r3, r0
 800911c:	2b00      	cmp	r3, #0
 800911e:	d001      	beq.n	8009124 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8009120:	f7ff fa24 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8009124:	bf00      	nop
 8009126:	3718      	adds	r7, #24
 8009128:	46bd      	mov	sp, r7
 800912a:	bd80      	pop	{r7, pc}
 800912c:	2000062c 	.word	0x2000062c
 8009130:	40000c00 	.word	0x40000c00

08009134 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b08c      	sub	sp, #48	; 0x30
 8009138:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800913a:	f107 0320 	add.w	r3, r7, #32
 800913e:	2200      	movs	r2, #0
 8009140:	601a      	str	r2, [r3, #0]
 8009142:	605a      	str	r2, [r3, #4]
 8009144:	609a      	str	r2, [r3, #8]
 8009146:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009148:	1d3b      	adds	r3, r7, #4
 800914a:	2200      	movs	r2, #0
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	605a      	str	r2, [r3, #4]
 8009150:	609a      	str	r2, [r3, #8]
 8009152:	60da      	str	r2, [r3, #12]
 8009154:	611a      	str	r2, [r3, #16]
 8009156:	615a      	str	r2, [r3, #20]
 8009158:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800915a:	4b2b      	ldr	r3, [pc, #172]	; (8009208 <MX_TIM9_Init+0xd4>)
 800915c:	4a2b      	ldr	r2, [pc, #172]	; (800920c <MX_TIM9_Init+0xd8>)
 800915e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 16800-1;
 8009160:	4b29      	ldr	r3, [pc, #164]	; (8009208 <MX_TIM9_Init+0xd4>)
 8009162:	f244 129f 	movw	r2, #16799	; 0x419f
 8009166:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009168:	4b27      	ldr	r3, [pc, #156]	; (8009208 <MX_TIM9_Init+0xd4>)
 800916a:	2200      	movs	r2, #0
 800916c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 5000-1;
 800916e:	4b26      	ldr	r3, [pc, #152]	; (8009208 <MX_TIM9_Init+0xd4>)
 8009170:	f241 3287 	movw	r2, #4999	; 0x1387
 8009174:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009176:	4b24      	ldr	r3, [pc, #144]	; (8009208 <MX_TIM9_Init+0xd4>)
 8009178:	2200      	movs	r2, #0
 800917a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800917c:	4b22      	ldr	r3, [pc, #136]	; (8009208 <MX_TIM9_Init+0xd4>)
 800917e:	2200      	movs	r2, #0
 8009180:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8009182:	4821      	ldr	r0, [pc, #132]	; (8009208 <MX_TIM9_Init+0xd4>)
 8009184:	f003 fcf5 	bl	800cb72 <HAL_TIM_Base_Init>
 8009188:	4603      	mov	r3, r0
 800918a:	2b00      	cmp	r3, #0
 800918c:	d001      	beq.n	8009192 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 800918e:	f7ff f9ed 	bl	800856c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8009192:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009196:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8009198:	f107 0320 	add.w	r3, r7, #32
 800919c:	4619      	mov	r1, r3
 800919e:	481a      	ldr	r0, [pc, #104]	; (8009208 <MX_TIM9_Init+0xd4>)
 80091a0:	f004 f8a8 	bl	800d2f4 <HAL_TIM_ConfigClockSource>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 80091aa:	f7ff f9df 	bl	800856c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80091ae:	4816      	ldr	r0, [pc, #88]	; (8009208 <MX_TIM9_Init+0xd4>)
 80091b0:	f003 fdcd 	bl	800cd4e <HAL_TIM_PWM_Init>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 80091ba:	f7ff f9d7 	bl	800856c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80091be:	2360      	movs	r3, #96	; 0x60
 80091c0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80091c2:	2300      	movs	r3, #0
 80091c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80091ca:	2300      	movs	r3, #0
 80091cc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80091ce:	1d3b      	adds	r3, r7, #4
 80091d0:	2200      	movs	r2, #0
 80091d2:	4619      	mov	r1, r3
 80091d4:	480c      	ldr	r0, [pc, #48]	; (8009208 <MX_TIM9_Init+0xd4>)
 80091d6:	f003 ffcb 	bl	800d170 <HAL_TIM_PWM_ConfigChannel>
 80091da:	4603      	mov	r3, r0
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d001      	beq.n	80091e4 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80091e0:	f7ff f9c4 	bl	800856c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80091e4:	1d3b      	adds	r3, r7, #4
 80091e6:	2204      	movs	r2, #4
 80091e8:	4619      	mov	r1, r3
 80091ea:	4807      	ldr	r0, [pc, #28]	; (8009208 <MX_TIM9_Init+0xd4>)
 80091ec:	f003 ffc0 	bl	800d170 <HAL_TIM_PWM_ConfigChannel>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <MX_TIM9_Init+0xc6>
  {
    Error_Handler();
 80091f6:	f7ff f9b9 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80091fa:	4803      	ldr	r0, [pc, #12]	; (8009208 <MX_TIM9_Init+0xd4>)
 80091fc:	f000 fad2 	bl	80097a4 <HAL_TIM_MspPostInit>

}
 8009200:	bf00      	nop
 8009202:	3730      	adds	r7, #48	; 0x30
 8009204:	46bd      	mov	sp, r7
 8009206:	bd80      	pop	{r7, pc}
 8009208:	20000674 	.word	0x20000674
 800920c:	40014000 	.word	0x40014000

08009210 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b088      	sub	sp, #32
 8009214:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8009216:	1d3b      	adds	r3, r7, #4
 8009218:	2200      	movs	r2, #0
 800921a:	601a      	str	r2, [r3, #0]
 800921c:	605a      	str	r2, [r3, #4]
 800921e:	609a      	str	r2, [r3, #8]
 8009220:	60da      	str	r2, [r3, #12]
 8009222:	611a      	str	r2, [r3, #16]
 8009224:	615a      	str	r2, [r3, #20]
 8009226:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8009228:	4b1e      	ldr	r3, [pc, #120]	; (80092a4 <MX_TIM10_Init+0x94>)
 800922a:	4a1f      	ldr	r2, [pc, #124]	; (80092a8 <MX_TIM10_Init+0x98>)
 800922c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800922e:	4b1d      	ldr	r3, [pc, #116]	; (80092a4 <MX_TIM10_Init+0x94>)
 8009230:	2200      	movs	r2, #0
 8009232:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009234:	4b1b      	ldr	r3, [pc, #108]	; (80092a4 <MX_TIM10_Init+0x94>)
 8009236:	2200      	movs	r2, #0
 8009238:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 800923a:	4b1a      	ldr	r3, [pc, #104]	; (80092a4 <MX_TIM10_Init+0x94>)
 800923c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009240:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009242:	4b18      	ldr	r3, [pc, #96]	; (80092a4 <MX_TIM10_Init+0x94>)
 8009244:	2200      	movs	r2, #0
 8009246:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8009248:	4b16      	ldr	r3, [pc, #88]	; (80092a4 <MX_TIM10_Init+0x94>)
 800924a:	2200      	movs	r2, #0
 800924c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800924e:	4815      	ldr	r0, [pc, #84]	; (80092a4 <MX_TIM10_Init+0x94>)
 8009250:	f003 fc8f 	bl	800cb72 <HAL_TIM_Base_Init>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d001      	beq.n	800925e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800925a:	f7ff f987 	bl	800856c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800925e:	4811      	ldr	r0, [pc, #68]	; (80092a4 <MX_TIM10_Init+0x94>)
 8009260:	f003 fd75 	bl	800cd4e <HAL_TIM_PWM_Init>
 8009264:	4603      	mov	r3, r0
 8009266:	2b00      	cmp	r3, #0
 8009268:	d001      	beq.n	800926e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800926a:	f7ff f97f 	bl	800856c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800926e:	2360      	movs	r3, #96	; 0x60
 8009270:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009272:	2300      	movs	r3, #0
 8009274:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009276:	2300      	movs	r3, #0
 8009278:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800927a:	2300      	movs	r3, #0
 800927c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800927e:	1d3b      	adds	r3, r7, #4
 8009280:	2200      	movs	r2, #0
 8009282:	4619      	mov	r1, r3
 8009284:	4807      	ldr	r0, [pc, #28]	; (80092a4 <MX_TIM10_Init+0x94>)
 8009286:	f003 ff73 	bl	800d170 <HAL_TIM_PWM_ConfigChannel>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d001      	beq.n	8009294 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8009290:	f7ff f96c 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8009294:	4803      	ldr	r0, [pc, #12]	; (80092a4 <MX_TIM10_Init+0x94>)
 8009296:	f000 fa85 	bl	80097a4 <HAL_TIM_MspPostInit>

}
 800929a:	bf00      	nop
 800929c:	3720      	adds	r7, #32
 800929e:	46bd      	mov	sp, r7
 80092a0:	bd80      	pop	{r7, pc}
 80092a2:	bf00      	nop
 80092a4:	200006bc 	.word	0x200006bc
 80092a8:	40014400 	.word	0x40014400

080092ac <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b088      	sub	sp, #32
 80092b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80092b2:	1d3b      	adds	r3, r7, #4
 80092b4:	2200      	movs	r2, #0
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	605a      	str	r2, [r3, #4]
 80092ba:	609a      	str	r2, [r3, #8]
 80092bc:	60da      	str	r2, [r3, #12]
 80092be:	611a      	str	r2, [r3, #16]
 80092c0:	615a      	str	r2, [r3, #20]
 80092c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80092c4:	4b1d      	ldr	r3, [pc, #116]	; (800933c <MX_TIM11_Init+0x90>)
 80092c6:	4a1e      	ldr	r2, [pc, #120]	; (8009340 <MX_TIM11_Init+0x94>)
 80092c8:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 168-1;
 80092ca:	4b1c      	ldr	r3, [pc, #112]	; (800933c <MX_TIM11_Init+0x90>)
 80092cc:	22a7      	movs	r2, #167	; 0xa7
 80092ce:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80092d0:	4b1a      	ldr	r3, [pc, #104]	; (800933c <MX_TIM11_Init+0x90>)
 80092d2:	2200      	movs	r2, #0
 80092d4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 100-1;
 80092d6:	4b19      	ldr	r3, [pc, #100]	; (800933c <MX_TIM11_Init+0x90>)
 80092d8:	2263      	movs	r2, #99	; 0x63
 80092da:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80092dc:	4b17      	ldr	r3, [pc, #92]	; (800933c <MX_TIM11_Init+0x90>)
 80092de:	2200      	movs	r2, #0
 80092e0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80092e2:	4b16      	ldr	r3, [pc, #88]	; (800933c <MX_TIM11_Init+0x90>)
 80092e4:	2200      	movs	r2, #0
 80092e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80092e8:	4814      	ldr	r0, [pc, #80]	; (800933c <MX_TIM11_Init+0x90>)
 80092ea:	f003 fc42 	bl	800cb72 <HAL_TIM_Base_Init>
 80092ee:	4603      	mov	r3, r0
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d001      	beq.n	80092f8 <MX_TIM11_Init+0x4c>
  {
    Error_Handler();
 80092f4:	f7ff f93a 	bl	800856c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80092f8:	4810      	ldr	r0, [pc, #64]	; (800933c <MX_TIM11_Init+0x90>)
 80092fa:	f003 fd28 	bl	800cd4e <HAL_TIM_PWM_Init>
 80092fe:	4603      	mov	r3, r0
 8009300:	2b00      	cmp	r3, #0
 8009302:	d001      	beq.n	8009308 <MX_TIM11_Init+0x5c>
  {
    Error_Handler();
 8009304:	f7ff f932 	bl	800856c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009308:	2360      	movs	r3, #96	; 0x60
 800930a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800930c:	2300      	movs	r3, #0
 800930e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009310:	2300      	movs	r3, #0
 8009312:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009314:	2300      	movs	r3, #0
 8009316:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009318:	1d3b      	adds	r3, r7, #4
 800931a:	2200      	movs	r2, #0
 800931c:	4619      	mov	r1, r3
 800931e:	4807      	ldr	r0, [pc, #28]	; (800933c <MX_TIM11_Init+0x90>)
 8009320:	f003 ff26 	bl	800d170 <HAL_TIM_PWM_ConfigChannel>
 8009324:	4603      	mov	r3, r0
 8009326:	2b00      	cmp	r3, #0
 8009328:	d001      	beq.n	800932e <MX_TIM11_Init+0x82>
  {
    Error_Handler();
 800932a:	f7ff f91f 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 800932e:	4803      	ldr	r0, [pc, #12]	; (800933c <MX_TIM11_Init+0x90>)
 8009330:	f000 fa38 	bl	80097a4 <HAL_TIM_MspPostInit>

}
 8009334:	bf00      	nop
 8009336:	3720      	adds	r7, #32
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000704 	.word	0x20000704
 8009340:	40014800 	.word	0x40014800

08009344 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b08c      	sub	sp, #48	; 0x30
 8009348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800934a:	f107 0320 	add.w	r3, r7, #32
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]
 8009352:	605a      	str	r2, [r3, #4]
 8009354:	609a      	str	r2, [r3, #8]
 8009356:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8009358:	1d3b      	adds	r3, r7, #4
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]
 800935e:	605a      	str	r2, [r3, #4]
 8009360:	609a      	str	r2, [r3, #8]
 8009362:	60da      	str	r2, [r3, #12]
 8009364:	611a      	str	r2, [r3, #16]
 8009366:	615a      	str	r2, [r3, #20]
 8009368:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800936a:	4b25      	ldr	r3, [pc, #148]	; (8009400 <MX_TIM12_Init+0xbc>)
 800936c:	4a25      	ldr	r2, [pc, #148]	; (8009404 <MX_TIM12_Init+0xc0>)
 800936e:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8009370:	4b23      	ldr	r3, [pc, #140]	; (8009400 <MX_TIM12_Init+0xbc>)
 8009372:	2200      	movs	r2, #0
 8009374:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8009376:	4b22      	ldr	r3, [pc, #136]	; (8009400 <MX_TIM12_Init+0xbc>)
 8009378:	2200      	movs	r2, #0
 800937a:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 800937c:	4b20      	ldr	r3, [pc, #128]	; (8009400 <MX_TIM12_Init+0xbc>)
 800937e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009382:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009384:	4b1e      	ldr	r3, [pc, #120]	; (8009400 <MX_TIM12_Init+0xbc>)
 8009386:	2200      	movs	r2, #0
 8009388:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800938a:	4b1d      	ldr	r3, [pc, #116]	; (8009400 <MX_TIM12_Init+0xbc>)
 800938c:	2200      	movs	r2, #0
 800938e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8009390:	481b      	ldr	r0, [pc, #108]	; (8009400 <MX_TIM12_Init+0xbc>)
 8009392:	f003 fbee 	bl	800cb72 <HAL_TIM_Base_Init>
 8009396:	4603      	mov	r3, r0
 8009398:	2b00      	cmp	r3, #0
 800939a:	d001      	beq.n	80093a0 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 800939c:	f7ff f8e6 	bl	800856c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80093a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093a4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80093a6:	f107 0320 	add.w	r3, r7, #32
 80093aa:	4619      	mov	r1, r3
 80093ac:	4814      	ldr	r0, [pc, #80]	; (8009400 <MX_TIM12_Init+0xbc>)
 80093ae:	f003 ffa1 	bl	800d2f4 <HAL_TIM_ConfigClockSource>
 80093b2:	4603      	mov	r3, r0
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d001      	beq.n	80093bc <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 80093b8:	f7ff f8d8 	bl	800856c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80093bc:	4810      	ldr	r0, [pc, #64]	; (8009400 <MX_TIM12_Init+0xbc>)
 80093be:	f003 fcc6 	bl	800cd4e <HAL_TIM_PWM_Init>
 80093c2:	4603      	mov	r3, r0
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d001      	beq.n	80093cc <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 80093c8:	f7ff f8d0 	bl	800856c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80093cc:	2360      	movs	r3, #96	; 0x60
 80093ce:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80093d4:	2300      	movs	r3, #0
 80093d6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80093dc:	1d3b      	adds	r3, r7, #4
 80093de:	2200      	movs	r2, #0
 80093e0:	4619      	mov	r1, r3
 80093e2:	4807      	ldr	r0, [pc, #28]	; (8009400 <MX_TIM12_Init+0xbc>)
 80093e4:	f003 fec4 	bl	800d170 <HAL_TIM_PWM_ConfigChannel>
 80093e8:	4603      	mov	r3, r0
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d001      	beq.n	80093f2 <MX_TIM12_Init+0xae>
  {
    Error_Handler();
 80093ee:	f7ff f8bd 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80093f2:	4803      	ldr	r0, [pc, #12]	; (8009400 <MX_TIM12_Init+0xbc>)
 80093f4:	f000 f9d6 	bl	80097a4 <HAL_TIM_MspPostInit>

}
 80093f8:	bf00      	nop
 80093fa:	3730      	adds	r7, #48	; 0x30
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}
 8009400:	2000074c 	.word	0x2000074c
 8009404:	40001800 	.word	0x40001800

08009408 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8009408:	b580      	push	{r7, lr}
 800940a:	b088      	sub	sp, #32
 800940c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800940e:	1d3b      	adds	r3, r7, #4
 8009410:	2200      	movs	r2, #0
 8009412:	601a      	str	r2, [r3, #0]
 8009414:	605a      	str	r2, [r3, #4]
 8009416:	609a      	str	r2, [r3, #8]
 8009418:	60da      	str	r2, [r3, #12]
 800941a:	611a      	str	r2, [r3, #16]
 800941c:	615a      	str	r2, [r3, #20]
 800941e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8009420:	4b1d      	ldr	r3, [pc, #116]	; (8009498 <MX_TIM13_Init+0x90>)
 8009422:	4a1e      	ldr	r2, [pc, #120]	; (800949c <MX_TIM13_Init+0x94>)
 8009424:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 168-1;
 8009426:	4b1c      	ldr	r3, [pc, #112]	; (8009498 <MX_TIM13_Init+0x90>)
 8009428:	22a7      	movs	r2, #167	; 0xa7
 800942a:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800942c:	4b1a      	ldr	r3, [pc, #104]	; (8009498 <MX_TIM13_Init+0x90>)
 800942e:	2200      	movs	r2, #0
 8009430:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 100-1;
 8009432:	4b19      	ldr	r3, [pc, #100]	; (8009498 <MX_TIM13_Init+0x90>)
 8009434:	2263      	movs	r2, #99	; 0x63
 8009436:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8009438:	4b17      	ldr	r3, [pc, #92]	; (8009498 <MX_TIM13_Init+0x90>)
 800943a:	2200      	movs	r2, #0
 800943c:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800943e:	4b16      	ldr	r3, [pc, #88]	; (8009498 <MX_TIM13_Init+0x90>)
 8009440:	2200      	movs	r2, #0
 8009442:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8009444:	4814      	ldr	r0, [pc, #80]	; (8009498 <MX_TIM13_Init+0x90>)
 8009446:	f003 fb94 	bl	800cb72 <HAL_TIM_Base_Init>
 800944a:	4603      	mov	r3, r0
 800944c:	2b00      	cmp	r3, #0
 800944e:	d001      	beq.n	8009454 <MX_TIM13_Init+0x4c>
  {
    Error_Handler();
 8009450:	f7ff f88c 	bl	800856c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 8009454:	4810      	ldr	r0, [pc, #64]	; (8009498 <MX_TIM13_Init+0x90>)
 8009456:	f003 fc7a 	bl	800cd4e <HAL_TIM_PWM_Init>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <MX_TIM13_Init+0x5c>
  {
    Error_Handler();
 8009460:	f7ff f884 	bl	800856c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8009464:	2360      	movs	r3, #96	; 0x60
 8009466:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009468:	2300      	movs	r3, #0
 800946a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8009470:	2300      	movs	r3, #0
 8009472:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8009474:	1d3b      	adds	r3, r7, #4
 8009476:	2200      	movs	r2, #0
 8009478:	4619      	mov	r1, r3
 800947a:	4807      	ldr	r0, [pc, #28]	; (8009498 <MX_TIM13_Init+0x90>)
 800947c:	f003 fe78 	bl	800d170 <HAL_TIM_PWM_ConfigChannel>
 8009480:	4603      	mov	r3, r0
 8009482:	2b00      	cmp	r3, #0
 8009484:	d001      	beq.n	800948a <MX_TIM13_Init+0x82>
  {
    Error_Handler();
 8009486:	f7ff f871 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 800948a:	4803      	ldr	r0, [pc, #12]	; (8009498 <MX_TIM13_Init+0x90>)
 800948c:	f000 f98a 	bl	80097a4 <HAL_TIM_MspPostInit>

}
 8009490:	bf00      	nop
 8009492:	3720      	adds	r7, #32
 8009494:	46bd      	mov	sp, r7
 8009496:	bd80      	pop	{r7, pc}
 8009498:	20000794 	.word	0x20000794
 800949c:	40001c00 	.word	0x40001c00

080094a0 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b088      	sub	sp, #32
 80094a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80094a6:	1d3b      	adds	r3, r7, #4
 80094a8:	2200      	movs	r2, #0
 80094aa:	601a      	str	r2, [r3, #0]
 80094ac:	605a      	str	r2, [r3, #4]
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	60da      	str	r2, [r3, #12]
 80094b2:	611a      	str	r2, [r3, #16]
 80094b4:	615a      	str	r2, [r3, #20]
 80094b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80094b8:	4b1e      	ldr	r3, [pc, #120]	; (8009534 <MX_TIM14_Init+0x94>)
 80094ba:	4a1f      	ldr	r2, [pc, #124]	; (8009538 <MX_TIM14_Init+0x98>)
 80094bc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80094be:	4b1d      	ldr	r3, [pc, #116]	; (8009534 <MX_TIM14_Init+0x94>)
 80094c0:	2200      	movs	r2, #0
 80094c2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80094c4:	4b1b      	ldr	r3, [pc, #108]	; (8009534 <MX_TIM14_Init+0x94>)
 80094c6:	2200      	movs	r2, #0
 80094c8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80094ca:	4b1a      	ldr	r3, [pc, #104]	; (8009534 <MX_TIM14_Init+0x94>)
 80094cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094d0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80094d2:	4b18      	ldr	r3, [pc, #96]	; (8009534 <MX_TIM14_Init+0x94>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80094d8:	4b16      	ldr	r3, [pc, #88]	; (8009534 <MX_TIM14_Init+0x94>)
 80094da:	2200      	movs	r2, #0
 80094dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80094de:	4815      	ldr	r0, [pc, #84]	; (8009534 <MX_TIM14_Init+0x94>)
 80094e0:	f003 fb47 	bl	800cb72 <HAL_TIM_Base_Init>
 80094e4:	4603      	mov	r3, r0
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d001      	beq.n	80094ee <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80094ea:	f7ff f83f 	bl	800856c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80094ee:	4811      	ldr	r0, [pc, #68]	; (8009534 <MX_TIM14_Init+0x94>)
 80094f0:	f003 fc2d 	bl	800cd4e <HAL_TIM_PWM_Init>
 80094f4:	4603      	mov	r3, r0
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d001      	beq.n	80094fe <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80094fa:	f7ff f837 	bl	800856c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80094fe:	2360      	movs	r3, #96	; 0x60
 8009500:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8009502:	2300      	movs	r3, #0
 8009504:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8009506:	2300      	movs	r3, #0
 8009508:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800950a:	2300      	movs	r3, #0
 800950c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800950e:	1d3b      	adds	r3, r7, #4
 8009510:	2200      	movs	r2, #0
 8009512:	4619      	mov	r1, r3
 8009514:	4807      	ldr	r0, [pc, #28]	; (8009534 <MX_TIM14_Init+0x94>)
 8009516:	f003 fe2b 	bl	800d170 <HAL_TIM_PWM_ConfigChannel>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d001      	beq.n	8009524 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8009520:	f7ff f824 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8009524:	4803      	ldr	r0, [pc, #12]	; (8009534 <MX_TIM14_Init+0x94>)
 8009526:	f000 f93d 	bl	80097a4 <HAL_TIM_MspPostInit>

}
 800952a:	bf00      	nop
 800952c:	3720      	adds	r7, #32
 800952e:	46bd      	mov	sp, r7
 8009530:	bd80      	pop	{r7, pc}
 8009532:	bf00      	nop
 8009534:	200007dc 	.word	0x200007dc
 8009538:	40002000 	.word	0x40002000

0800953c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b08c      	sub	sp, #48	; 0x30
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a8c      	ldr	r2, [pc, #560]	; (800977c <HAL_TIM_Base_MspInit+0x240>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d126      	bne.n	800959c <HAL_TIM_Base_MspInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800954e:	2300      	movs	r3, #0
 8009550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009552:	4b8b      	ldr	r3, [pc, #556]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009556:	4a8a      	ldr	r2, [pc, #552]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009558:	f043 0301 	orr.w	r3, r3, #1
 800955c:	6453      	str	r3, [r2, #68]	; 0x44
 800955e:	4b88      	ldr	r3, [pc, #544]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009568:	6afb      	ldr	r3, [r7, #44]	; 0x2c

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800956a:	2200      	movs	r2, #0
 800956c:	2100      	movs	r1, #0
 800956e:	2018      	movs	r0, #24
 8009570:	f001 ffe5 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8009574:	2018      	movs	r0, #24
 8009576:	f001 fffe 	bl	800b576 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800957a:	2200      	movs	r2, #0
 800957c:	2100      	movs	r1, #0
 800957e:	2019      	movs	r0, #25
 8009580:	f001 ffdd 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8009584:	2019      	movs	r0, #25
 8009586:	f001 fff6 	bl	800b576 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800958a:	2200      	movs	r2, #0
 800958c:	2100      	movs	r1, #0
 800958e:	201a      	movs	r0, #26
 8009590:	f001 ffd5 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8009594:	201a      	movs	r0, #26
 8009596:	f001 ffee 	bl	800b576 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM14_CLK_ENABLE();
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800959a:	e0ea      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM2)
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a4:	d116      	bne.n	80095d4 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095a6:	2300      	movs	r3, #0
 80095a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80095aa:	4b75      	ldr	r3, [pc, #468]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80095ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ae:	4a74      	ldr	r2, [pc, #464]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80095b0:	f043 0301 	orr.w	r3, r3, #1
 80095b4:	6413      	str	r3, [r2, #64]	; 0x40
 80095b6:	4b72      	ldr	r3, [pc, #456]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80095b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ba:	f003 0301 	and.w	r3, r3, #1
 80095be:	62bb      	str	r3, [r7, #40]	; 0x28
 80095c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80095c2:	2200      	movs	r2, #0
 80095c4:	2100      	movs	r1, #0
 80095c6:	201c      	movs	r0, #28
 80095c8:	f001 ffb9 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80095cc:	201c      	movs	r0, #28
 80095ce:	f001 ffd2 	bl	800b576 <HAL_NVIC_EnableIRQ>
}
 80095d2:	e0ce      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM4)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a6a      	ldr	r2, [pc, #424]	; (8009784 <HAL_TIM_Base_MspInit+0x248>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d116      	bne.n	800960c <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80095de:	2300      	movs	r3, #0
 80095e0:	627b      	str	r3, [r7, #36]	; 0x24
 80095e2:	4b67      	ldr	r3, [pc, #412]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	4a66      	ldr	r2, [pc, #408]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80095e8:	f043 0304 	orr.w	r3, r3, #4
 80095ec:	6413      	str	r3, [r2, #64]	; 0x40
 80095ee:	4b64      	ldr	r3, [pc, #400]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	f003 0304 	and.w	r3, r3, #4
 80095f6:	627b      	str	r3, [r7, #36]	; 0x24
 80095f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80095fa:	2200      	movs	r2, #0
 80095fc:	2100      	movs	r1, #0
 80095fe:	201e      	movs	r0, #30
 8009600:	f001 ff9d 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8009604:	201e      	movs	r0, #30
 8009606:	f001 ffb6 	bl	800b576 <HAL_NVIC_EnableIRQ>
}
 800960a:	e0b2      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM5)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a5d      	ldr	r2, [pc, #372]	; (8009788 <HAL_TIM_Base_MspInit+0x24c>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d116      	bne.n	8009644 <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8009616:	2300      	movs	r3, #0
 8009618:	623b      	str	r3, [r7, #32]
 800961a:	4b59      	ldr	r3, [pc, #356]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 800961c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800961e:	4a58      	ldr	r2, [pc, #352]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009620:	f043 0308 	orr.w	r3, r3, #8
 8009624:	6413      	str	r3, [r2, #64]	; 0x40
 8009626:	4b56      	ldr	r3, [pc, #344]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	f003 0308 	and.w	r3, r3, #8
 800962e:	623b      	str	r3, [r7, #32]
 8009630:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8009632:	2200      	movs	r2, #0
 8009634:	2100      	movs	r1, #0
 8009636:	2032      	movs	r0, #50	; 0x32
 8009638:	f001 ff81 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800963c:	2032      	movs	r0, #50	; 0x32
 800963e:	f001 ff9a 	bl	800b576 <HAL_NVIC_EnableIRQ>
}
 8009642:	e096      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM9)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	4a50      	ldr	r2, [pc, #320]	; (800978c <HAL_TIM_Base_MspInit+0x250>)
 800964a:	4293      	cmp	r3, r2
 800964c:	d116      	bne.n	800967c <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800964e:	2300      	movs	r3, #0
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	4b4b      	ldr	r3, [pc, #300]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009656:	4a4a      	ldr	r2, [pc, #296]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800965c:	6453      	str	r3, [r2, #68]	; 0x44
 800965e:	4b48      	ldr	r3, [pc, #288]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800966a:	2200      	movs	r2, #0
 800966c:	2100      	movs	r1, #0
 800966e:	2018      	movs	r0, #24
 8009670:	f001 ff65 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8009674:	2018      	movs	r0, #24
 8009676:	f001 ff7e 	bl	800b576 <HAL_NVIC_EnableIRQ>
}
 800967a:	e07a      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM10)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a43      	ldr	r2, [pc, #268]	; (8009790 <HAL_TIM_Base_MspInit+0x254>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d116      	bne.n	80096b4 <HAL_TIM_Base_MspInit+0x178>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8009686:	2300      	movs	r3, #0
 8009688:	61bb      	str	r3, [r7, #24]
 800968a:	4b3d      	ldr	r3, [pc, #244]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 800968c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800968e:	4a3c      	ldr	r2, [pc, #240]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009690:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009694:	6453      	str	r3, [r2, #68]	; 0x44
 8009696:	4b3a      	ldr	r3, [pc, #232]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800969a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800969e:	61bb      	str	r3, [r7, #24]
 80096a0:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80096a2:	2200      	movs	r2, #0
 80096a4:	2100      	movs	r1, #0
 80096a6:	2019      	movs	r0, #25
 80096a8:	f001 ff49 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80096ac:	2019      	movs	r0, #25
 80096ae:	f001 ff62 	bl	800b576 <HAL_NVIC_EnableIRQ>
}
 80096b2:	e05e      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM11)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a36      	ldr	r2, [pc, #216]	; (8009794 <HAL_TIM_Base_MspInit+0x258>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d116      	bne.n	80096ec <HAL_TIM_Base_MspInit+0x1b0>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80096be:	2300      	movs	r3, #0
 80096c0:	617b      	str	r3, [r7, #20]
 80096c2:	4b2f      	ldr	r3, [pc, #188]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80096c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c6:	4a2e      	ldr	r2, [pc, #184]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80096c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80096cc:	6453      	str	r3, [r2, #68]	; 0x44
 80096ce:	4b2c      	ldr	r3, [pc, #176]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80096d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80096da:	2200      	movs	r2, #0
 80096dc:	2100      	movs	r1, #0
 80096de:	201a      	movs	r0, #26
 80096e0:	f001 ff2d 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80096e4:	201a      	movs	r0, #26
 80096e6:	f001 ff46 	bl	800b576 <HAL_NVIC_EnableIRQ>
}
 80096ea:	e042      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM12)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a29      	ldr	r2, [pc, #164]	; (8009798 <HAL_TIM_Base_MspInit+0x25c>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d10e      	bne.n	8009714 <HAL_TIM_Base_MspInit+0x1d8>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80096f6:	2300      	movs	r3, #0
 80096f8:	613b      	str	r3, [r7, #16]
 80096fa:	4b21      	ldr	r3, [pc, #132]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	4a20      	ldr	r2, [pc, #128]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009704:	6413      	str	r3, [r2, #64]	; 0x40
 8009706:	4b1e      	ldr	r3, [pc, #120]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800970e:	613b      	str	r3, [r7, #16]
 8009710:	693b      	ldr	r3, [r7, #16]
}
 8009712:	e02e      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM13)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a20      	ldr	r2, [pc, #128]	; (800979c <HAL_TIM_Base_MspInit+0x260>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d116      	bne.n	800974c <HAL_TIM_Base_MspInit+0x210>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800971e:	2300      	movs	r3, #0
 8009720:	60fb      	str	r3, [r7, #12]
 8009722:	4b17      	ldr	r3, [pc, #92]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009726:	4a16      	ldr	r2, [pc, #88]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009728:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800972c:	6413      	str	r3, [r2, #64]	; 0x40
 800972e:	4b14      	ldr	r3, [pc, #80]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009732:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009736:	60fb      	str	r3, [r7, #12]
 8009738:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800973a:	2200      	movs	r2, #0
 800973c:	2100      	movs	r1, #0
 800973e:	202c      	movs	r0, #44	; 0x2c
 8009740:	f001 fefd 	bl	800b53e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8009744:	202c      	movs	r0, #44	; 0x2c
 8009746:	f001 ff16 	bl	800b576 <HAL_NVIC_EnableIRQ>
}
 800974a:	e012      	b.n	8009772 <HAL_TIM_Base_MspInit+0x236>
  else if(tim_baseHandle->Instance==TIM14)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	4a13      	ldr	r2, [pc, #76]	; (80097a0 <HAL_TIM_Base_MspInit+0x264>)
 8009752:	4293      	cmp	r3, r2
 8009754:	d10d      	bne.n	8009772 <HAL_TIM_Base_MspInit+0x236>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8009756:	2300      	movs	r3, #0
 8009758:	60bb      	str	r3, [r7, #8]
 800975a:	4b09      	ldr	r3, [pc, #36]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 800975c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975e:	4a08      	ldr	r2, [pc, #32]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009764:	6413      	str	r3, [r2, #64]	; 0x40
 8009766:	4b06      	ldr	r3, [pc, #24]	; (8009780 <HAL_TIM_Base_MspInit+0x244>)
 8009768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800976a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800976e:	60bb      	str	r3, [r7, #8]
 8009770:	68bb      	ldr	r3, [r7, #8]
}
 8009772:	bf00      	nop
 8009774:	3730      	adds	r7, #48	; 0x30
 8009776:	46bd      	mov	sp, r7
 8009778:	bd80      	pop	{r7, pc}
 800977a:	bf00      	nop
 800977c:	40010000 	.word	0x40010000
 8009780:	40023800 	.word	0x40023800
 8009784:	40000800 	.word	0x40000800
 8009788:	40000c00 	.word	0x40000c00
 800978c:	40014000 	.word	0x40014000
 8009790:	40014400 	.word	0x40014400
 8009794:	40014800 	.word	0x40014800
 8009798:	40001800 	.word	0x40001800
 800979c:	40001c00 	.word	0x40001c00
 80097a0:	40002000 	.word	0x40002000

080097a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08e      	sub	sp, #56	; 0x38
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80097ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097b0:	2200      	movs	r2, #0
 80097b2:	601a      	str	r2, [r3, #0]
 80097b4:	605a      	str	r2, [r3, #4]
 80097b6:	609a      	str	r2, [r3, #8]
 80097b8:	60da      	str	r2, [r3, #12]
 80097ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a6d      	ldr	r2, [pc, #436]	; (8009978 <HAL_TIM_MspPostInit+0x1d4>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d11e      	bne.n	8009804 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80097c6:	2300      	movs	r3, #0
 80097c8:	623b      	str	r3, [r7, #32]
 80097ca:	4b6c      	ldr	r3, [pc, #432]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80097cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097ce:	4a6b      	ldr	r2, [pc, #428]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80097d0:	f043 0310 	orr.w	r3, r3, #16
 80097d4:	6313      	str	r3, [r2, #48]	; 0x30
 80097d6:	4b69      	ldr	r3, [pc, #420]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80097d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097da:	f003 0310 	and.w	r3, r3, #16
 80097de:	623b      	str	r3, [r7, #32]
 80097e0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80097e2:	2360      	movs	r3, #96	; 0x60
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097e6:	2302      	movs	r3, #2
 80097e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80097ea:	2300      	movs	r3, #0
 80097ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80097ee:	2300      	movs	r3, #0
 80097f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80097f2:	2303      	movs	r3, #3
 80097f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80097f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097fa:	4619      	mov	r1, r3
 80097fc:	4860      	ldr	r0, [pc, #384]	; (8009980 <HAL_TIM_MspPostInit+0x1dc>)
 80097fe:	f002 fa49 	bl	800bc94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8009802:	e0b5      	b.n	8009970 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM10)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a5e      	ldr	r2, [pc, #376]	; (8009984 <HAL_TIM_MspPostInit+0x1e0>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d11f      	bne.n	800984e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800980e:	2300      	movs	r3, #0
 8009810:	61fb      	str	r3, [r7, #28]
 8009812:	4b5a      	ldr	r3, [pc, #360]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 8009814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009816:	4a59      	ldr	r2, [pc, #356]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 8009818:	f043 0302 	orr.w	r3, r3, #2
 800981c:	6313      	str	r3, [r2, #48]	; 0x30
 800981e:	4b57      	ldr	r3, [pc, #348]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 8009820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009822:	f003 0302 	and.w	r3, r3, #2
 8009826:	61fb      	str	r3, [r7, #28]
 8009828:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800982a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800982e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009830:	2302      	movs	r3, #2
 8009832:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009834:	2300      	movs	r3, #0
 8009836:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009838:	2300      	movs	r3, #0
 800983a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800983c:	2303      	movs	r3, #3
 800983e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009840:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009844:	4619      	mov	r1, r3
 8009846:	4850      	ldr	r0, [pc, #320]	; (8009988 <HAL_TIM_MspPostInit+0x1e4>)
 8009848:	f002 fa24 	bl	800bc94 <HAL_GPIO_Init>
}
 800984c:	e090      	b.n	8009970 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM11)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a4e      	ldr	r2, [pc, #312]	; (800998c <HAL_TIM_MspPostInit+0x1e8>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d11f      	bne.n	8009898 <HAL_TIM_MspPostInit+0xf4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009858:	2300      	movs	r3, #0
 800985a:	61bb      	str	r3, [r7, #24]
 800985c:	4b47      	ldr	r3, [pc, #284]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 800985e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009860:	4a46      	ldr	r2, [pc, #280]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 8009862:	f043 0302 	orr.w	r3, r3, #2
 8009866:	6313      	str	r3, [r2, #48]	; 0x30
 8009868:	4b44      	ldr	r3, [pc, #272]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 800986a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800986c:	f003 0302 	and.w	r3, r3, #2
 8009870:	61bb      	str	r3, [r7, #24]
 8009872:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009878:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800987a:	2302      	movs	r3, #2
 800987c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800987e:	2300      	movs	r3, #0
 8009880:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009882:	2300      	movs	r3, #0
 8009884:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8009886:	2303      	movs	r3, #3
 8009888:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800988a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800988e:	4619      	mov	r1, r3
 8009890:	483d      	ldr	r0, [pc, #244]	; (8009988 <HAL_TIM_MspPostInit+0x1e4>)
 8009892:	f002 f9ff 	bl	800bc94 <HAL_GPIO_Init>
}
 8009896:	e06b      	b.n	8009970 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM12)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	4a3c      	ldr	r2, [pc, #240]	; (8009990 <HAL_TIM_MspPostInit+0x1ec>)
 800989e:	4293      	cmp	r3, r2
 80098a0:	d11f      	bne.n	80098e2 <HAL_TIM_MspPostInit+0x13e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098a2:	2300      	movs	r3, #0
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	4b35      	ldr	r3, [pc, #212]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80098a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098aa:	4a34      	ldr	r2, [pc, #208]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80098ac:	f043 0302 	orr.w	r3, r3, #2
 80098b0:	6313      	str	r3, [r2, #48]	; 0x30
 80098b2:	4b32      	ldr	r3, [pc, #200]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80098b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b6:	f003 0302 	and.w	r3, r3, #2
 80098ba:	617b      	str	r3, [r7, #20]
 80098bc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80098be:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80098c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80098c4:	2302      	movs	r3, #2
 80098c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80098c8:	2300      	movs	r3, #0
 80098ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80098cc:	2300      	movs	r3, #0
 80098ce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80098d0:	2309      	movs	r3, #9
 80098d2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80098d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098d8:	4619      	mov	r1, r3
 80098da:	482b      	ldr	r0, [pc, #172]	; (8009988 <HAL_TIM_MspPostInit+0x1e4>)
 80098dc:	f002 f9da 	bl	800bc94 <HAL_GPIO_Init>
}
 80098e0:	e046      	b.n	8009970 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM13)
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	4a2b      	ldr	r2, [pc, #172]	; (8009994 <HAL_TIM_MspPostInit+0x1f0>)
 80098e8:	4293      	cmp	r3, r2
 80098ea:	d11e      	bne.n	800992a <HAL_TIM_MspPostInit+0x186>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098ec:	2300      	movs	r3, #0
 80098ee:	613b      	str	r3, [r7, #16]
 80098f0:	4b22      	ldr	r3, [pc, #136]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80098f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f4:	4a21      	ldr	r2, [pc, #132]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80098f6:	f043 0301 	orr.w	r3, r3, #1
 80098fa:	6313      	str	r3, [r2, #48]	; 0x30
 80098fc:	4b1f      	ldr	r3, [pc, #124]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 80098fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009900:	f003 0301 	and.w	r3, r3, #1
 8009904:	613b      	str	r3, [r7, #16]
 8009906:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8009908:	2340      	movs	r3, #64	; 0x40
 800990a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800990c:	2302      	movs	r3, #2
 800990e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009910:	2300      	movs	r3, #0
 8009912:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009914:	2300      	movs	r3, #0
 8009916:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8009918:	2309      	movs	r3, #9
 800991a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800991c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009920:	4619      	mov	r1, r3
 8009922:	481d      	ldr	r0, [pc, #116]	; (8009998 <HAL_TIM_MspPostInit+0x1f4>)
 8009924:	f002 f9b6 	bl	800bc94 <HAL_GPIO_Init>
}
 8009928:	e022      	b.n	8009970 <HAL_TIM_MspPostInit+0x1cc>
  else if(timHandle->Instance==TIM14)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a1b      	ldr	r2, [pc, #108]	; (800999c <HAL_TIM_MspPostInit+0x1f8>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d11d      	bne.n	8009970 <HAL_TIM_MspPostInit+0x1cc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009934:	2300      	movs	r3, #0
 8009936:	60fb      	str	r3, [r7, #12]
 8009938:	4b10      	ldr	r3, [pc, #64]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 800993a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800993c:	4a0f      	ldr	r2, [pc, #60]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 800993e:	f043 0301 	orr.w	r3, r3, #1
 8009942:	6313      	str	r3, [r2, #48]	; 0x30
 8009944:	4b0d      	ldr	r3, [pc, #52]	; (800997c <HAL_TIM_MspPostInit+0x1d8>)
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	f003 0301 	and.w	r3, r3, #1
 800994c:	60fb      	str	r3, [r7, #12]
 800994e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8009950:	2380      	movs	r3, #128	; 0x80
 8009952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009954:	2302      	movs	r3, #2
 8009956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009958:	2300      	movs	r3, #0
 800995a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800995c:	2300      	movs	r3, #0
 800995e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8009960:	2309      	movs	r3, #9
 8009962:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009968:	4619      	mov	r1, r3
 800996a:	480b      	ldr	r0, [pc, #44]	; (8009998 <HAL_TIM_MspPostInit+0x1f4>)
 800996c:	f002 f992 	bl	800bc94 <HAL_GPIO_Init>
}
 8009970:	bf00      	nop
 8009972:	3738      	adds	r7, #56	; 0x38
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	40014000 	.word	0x40014000
 800997c:	40023800 	.word	0x40023800
 8009980:	40021000 	.word	0x40021000
 8009984:	40014400 	.word	0x40014400
 8009988:	40020400 	.word	0x40020400
 800998c:	40014800 	.word	0x40014800
 8009990:	40001800 	.word	0x40001800
 8009994:	40001c00 	.word	0x40001c00
 8009998:	40020000 	.word	0x40020000
 800999c:	40002000 	.word	0x40002000

080099a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80099a4:	4b11      	ldr	r3, [pc, #68]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099a6:	4a12      	ldr	r2, [pc, #72]	; (80099f0 <MX_USART1_UART_Init+0x50>)
 80099a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80099aa:	4b10      	ldr	r3, [pc, #64]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80099b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80099b2:	4b0e      	ldr	r3, [pc, #56]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80099b8:	4b0c      	ldr	r3, [pc, #48]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80099be:	4b0b      	ldr	r3, [pc, #44]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099c0:	2200      	movs	r2, #0
 80099c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80099c4:	4b09      	ldr	r3, [pc, #36]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099c6:	220c      	movs	r2, #12
 80099c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80099ca:	4b08      	ldr	r3, [pc, #32]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80099d0:	4b06      	ldr	r3, [pc, #24]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80099d6:	4805      	ldr	r0, [pc, #20]	; (80099ec <MX_USART1_UART_Init+0x4c>)
 80099d8:	f004 f928 	bl	800dc2c <HAL_UART_Init>
 80099dc:	4603      	mov	r3, r0
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d001      	beq.n	80099e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80099e2:	f7fe fdc3 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80099e6:	bf00      	nop
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20000824 	.word	0x20000824
 80099f0:	40011000 	.word	0x40011000

080099f4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80099f4:	b580      	push	{r7, lr}
 80099f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80099f8:	4b11      	ldr	r3, [pc, #68]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 80099fa:	4a12      	ldr	r2, [pc, #72]	; (8009a44 <MX_USART2_UART_Init+0x50>)
 80099fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80099fe:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 8009a00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8009a04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8009a06:	4b0e      	ldr	r3, [pc, #56]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 8009a08:	2200      	movs	r2, #0
 8009a0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 8009a0e:	2200      	movs	r2, #0
 8009a10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8009a12:	4b0b      	ldr	r3, [pc, #44]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 8009a14:	2200      	movs	r2, #0
 8009a16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8009a18:	4b09      	ldr	r3, [pc, #36]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 8009a1a:	220c      	movs	r2, #12
 8009a1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009a1e:	4b08      	ldr	r3, [pc, #32]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 8009a20:	2200      	movs	r2, #0
 8009a22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8009a24:	4b06      	ldr	r3, [pc, #24]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 8009a26:	2200      	movs	r2, #0
 8009a28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8009a2a:	4805      	ldr	r0, [pc, #20]	; (8009a40 <MX_USART2_UART_Init+0x4c>)
 8009a2c:	f004 f8fe 	bl	800dc2c <HAL_UART_Init>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d001      	beq.n	8009a3a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8009a36:	f7fe fd99 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8009a3a:	bf00      	nop
 8009a3c:	bd80      	pop	{r7, pc}
 8009a3e:	bf00      	nop
 8009a40:	2000086c 	.word	0x2000086c
 8009a44:	40004400 	.word	0x40004400

08009a48 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08c      	sub	sp, #48	; 0x30
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009a50:	f107 031c 	add.w	r3, r7, #28
 8009a54:	2200      	movs	r2, #0
 8009a56:	601a      	str	r2, [r3, #0]
 8009a58:	605a      	str	r2, [r3, #4]
 8009a5a:	609a      	str	r2, [r3, #8]
 8009a5c:	60da      	str	r2, [r3, #12]
 8009a5e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a32      	ldr	r2, [pc, #200]	; (8009b30 <HAL_UART_MspInit+0xe8>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d12d      	bne.n	8009ac6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8009a6a:	2300      	movs	r3, #0
 8009a6c:	61bb      	str	r3, [r7, #24]
 8009a6e:	4b31      	ldr	r3, [pc, #196]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a72:	4a30      	ldr	r2, [pc, #192]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009a74:	f043 0310 	orr.w	r3, r3, #16
 8009a78:	6453      	str	r3, [r2, #68]	; 0x44
 8009a7a:	4b2e      	ldr	r3, [pc, #184]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7e:	f003 0310 	and.w	r3, r3, #16
 8009a82:	61bb      	str	r3, [r7, #24]
 8009a84:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009a86:	2300      	movs	r3, #0
 8009a88:	617b      	str	r3, [r7, #20]
 8009a8a:	4b2a      	ldr	r3, [pc, #168]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8e:	4a29      	ldr	r2, [pc, #164]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009a90:	f043 0301 	orr.w	r3, r3, #1
 8009a94:	6313      	str	r3, [r2, #48]	; 0x30
 8009a96:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	617b      	str	r3, [r7, #20]
 8009aa0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8009aa2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8009aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009aac:	2300      	movs	r3, #0
 8009aae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009ab0:	2303      	movs	r3, #3
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009ab4:	2307      	movs	r3, #7
 8009ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009ab8:	f107 031c 	add.w	r3, r7, #28
 8009abc:	4619      	mov	r1, r3
 8009abe:	481e      	ldr	r0, [pc, #120]	; (8009b38 <HAL_UART_MspInit+0xf0>)
 8009ac0:	f002 f8e8 	bl	800bc94 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8009ac4:	e030      	b.n	8009b28 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART2)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a1c      	ldr	r2, [pc, #112]	; (8009b3c <HAL_UART_MspInit+0xf4>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d12b      	bne.n	8009b28 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	4b17      	ldr	r3, [pc, #92]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	4a16      	ldr	r2, [pc, #88]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ade:	6413      	str	r3, [r2, #64]	; 0x40
 8009ae0:	4b14      	ldr	r3, [pc, #80]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae8:	613b      	str	r3, [r7, #16]
 8009aea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009aec:	2300      	movs	r3, #0
 8009aee:	60fb      	str	r3, [r7, #12]
 8009af0:	4b10      	ldr	r3, [pc, #64]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af4:	4a0f      	ldr	r2, [pc, #60]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009af6:	f043 0301 	orr.w	r3, r3, #1
 8009afa:	6313      	str	r3, [r2, #48]	; 0x30
 8009afc:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <HAL_UART_MspInit+0xec>)
 8009afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	60fb      	str	r3, [r7, #12]
 8009b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009b08:	230c      	movs	r3, #12
 8009b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009b0c:	2302      	movs	r3, #2
 8009b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009b10:	2300      	movs	r3, #0
 8009b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009b14:	2303      	movs	r3, #3
 8009b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009b18:	2307      	movs	r3, #7
 8009b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009b1c:	f107 031c 	add.w	r3, r7, #28
 8009b20:	4619      	mov	r1, r3
 8009b22:	4805      	ldr	r0, [pc, #20]	; (8009b38 <HAL_UART_MspInit+0xf0>)
 8009b24:	f002 f8b6 	bl	800bc94 <HAL_GPIO_Init>
}
 8009b28:	bf00      	nop
 8009b2a:	3730      	adds	r7, #48	; 0x30
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	40011000 	.word	0x40011000
 8009b34:	40023800 	.word	0x40023800
 8009b38:	40020000 	.word	0x40020000
 8009b3c:	40004400 	.word	0x40004400

08009b40 <MX_USB_OTG_FS_HCD_Init>:
HCD_HandleTypeDef hhcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_HCD_Init(void)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009b44:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8009b46:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009b4a:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8009b4c:	4b0c      	ldr	r3, [pc, #48]	; (8009b80 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8009b4e:	2208      	movs	r2, #8
 8009b50:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8009b52:	4b0b      	ldr	r3, [pc, #44]	; (8009b80 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8009b54:	2201      	movs	r2, #1
 8009b56:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009b58:	4b09      	ldr	r3, [pc, #36]	; (8009b80 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8009b5e:	4b08      	ldr	r3, [pc, #32]	; (8009b80 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8009b60:	2202      	movs	r2, #2
 8009b62:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009b64:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8009b66:	2200      	movs	r2, #0
 8009b68:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8009b6a:	4805      	ldr	r0, [pc, #20]	; (8009b80 <MX_USB_OTG_FS_HCD_Init+0x40>)
 8009b6c:	f002 fa89 	bl	800c082 <HAL_HCD_Init>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8009b76:	f7fe fcf9 	bl	800856c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8009b7a:	bf00      	nop
 8009b7c:	bd80      	pop	{r7, pc}
 8009b7e:	bf00      	nop
 8009b80:	200008b4 	.word	0x200008b4

08009b84 <HAL_HCD_MspInit>:

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	; 0x28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009b8c:	f107 0314 	add.w	r3, r7, #20
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	605a      	str	r2, [r3, #4]
 8009b96:	609a      	str	r2, [r3, #8]
 8009b98:	60da      	str	r2, [r3, #12]
 8009b9a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ba4:	d132      	bne.n	8009c0c <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	613b      	str	r3, [r7, #16]
 8009baa:	4b1a      	ldr	r3, [pc, #104]	; (8009c14 <HAL_HCD_MspInit+0x90>)
 8009bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bae:	4a19      	ldr	r2, [pc, #100]	; (8009c14 <HAL_HCD_MspInit+0x90>)
 8009bb0:	f043 0301 	orr.w	r3, r3, #1
 8009bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8009bb6:	4b17      	ldr	r3, [pc, #92]	; (8009c14 <HAL_HCD_MspInit+0x90>)
 8009bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bba:	f003 0301 	and.w	r3, r3, #1
 8009bbe:	613b      	str	r3, [r7, #16]
 8009bc0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8009bc2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8009bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009bc8:	2302      	movs	r3, #2
 8009bca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009bcc:	2300      	movs	r3, #0
 8009bce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009bd4:	230a      	movs	r3, #10
 8009bd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009bd8:	f107 0314 	add.w	r3, r7, #20
 8009bdc:	4619      	mov	r1, r3
 8009bde:	480e      	ldr	r0, [pc, #56]	; (8009c18 <HAL_HCD_MspInit+0x94>)
 8009be0:	f002 f858 	bl	800bc94 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009be4:	4b0b      	ldr	r3, [pc, #44]	; (8009c14 <HAL_HCD_MspInit+0x90>)
 8009be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be8:	4a0a      	ldr	r2, [pc, #40]	; (8009c14 <HAL_HCD_MspInit+0x90>)
 8009bea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bee:	6353      	str	r3, [r2, #52]	; 0x34
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	4b07      	ldr	r3, [pc, #28]	; (8009c14 <HAL_HCD_MspInit+0x90>)
 8009bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009bf8:	4a06      	ldr	r2, [pc, #24]	; (8009c14 <HAL_HCD_MspInit+0x90>)
 8009bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009bfe:	6453      	str	r3, [r2, #68]	; 0x44
 8009c00:	4b04      	ldr	r3, [pc, #16]	; (8009c14 <HAL_HCD_MspInit+0x90>)
 8009c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009c04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c08:	60fb      	str	r3, [r7, #12]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009c0c:	bf00      	nop
 8009c0e:	3728      	adds	r7, #40	; 0x28
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}
 8009c14:	40023800 	.word	0x40023800
 8009c18:	40020000 	.word	0x40020000

08009c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8009c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009c54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8009c20:	f7ff f93e 	bl	8008ea0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8009c24:	480c      	ldr	r0, [pc, #48]	; (8009c58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009c26:	490d      	ldr	r1, [pc, #52]	; (8009c5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009c28:	4a0d      	ldr	r2, [pc, #52]	; (8009c60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009c2c:	e002      	b.n	8009c34 <LoopCopyDataInit>

08009c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8009c32:	3304      	adds	r3, #4

08009c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009c38:	d3f9      	bcc.n	8009c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009c3a:	4a0a      	ldr	r2, [pc, #40]	; (8009c64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009c3c:	4c0a      	ldr	r4, [pc, #40]	; (8009c68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009c40:	e001      	b.n	8009c46 <LoopFillZerobss>

08009c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8009c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009c44:	3204      	adds	r2, #4

08009c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009c48:	d3fb      	bcc.n	8009c42 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8009c4a:	f005 f8f1 	bl	800ee30 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8009c4e:	f7fe f953 	bl	8007ef8 <main>
  bx  lr    
 8009c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8009c54:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8009c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8009c5c:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8009c60:	0800fbac 	.word	0x0800fbac
  ldr r2, =_sbss
 8009c64:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8009c68:	20000de4 	.word	0x20000de4

08009c6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8009c6c:	e7fe      	b.n	8009c6c <ADC_IRQHandler>
	...

08009c70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8009c74:	4b0e      	ldr	r3, [pc, #56]	; (8009cb0 <HAL_Init+0x40>)
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	4a0d      	ldr	r2, [pc, #52]	; (8009cb0 <HAL_Init+0x40>)
 8009c7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8009c80:	4b0b      	ldr	r3, [pc, #44]	; (8009cb0 <HAL_Init+0x40>)
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	4a0a      	ldr	r2, [pc, #40]	; (8009cb0 <HAL_Init+0x40>)
 8009c86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009c8c:	4b08      	ldr	r3, [pc, #32]	; (8009cb0 <HAL_Init+0x40>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	4a07      	ldr	r2, [pc, #28]	; (8009cb0 <HAL_Init+0x40>)
 8009c92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009c98:	2003      	movs	r0, #3
 8009c9a:	f001 fc45 	bl	800b528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8009c9e:	200f      	movs	r0, #15
 8009ca0:	f000 f808 	bl	8009cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009ca4:	f7fe ff8a 	bl	8008bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	bd80      	pop	{r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	40023c00 	.word	0x40023c00

08009cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b082      	sub	sp, #8
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009cbc:	4b12      	ldr	r3, [pc, #72]	; (8009d08 <HAL_InitTick+0x54>)
 8009cbe:	681a      	ldr	r2, [r3, #0]
 8009cc0:	4b12      	ldr	r3, [pc, #72]	; (8009d0c <HAL_InitTick+0x58>)
 8009cc2:	781b      	ldrb	r3, [r3, #0]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8009cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f001 fc61 	bl	800b59a <HAL_SYSTICK_Config>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d001      	beq.n	8009ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e00e      	b.n	8009d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2b0f      	cmp	r3, #15
 8009ce6:	d80a      	bhi.n	8009cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009ce8:	2200      	movs	r2, #0
 8009cea:	6879      	ldr	r1, [r7, #4]
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295
 8009cf0:	f001 fc25 	bl	800b53e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009cf4:	4a06      	ldr	r2, [pc, #24]	; (8009d10 <HAL_InitTick+0x5c>)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	e000      	b.n	8009d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009cfe:	2301      	movs	r3, #1
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	20000304 	.word	0x20000304
 8009d0c:	2000030c 	.word	0x2000030c
 8009d10:	20000308 	.word	0x20000308

08009d14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009d14:	b480      	push	{r7}
 8009d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009d18:	4b06      	ldr	r3, [pc, #24]	; (8009d34 <HAL_IncTick+0x20>)
 8009d1a:	781b      	ldrb	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	4b06      	ldr	r3, [pc, #24]	; (8009d38 <HAL_IncTick+0x24>)
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4413      	add	r3, r2
 8009d24:	4a04      	ldr	r2, [pc, #16]	; (8009d38 <HAL_IncTick+0x24>)
 8009d26:	6013      	str	r3, [r2, #0]
}
 8009d28:	bf00      	nop
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr
 8009d32:	bf00      	nop
 8009d34:	2000030c 	.word	0x2000030c
 8009d38:	20000c94 	.word	0x20000c94

08009d3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	af00      	add	r7, sp, #0
  return uwTick;
 8009d40:	4b03      	ldr	r3, [pc, #12]	; (8009d50 <HAL_GetTick+0x14>)
 8009d42:	681b      	ldr	r3, [r3, #0]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	46bd      	mov	sp, r7
 8009d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4c:	4770      	bx	lr
 8009d4e:	bf00      	nop
 8009d50:	20000c94 	.word	0x20000c94

08009d54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009d5c:	f7ff ffee 	bl	8009d3c <HAL_GetTick>
 8009d60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d6c:	d005      	beq.n	8009d7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009d6e:	4b0a      	ldr	r3, [pc, #40]	; (8009d98 <HAL_Delay+0x44>)
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	461a      	mov	r2, r3
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4413      	add	r3, r2
 8009d78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8009d7a:	bf00      	nop
 8009d7c:	f7ff ffde 	bl	8009d3c <HAL_GetTick>
 8009d80:	4602      	mov	r2, r0
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	1ad3      	subs	r3, r2, r3
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	429a      	cmp	r2, r3
 8009d8a:	d8f7      	bhi.n	8009d7c <HAL_Delay+0x28>
  {
  }
}
 8009d8c:	bf00      	nop
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	2000030c 	.word	0x2000030c

08009d9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d101      	bne.n	8009db2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	e033      	b.n	8009e1a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d109      	bne.n	8009dce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f7fd fe08 	bl	80079d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd2:	f003 0310 	and.w	r3, r3, #16
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d118      	bne.n	8009e0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dde:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8009de2:	f023 0302 	bic.w	r3, r3, #2
 8009de6:	f043 0202 	orr.w	r2, r3, #2
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fa78 	bl	800a2e4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dfe:	f023 0303 	bic.w	r3, r3, #3
 8009e02:	f043 0201 	orr.w	r2, r3, #1
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40
 8009e0a:	e001      	b.n	8009e10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8009e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e1a:	4618      	mov	r0, r3
 8009e1c:	3710      	adds	r7, #16
 8009e1e:	46bd      	mov	sp, r7
 8009e20:	bd80      	pop	{r7, pc}
	...

08009e24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8009e24:	b580      	push	{r7, lr}
 8009e26:	b086      	sub	sp, #24
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	60f8      	str	r0, [r7, #12]
 8009e2c:	60b9      	str	r1, [r7, #8]
 8009e2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8009e30:	2300      	movs	r3, #0
 8009e32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d101      	bne.n	8009e42 <HAL_ADC_Start_DMA+0x1e>
 8009e3e:	2302      	movs	r3, #2
 8009e40:	e0e9      	b.n	800a016 <HAL_ADC_Start_DMA+0x1f2>
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2201      	movs	r2, #1
 8009e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	689b      	ldr	r3, [r3, #8]
 8009e50:	f003 0301 	and.w	r3, r3, #1
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d018      	beq.n	8009e8a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	689a      	ldr	r2, [r3, #8]
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f042 0201 	orr.w	r2, r2, #1
 8009e66:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8009e68:	4b6d      	ldr	r3, [pc, #436]	; (800a020 <HAL_ADC_Start_DMA+0x1fc>)
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a6d      	ldr	r2, [pc, #436]	; (800a024 <HAL_ADC_Start_DMA+0x200>)
 8009e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009e72:	0c9a      	lsrs	r2, r3, #18
 8009e74:	4613      	mov	r3, r2
 8009e76:	005b      	lsls	r3, r3, #1
 8009e78:	4413      	add	r3, r2
 8009e7a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8009e7c:	e002      	b.n	8009e84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	3b01      	subs	r3, #1
 8009e82:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d1f9      	bne.n	8009e7e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e98:	d107      	bne.n	8009eaa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	689a      	ldr	r2, [r3, #8]
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ea8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	689b      	ldr	r3, [r3, #8]
 8009eb0:	f003 0301 	and.w	r3, r3, #1
 8009eb4:	2b01      	cmp	r3, #1
 8009eb6:	f040 80a1 	bne.w	8009ffc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ebe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8009ec2:	f023 0301 	bic.w	r3, r3, #1
 8009ec6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d007      	beq.n	8009eec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8009ee4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ef8:	d106      	bne.n	8009f08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009efe:	f023 0206 	bic.w	r2, r3, #6
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	645a      	str	r2, [r3, #68]	; 0x44
 8009f06:	e002      	b.n	8009f0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8009f16:	4b44      	ldr	r3, [pc, #272]	; (800a028 <HAL_ADC_Start_DMA+0x204>)
 8009f18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f1e:	4a43      	ldr	r2, [pc, #268]	; (800a02c <HAL_ADC_Start_DMA+0x208>)
 8009f20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f26:	4a42      	ldr	r2, [pc, #264]	; (800a030 <HAL_ADC_Start_DMA+0x20c>)
 8009f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	4a41      	ldr	r2, [pc, #260]	; (800a034 <HAL_ADC_Start_DMA+0x210>)
 8009f30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8009f3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	681b      	ldr	r3, [r3, #0]
 8009f40:	685a      	ldr	r2, [r3, #4]
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8009f4a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	689a      	ldr	r2, [r3, #8]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f5a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	334c      	adds	r3, #76	; 0x4c
 8009f66:	4619      	mov	r1, r3
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f001 fbd0 	bl	800b710 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f003 031f 	and.w	r3, r3, #31
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d12a      	bne.n	8009fd2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	4a2d      	ldr	r2, [pc, #180]	; (800a038 <HAL_ADC_Start_DMA+0x214>)
 8009f82:	4293      	cmp	r3, r2
 8009f84:	d015      	beq.n	8009fb2 <HAL_ADC_Start_DMA+0x18e>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a2c      	ldr	r2, [pc, #176]	; (800a03c <HAL_ADC_Start_DMA+0x218>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d105      	bne.n	8009f9c <HAL_ADC_Start_DMA+0x178>
 8009f90:	4b25      	ldr	r3, [pc, #148]	; (800a028 <HAL_ADC_Start_DMA+0x204>)
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f003 031f 	and.w	r3, r3, #31
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00a      	beq.n	8009fb2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a27      	ldr	r2, [pc, #156]	; (800a040 <HAL_ADC_Start_DMA+0x21c>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d136      	bne.n	800a014 <HAL_ADC_Start_DMA+0x1f0>
 8009fa6:	4b20      	ldr	r3, [pc, #128]	; (800a028 <HAL_ADC_Start_DMA+0x204>)
 8009fa8:	685b      	ldr	r3, [r3, #4]
 8009faa:	f003 0310 	and.w	r3, r3, #16
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d130      	bne.n	800a014 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d129      	bne.n	800a014 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	689a      	ldr	r2, [r3, #8]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009fce:	609a      	str	r2, [r3, #8]
 8009fd0:	e020      	b.n	800a014 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	4a18      	ldr	r2, [pc, #96]	; (800a038 <HAL_ADC_Start_DMA+0x214>)
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	d11b      	bne.n	800a014 <HAL_ADC_Start_DMA+0x1f0>
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	689b      	ldr	r3, [r3, #8]
 8009fe2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d114      	bne.n	800a014 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8009ff8:	609a      	str	r2, [r3, #8]
 8009ffa:	e00b      	b.n	800a014 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	f043 0210 	orr.w	r2, r3, #16
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a00c:	f043 0201 	orr.w	r2, r3, #1
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800a014:	2300      	movs	r3, #0
}
 800a016:	4618      	mov	r0, r3
 800a018:	3718      	adds	r7, #24
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
 800a01e:	bf00      	nop
 800a020:	20000304 	.word	0x20000304
 800a024:	431bde83 	.word	0x431bde83
 800a028:	40012300 	.word	0x40012300
 800a02c:	0800a4dd 	.word	0x0800a4dd
 800a030:	0800a597 	.word	0x0800a597
 800a034:	0800a5b3 	.word	0x0800a5b3
 800a038:	40012000 	.word	0x40012000
 800a03c:	40012100 	.word	0x40012100
 800a040:	40012200 	.word	0x40012200

0800a044 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800a058:	b480      	push	{r7}
 800a05a:	b083      	sub	sp, #12
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800a060:	bf00      	nop
 800a062:	370c      	adds	r7, #12
 800a064:	46bd      	mov	sp, r7
 800a066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a06a:	4770      	bx	lr

0800a06c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b083      	sub	sp, #12
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr

0800a080 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800a080:	b480      	push	{r7}
 800a082:	b085      	sub	sp, #20
 800a084:	af00      	add	r7, sp, #0
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800a08a:	2300      	movs	r3, #0
 800a08c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a094:	2b01      	cmp	r3, #1
 800a096:	d101      	bne.n	800a09c <HAL_ADC_ConfigChannel+0x1c>
 800a098:	2302      	movs	r3, #2
 800a09a:	e113      	b.n	800a2c4 <HAL_ADC_ConfigChannel+0x244>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	2b09      	cmp	r3, #9
 800a0aa:	d925      	bls.n	800a0f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68d9      	ldr	r1, [r3, #12]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	b29b      	uxth	r3, r3
 800a0b8:	461a      	mov	r2, r3
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	005b      	lsls	r3, r3, #1
 800a0be:	4413      	add	r3, r2
 800a0c0:	3b1e      	subs	r3, #30
 800a0c2:	2207      	movs	r2, #7
 800a0c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a0c8:	43da      	mvns	r2, r3
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	400a      	ands	r2, r1
 800a0d0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	68d9      	ldr	r1, [r3, #12]
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	4403      	add	r3, r0
 800a0ea:	3b1e      	subs	r3, #30
 800a0ec:	409a      	lsls	r2, r3
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	430a      	orrs	r2, r1
 800a0f4:	60da      	str	r2, [r3, #12]
 800a0f6:	e022      	b.n	800a13e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6919      	ldr	r1, [r3, #16]
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	b29b      	uxth	r3, r3
 800a104:	461a      	mov	r2, r3
 800a106:	4613      	mov	r3, r2
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	4413      	add	r3, r2
 800a10c:	2207      	movs	r2, #7
 800a10e:	fa02 f303 	lsl.w	r3, r2, r3
 800a112:	43da      	mvns	r2, r3
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	400a      	ands	r2, r1
 800a11a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6919      	ldr	r1, [r3, #16]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	689a      	ldr	r2, [r3, #8]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	4618      	mov	r0, r3
 800a12e:	4603      	mov	r3, r0
 800a130:	005b      	lsls	r3, r3, #1
 800a132:	4403      	add	r3, r0
 800a134:	409a      	lsls	r2, r3
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	430a      	orrs	r2, r1
 800a13c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	2b06      	cmp	r3, #6
 800a144:	d824      	bhi.n	800a190 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	685a      	ldr	r2, [r3, #4]
 800a150:	4613      	mov	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4413      	add	r3, r2
 800a156:	3b05      	subs	r3, #5
 800a158:	221f      	movs	r2, #31
 800a15a:	fa02 f303 	lsl.w	r3, r2, r3
 800a15e:	43da      	mvns	r2, r3
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	400a      	ands	r2, r1
 800a166:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	b29b      	uxth	r3, r3
 800a174:	4618      	mov	r0, r3
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	685a      	ldr	r2, [r3, #4]
 800a17a:	4613      	mov	r3, r2
 800a17c:	009b      	lsls	r3, r3, #2
 800a17e:	4413      	add	r3, r2
 800a180:	3b05      	subs	r3, #5
 800a182:	fa00 f203 	lsl.w	r2, r0, r3
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	635a      	str	r2, [r3, #52]	; 0x34
 800a18e:	e04c      	b.n	800a22a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800a190:	683b      	ldr	r3, [r7, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	2b0c      	cmp	r3, #12
 800a196:	d824      	bhi.n	800a1e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	4613      	mov	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	4413      	add	r3, r2
 800a1a8:	3b23      	subs	r3, #35	; 0x23
 800a1aa:	221f      	movs	r2, #31
 800a1ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a1b0:	43da      	mvns	r2, r3
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	400a      	ands	r2, r1
 800a1b8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	b29b      	uxth	r3, r3
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	683b      	ldr	r3, [r7, #0]
 800a1ca:	685a      	ldr	r2, [r3, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	3b23      	subs	r3, #35	; 0x23
 800a1d4:	fa00 f203 	lsl.w	r2, r0, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	430a      	orrs	r2, r1
 800a1de:	631a      	str	r2, [r3, #48]	; 0x30
 800a1e0:	e023      	b.n	800a22a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	685a      	ldr	r2, [r3, #4]
 800a1ec:	4613      	mov	r3, r2
 800a1ee:	009b      	lsls	r3, r3, #2
 800a1f0:	4413      	add	r3, r2
 800a1f2:	3b41      	subs	r3, #65	; 0x41
 800a1f4:	221f      	movs	r2, #31
 800a1f6:	fa02 f303 	lsl.w	r3, r2, r3
 800a1fa:	43da      	mvns	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	400a      	ands	r2, r1
 800a202:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a20a:	683b      	ldr	r3, [r7, #0]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	b29b      	uxth	r3, r3
 800a210:	4618      	mov	r0, r3
 800a212:	683b      	ldr	r3, [r7, #0]
 800a214:	685a      	ldr	r2, [r3, #4]
 800a216:	4613      	mov	r3, r2
 800a218:	009b      	lsls	r3, r3, #2
 800a21a:	4413      	add	r3, r2
 800a21c:	3b41      	subs	r3, #65	; 0x41
 800a21e:	fa00 f203 	lsl.w	r2, r0, r3
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	430a      	orrs	r2, r1
 800a228:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a22a:	4b29      	ldr	r3, [pc, #164]	; (800a2d0 <HAL_ADC_ConfigChannel+0x250>)
 800a22c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	4a28      	ldr	r2, [pc, #160]	; (800a2d4 <HAL_ADC_ConfigChannel+0x254>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d10f      	bne.n	800a258 <HAL_ADC_ConfigChannel+0x1d8>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2b12      	cmp	r3, #18
 800a23e:	d10b      	bne.n	800a258 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	685b      	ldr	r3, [r3, #4]
 800a244:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a1d      	ldr	r2, [pc, #116]	; (800a2d4 <HAL_ADC_ConfigChannel+0x254>)
 800a25e:	4293      	cmp	r3, r2
 800a260:	d12b      	bne.n	800a2ba <HAL_ADC_ConfigChannel+0x23a>
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	4a1c      	ldr	r2, [pc, #112]	; (800a2d8 <HAL_ADC_ConfigChannel+0x258>)
 800a268:	4293      	cmp	r3, r2
 800a26a:	d003      	beq.n	800a274 <HAL_ADC_ConfigChannel+0x1f4>
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b11      	cmp	r3, #17
 800a272:	d122      	bne.n	800a2ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	685b      	ldr	r3, [r3, #4]
 800a278:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800a28c:	683b      	ldr	r3, [r7, #0]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a11      	ldr	r2, [pc, #68]	; (800a2d8 <HAL_ADC_ConfigChannel+0x258>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d111      	bne.n	800a2ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800a296:	4b11      	ldr	r3, [pc, #68]	; (800a2dc <HAL_ADC_ConfigChannel+0x25c>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a11      	ldr	r2, [pc, #68]	; (800a2e0 <HAL_ADC_ConfigChannel+0x260>)
 800a29c:	fba2 2303 	umull	r2, r3, r2, r3
 800a2a0:	0c9a      	lsrs	r2, r3, #18
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	009b      	lsls	r3, r3, #2
 800a2a6:	4413      	add	r3, r2
 800a2a8:	005b      	lsls	r3, r3, #1
 800a2aa:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a2ac:	e002      	b.n	800a2b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	3b01      	subs	r3, #1
 800a2b2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800a2b4:	68bb      	ldr	r3, [r7, #8]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d1f9      	bne.n	800a2ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2200      	movs	r2, #0
 800a2be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 800a2c2:	2300      	movs	r3, #0
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3714      	adds	r7, #20
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ce:	4770      	bx	lr
 800a2d0:	40012300 	.word	0x40012300
 800a2d4:	40012000 	.word	0x40012000
 800a2d8:	10000012 	.word	0x10000012
 800a2dc:	20000304 	.word	0x20000304
 800a2e0:	431bde83 	.word	0x431bde83

0800a2e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800a2ec:	4b79      	ldr	r3, [pc, #484]	; (800a4d4 <ADC_Init+0x1f0>)
 800a2ee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	685a      	ldr	r2, [r3, #4]
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	685b      	ldr	r3, [r3, #4]
 800a304:	431a      	orrs	r2, r3
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	685a      	ldr	r2, [r3, #4]
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a318:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	6859      	ldr	r1, [r3, #4]
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	691b      	ldr	r3, [r3, #16]
 800a324:	021a      	lsls	r2, r3, #8
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	430a      	orrs	r2, r1
 800a32c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	685a      	ldr	r2, [r3, #4]
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800a33c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6859      	ldr	r1, [r3, #4]
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	689a      	ldr	r2, [r3, #8]
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	430a      	orrs	r2, r1
 800a34e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	689a      	ldr	r2, [r3, #8]
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a35e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	6899      	ldr	r1, [r3, #8]
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	68da      	ldr	r2, [r3, #12]
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	430a      	orrs	r2, r1
 800a370:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a376:	4a58      	ldr	r2, [pc, #352]	; (800a4d8 <ADC_Init+0x1f4>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d022      	beq.n	800a3c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689a      	ldr	r2, [r3, #8]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a38a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6899      	ldr	r1, [r3, #8]
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	689a      	ldr	r2, [r3, #8]
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a3ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6899      	ldr	r1, [r3, #8]
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	609a      	str	r2, [r3, #8]
 800a3c0:	e00f      	b.n	800a3e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	689a      	ldr	r2, [r3, #8]
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800a3d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	689a      	ldr	r2, [r3, #8]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800a3e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	689a      	ldr	r2, [r3, #8]
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f022 0202 	bic.w	r2, r2, #2
 800a3f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6899      	ldr	r1, [r3, #8]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	7e1b      	ldrb	r3, [r3, #24]
 800a3fc:	005a      	lsls	r2, r3, #1
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	430a      	orrs	r2, r1
 800a404:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d01b      	beq.n	800a448 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	685a      	ldr	r2, [r3, #4]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a41e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800a42e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	6859      	ldr	r1, [r3, #4]
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a43a:	3b01      	subs	r3, #1
 800a43c:	035a      	lsls	r2, r3, #13
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	430a      	orrs	r2, r1
 800a444:	605a      	str	r2, [r3, #4]
 800a446:	e007      	b.n	800a458 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	685a      	ldr	r2, [r3, #4]
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a456:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800a466:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	69db      	ldr	r3, [r3, #28]
 800a472:	3b01      	subs	r3, #1
 800a474:	051a      	lsls	r2, r3, #20
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	430a      	orrs	r2, r1
 800a47c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a48c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	6899      	ldr	r1, [r3, #8]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a49a:	025a      	lsls	r2, r3, #9
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	430a      	orrs	r2, r1
 800a4a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689a      	ldr	r2, [r3, #8]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	6899      	ldr	r1, [r3, #8]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	695b      	ldr	r3, [r3, #20]
 800a4be:	029a      	lsls	r2, r3, #10
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	430a      	orrs	r2, r1
 800a4c6:	609a      	str	r2, [r3, #8]
}
 800a4c8:	bf00      	nop
 800a4ca:	3714      	adds	r7, #20
 800a4cc:	46bd      	mov	sp, r7
 800a4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d2:	4770      	bx	lr
 800a4d4:	40012300 	.word	0x40012300
 800a4d8:	0f000001 	.word	0x0f000001

0800a4dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b084      	sub	sp, #16
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4e8:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d13c      	bne.n	800a570 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	689b      	ldr	r3, [r3, #8]
 800a508:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d12b      	bne.n	800a568 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800a514:	2b00      	cmp	r3, #0
 800a516:	d127      	bne.n	800a568 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800a522:	2b00      	cmp	r3, #0
 800a524:	d006      	beq.n	800a534 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	689b      	ldr	r3, [r3, #8]
 800a52c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800a530:	2b00      	cmp	r3, #0
 800a532:	d119      	bne.n	800a568 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f022 0220 	bic.w	r2, r2, #32
 800a542:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d105      	bne.n	800a568 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a560:	f043 0201 	orr.w	r2, r3, #1
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a568:	68f8      	ldr	r0, [r7, #12]
 800a56a:	f7ff fd6b 	bl	800a044 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a56e:	e00e      	b.n	800a58e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a574:	f003 0310 	and.w	r3, r3, #16
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d003      	beq.n	800a584 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f7ff fd75 	bl	800a06c <HAL_ADC_ErrorCallback>
}
 800a582:	e004      	b.n	800a58e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	4798      	blx	r3
}
 800a58e:	bf00      	nop
 800a590:	3710      	adds	r7, #16
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}

0800a596 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b084      	sub	sp, #16
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5a2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a5a4:	68f8      	ldr	r0, [r7, #12]
 800a5a6:	f7ff fd57 	bl	800a058 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a5aa:	bf00      	nop
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5be:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2240      	movs	r2, #64	; 0x40
 800a5c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800a5c6:	68fb      	ldr	r3, [r7, #12]
 800a5c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a5ca:	f043 0204 	orr.w	r2, r3, #4
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f7ff fd4a 	bl	800a06c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a5d8:	bf00      	nop
 800a5da:	3710      	adds	r7, #16
 800a5dc:	46bd      	mov	sp, r7
 800a5de:	bd80      	pop	{r7, pc}

0800a5e0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800a5e0:	b580      	push	{r7, lr}
 800a5e2:	b084      	sub	sp, #16
 800a5e4:	af00      	add	r7, sp, #0
 800a5e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d101      	bne.n	800a5f2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	e0ed      	b.n	800a7ce <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a5f8:	b2db      	uxtb	r3, r3
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d102      	bne.n	800a604 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f7fd fa94 	bl	8007b2c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f042 0201 	orr.w	r2, r2, #1
 800a612:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a614:	f7ff fb92 	bl	8009d3c <HAL_GetTick>
 800a618:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a61a:	e012      	b.n	800a642 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a61c:	f7ff fb8e 	bl	8009d3c <HAL_GetTick>
 800a620:	4602      	mov	r2, r0
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	1ad3      	subs	r3, r2, r3
 800a626:	2b0a      	cmp	r3, #10
 800a628:	d90b      	bls.n	800a642 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2205      	movs	r2, #5
 800a63a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e0c5      	b.n	800a7ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	f003 0301 	and.w	r3, r3, #1
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d0e5      	beq.n	800a61c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	681a      	ldr	r2, [r3, #0]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	f022 0202 	bic.w	r2, r2, #2
 800a65e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a660:	f7ff fb6c 	bl	8009d3c <HAL_GetTick>
 800a664:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a666:	e012      	b.n	800a68e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a668:	f7ff fb68 	bl	8009d3c <HAL_GetTick>
 800a66c:	4602      	mov	r2, r0
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	1ad3      	subs	r3, r2, r3
 800a672:	2b0a      	cmp	r3, #10
 800a674:	d90b      	bls.n	800a68e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	2205      	movs	r2, #5
 800a686:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	e09f      	b.n	800a7ce <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	685b      	ldr	r3, [r3, #4]
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d1e5      	bne.n	800a668 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	7e1b      	ldrb	r3, [r3, #24]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d108      	bne.n	800a6b6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	681a      	ldr	r2, [r3, #0]
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a6b2:	601a      	str	r2, [r3, #0]
 800a6b4:	e007      	b.n	800a6c6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	681a      	ldr	r2, [r3, #0]
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a6c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	7e5b      	ldrb	r3, [r3, #25]
 800a6ca:	2b01      	cmp	r3, #1
 800a6cc:	d108      	bne.n	800a6e0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	681a      	ldr	r2, [r3, #0]
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a6dc:	601a      	str	r2, [r3, #0]
 800a6de:	e007      	b.n	800a6f0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	7e9b      	ldrb	r3, [r3, #26]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d108      	bne.n	800a70a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	681a      	ldr	r2, [r3, #0]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f042 0220 	orr.w	r2, r2, #32
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	e007      	b.n	800a71a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	681a      	ldr	r2, [r3, #0]
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	f022 0220 	bic.w	r2, r2, #32
 800a718:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	7edb      	ldrb	r3, [r3, #27]
 800a71e:	2b01      	cmp	r3, #1
 800a720:	d108      	bne.n	800a734 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f022 0210 	bic.w	r2, r2, #16
 800a730:	601a      	str	r2, [r3, #0]
 800a732:	e007      	b.n	800a744 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f042 0210 	orr.w	r2, r2, #16
 800a742:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	7f1b      	ldrb	r3, [r3, #28]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d108      	bne.n	800a75e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	681a      	ldr	r2, [r3, #0]
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f042 0208 	orr.w	r2, r2, #8
 800a75a:	601a      	str	r2, [r3, #0]
 800a75c:	e007      	b.n	800a76e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0208 	bic.w	r2, r2, #8
 800a76c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	7f5b      	ldrb	r3, [r3, #29]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d108      	bne.n	800a788 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	681a      	ldr	r2, [r3, #0]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f042 0204 	orr.w	r2, r2, #4
 800a784:	601a      	str	r2, [r3, #0]
 800a786:	e007      	b.n	800a798 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	681a      	ldr	r2, [r3, #0]
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f022 0204 	bic.w	r2, r2, #4
 800a796:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	689a      	ldr	r2, [r3, #8]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	431a      	orrs	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	695b      	ldr	r3, [r3, #20]
 800a7ac:	ea42 0103 	orr.w	r1, r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	1e5a      	subs	r2, r3, #1
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	430a      	orrs	r2, r1
 800a7bc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	2201      	movs	r2, #1
 800a7c8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800a7cc:	2300      	movs	r3, #0
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3710      	adds	r7, #16
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	bd80      	pop	{r7, pc}
	...

0800a7d8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800a7d8:	b480      	push	{r7}
 800a7da:	b087      	sub	sp, #28
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
 800a7e0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a7ee:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800a7f0:	7cfb      	ldrb	r3, [r7, #19]
 800a7f2:	2b01      	cmp	r3, #1
 800a7f4:	d003      	beq.n	800a7fe <HAL_CAN_ConfigFilter+0x26>
 800a7f6:	7cfb      	ldrb	r3, [r7, #19]
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	f040 80be 	bne.w	800a97a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800a7fe:	4b65      	ldr	r3, [pc, #404]	; (800a994 <HAL_CAN_ConfigFilter+0x1bc>)
 800a800:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a808:	f043 0201 	orr.w	r2, r3, #1
 800a80c:	697b      	ldr	r3, [r7, #20]
 800a80e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800a812:	697b      	ldr	r3, [r7, #20]
 800a814:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a818:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800a822:	697b      	ldr	r3, [r7, #20]
 800a824:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a82c:	021b      	lsls	r3, r3, #8
 800a82e:	431a      	orrs	r2, r3
 800a830:	697b      	ldr	r3, [r7, #20]
 800a832:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	695b      	ldr	r3, [r3, #20]
 800a83a:	f003 031f 	and.w	r3, r3, #31
 800a83e:	2201      	movs	r2, #1
 800a840:	fa02 f303 	lsl.w	r3, r2, r3
 800a844:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	43db      	mvns	r3, r3
 800a850:	401a      	ands	r2, r3
 800a852:	697b      	ldr	r3, [r7, #20]
 800a854:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d123      	bne.n	800a8a8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	43db      	mvns	r3, r3
 800a86a:	401a      	ands	r2, r3
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a87e:	683a      	ldr	r2, [r7, #0]
 800a880:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800a882:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	3248      	adds	r2, #72	; 0x48
 800a888:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a89c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a89e:	6979      	ldr	r1, [r7, #20]
 800a8a0:	3348      	adds	r3, #72	; 0x48
 800a8a2:	00db      	lsls	r3, r3, #3
 800a8a4:	440b      	add	r3, r1
 800a8a6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	69db      	ldr	r3, [r3, #28]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d122      	bne.n	800a8f6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	431a      	orrs	r2, r3
 800a8ba:	697b      	ldr	r3, [r7, #20]
 800a8bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800a8c6:	683b      	ldr	r3, [r7, #0]
 800a8c8:	685b      	ldr	r3, [r3, #4]
 800a8ca:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a8cc:	683a      	ldr	r2, [r7, #0]
 800a8ce:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800a8d0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	3248      	adds	r2, #72	; 0x48
 800a8d6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	68db      	ldr	r3, [r3, #12]
 800a8e4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800a8ea:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800a8ec:	6979      	ldr	r1, [r7, #20]
 800a8ee:	3348      	adds	r3, #72	; 0x48
 800a8f0:	00db      	lsls	r3, r3, #3
 800a8f2:	440b      	add	r3, r1
 800a8f4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	699b      	ldr	r3, [r3, #24]
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d109      	bne.n	800a912 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	43db      	mvns	r3, r3
 800a908:	401a      	ands	r2, r3
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800a910:	e007      	b.n	800a922 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	431a      	orrs	r2, r3
 800a91c:	697b      	ldr	r3, [r7, #20]
 800a91e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	691b      	ldr	r3, [r3, #16]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d109      	bne.n	800a93e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	43db      	mvns	r3, r3
 800a934:	401a      	ands	r2, r3
 800a936:	697b      	ldr	r3, [r7, #20]
 800a938:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800a93c:	e007      	b.n	800a94e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800a93e:	697b      	ldr	r3, [r7, #20]
 800a940:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	431a      	orrs	r2, r3
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	6a1b      	ldr	r3, [r3, #32]
 800a952:	2b01      	cmp	r3, #1
 800a954:	d107      	bne.n	800a966 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	431a      	orrs	r2, r3
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a96c:	f023 0201 	bic.w	r2, r3, #1
 800a970:	697b      	ldr	r3, [r7, #20]
 800a972:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800a976:	2300      	movs	r3, #0
 800a978:	e006      	b.n	800a988 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800a986:	2301      	movs	r3, #1
  }
}
 800a988:	4618      	mov	r0, r3
 800a98a:	371c      	adds	r7, #28
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr
 800a994:	40006400 	.word	0x40006400

0800a998 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a9a6:	b2db      	uxtb	r3, r3
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d12e      	bne.n	800aa0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2202      	movs	r2, #2
 800a9b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	681a      	ldr	r2, [r3, #0]
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	f022 0201 	bic.w	r2, r2, #1
 800a9c2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a9c4:	f7ff f9ba 	bl	8009d3c <HAL_GetTick>
 800a9c8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a9ca:	e012      	b.n	800a9f2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800a9cc:	f7ff f9b6 	bl	8009d3c <HAL_GetTick>
 800a9d0:	4602      	mov	r2, r0
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	1ad3      	subs	r3, r2, r3
 800a9d6:	2b0a      	cmp	r3, #10
 800a9d8:	d90b      	bls.n	800a9f2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9de:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	2205      	movs	r2, #5
 800a9ea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e012      	b.n	800aa18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d1e5      	bne.n	800a9cc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	e006      	b.n	800aa18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800aa16:	2301      	movs	r3, #1
  }
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aa2e:	b2db      	uxtb	r3, r3
 800aa30:	2b02      	cmp	r3, #2
 800aa32:	d133      	bne.n	800aa9c <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681a      	ldr	r2, [r3, #0]
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	f042 0201 	orr.w	r2, r2, #1
 800aa42:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aa44:	f7ff f97a 	bl	8009d3c <HAL_GetTick>
 800aa48:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aa4a:	e012      	b.n	800aa72 <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800aa4c:	f7ff f976 	bl	8009d3c <HAL_GetTick>
 800aa50:	4602      	mov	r2, r0
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	1ad3      	subs	r3, r2, r3
 800aa56:	2b0a      	cmp	r3, #10
 800aa58:	d90b      	bls.n	800aa72 <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2205      	movs	r2, #5
 800aa6a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e01b      	b.n	800aaaa <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	685b      	ldr	r3, [r3, #4]
 800aa78:	f003 0301 	and.w	r3, r3, #1
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d0e5      	beq.n	800aa4c <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f022 0202 	bic.w	r2, r2, #2
 800aa8e:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2201      	movs	r2, #1
 800aa94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800aa98:	2300      	movs	r3, #0
 800aa9a:	e006      	b.n	800aaaa <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aaa0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800aaa8:	2301      	movs	r3, #1
  }
}
 800aaaa:	4618      	mov	r0, r3
 800aaac:	3710      	adds	r7, #16
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800aab2:	b480      	push	{r7}
 800aab4:	b089      	sub	sp, #36	; 0x24
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	60f8      	str	r0, [r7, #12]
 800aaba:	60b9      	str	r1, [r7, #8]
 800aabc:	607a      	str	r2, [r7, #4]
 800aabe:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800aac6:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800aad0:	7ffb      	ldrb	r3, [r7, #31]
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d003      	beq.n	800aade <HAL_CAN_AddTxMessage+0x2c>
 800aad6:	7ffb      	ldrb	r3, [r7, #31]
 800aad8:	2b02      	cmp	r3, #2
 800aada:	f040 80ad 	bne.w	800ac38 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d10a      	bne.n	800aafe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800aae8:	69bb      	ldr	r3, [r7, #24]
 800aaea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d105      	bne.n	800aafe <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800aaf2:	69bb      	ldr	r3, [r7, #24]
 800aaf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f000 8095 	beq.w	800ac28 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	0e1b      	lsrs	r3, r3, #24
 800ab02:	f003 0303 	and.w	r3, r3, #3
 800ab06:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800ab08:	2201      	movs	r2, #1
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	409a      	lsls	r2, r3
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800ab12:	68bb      	ldr	r3, [r7, #8]
 800ab14:	689b      	ldr	r3, [r3, #8]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d10d      	bne.n	800ab36 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800ab24:	68f9      	ldr	r1, [r7, #12]
 800ab26:	6809      	ldr	r1, [r1, #0]
 800ab28:	431a      	orrs	r2, r3
 800ab2a:	697b      	ldr	r3, [r7, #20]
 800ab2c:	3318      	adds	r3, #24
 800ab2e:	011b      	lsls	r3, r3, #4
 800ab30:	440b      	add	r3, r1
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	e00f      	b.n	800ab56 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	685b      	ldr	r3, [r3, #4]
 800ab3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ab40:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ab46:	68f9      	ldr	r1, [r7, #12]
 800ab48:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800ab4a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	3318      	adds	r3, #24
 800ab50:	011b      	lsls	r3, r3, #4
 800ab52:	440b      	add	r3, r1
 800ab54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	6819      	ldr	r1, [r3, #0]
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	691a      	ldr	r2, [r3, #16]
 800ab5e:	697b      	ldr	r3, [r7, #20]
 800ab60:	3318      	adds	r3, #24
 800ab62:	011b      	lsls	r3, r3, #4
 800ab64:	440b      	add	r3, r1
 800ab66:	3304      	adds	r3, #4
 800ab68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	7d1b      	ldrb	r3, [r3, #20]
 800ab6e:	2b01      	cmp	r3, #1
 800ab70:	d111      	bne.n	800ab96 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	681a      	ldr	r2, [r3, #0]
 800ab76:	697b      	ldr	r3, [r7, #20]
 800ab78:	3318      	adds	r3, #24
 800ab7a:	011b      	lsls	r3, r3, #4
 800ab7c:	4413      	add	r3, r2
 800ab7e:	3304      	adds	r3, #4
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	6811      	ldr	r1, [r2, #0]
 800ab86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	3318      	adds	r3, #24
 800ab8e:	011b      	lsls	r3, r3, #4
 800ab90:	440b      	add	r3, r1
 800ab92:	3304      	adds	r3, #4
 800ab94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	3307      	adds	r3, #7
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	061a      	lsls	r2, r3, #24
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	3306      	adds	r3, #6
 800aba2:	781b      	ldrb	r3, [r3, #0]
 800aba4:	041b      	lsls	r3, r3, #16
 800aba6:	431a      	orrs	r2, r3
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3305      	adds	r3, #5
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	021b      	lsls	r3, r3, #8
 800abb0:	4313      	orrs	r3, r2
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	3204      	adds	r2, #4
 800abb6:	7812      	ldrb	r2, [r2, #0]
 800abb8:	4610      	mov	r0, r2
 800abba:	68fa      	ldr	r2, [r7, #12]
 800abbc:	6811      	ldr	r1, [r2, #0]
 800abbe:	ea43 0200 	orr.w	r2, r3, r0
 800abc2:	697b      	ldr	r3, [r7, #20]
 800abc4:	011b      	lsls	r3, r3, #4
 800abc6:	440b      	add	r3, r1
 800abc8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800abcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	3303      	adds	r3, #3
 800abd2:	781b      	ldrb	r3, [r3, #0]
 800abd4:	061a      	lsls	r2, r3, #24
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	3302      	adds	r3, #2
 800abda:	781b      	ldrb	r3, [r3, #0]
 800abdc:	041b      	lsls	r3, r3, #16
 800abde:	431a      	orrs	r2, r3
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	3301      	adds	r3, #1
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	021b      	lsls	r3, r3, #8
 800abe8:	4313      	orrs	r3, r2
 800abea:	687a      	ldr	r2, [r7, #4]
 800abec:	7812      	ldrb	r2, [r2, #0]
 800abee:	4610      	mov	r0, r2
 800abf0:	68fa      	ldr	r2, [r7, #12]
 800abf2:	6811      	ldr	r1, [r2, #0]
 800abf4:	ea43 0200 	orr.w	r2, r3, r0
 800abf8:	697b      	ldr	r3, [r7, #20]
 800abfa:	011b      	lsls	r3, r3, #4
 800abfc:	440b      	add	r3, r1
 800abfe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800ac02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681a      	ldr	r2, [r3, #0]
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	3318      	adds	r3, #24
 800ac0c:	011b      	lsls	r3, r3, #4
 800ac0e:	4413      	add	r3, r2
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	6811      	ldr	r1, [r2, #0]
 800ac16:	f043 0201 	orr.w	r2, r3, #1
 800ac1a:	697b      	ldr	r3, [r7, #20]
 800ac1c:	3318      	adds	r3, #24
 800ac1e:	011b      	lsls	r3, r3, #4
 800ac20:	440b      	add	r3, r1
 800ac22:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800ac24:	2300      	movs	r3, #0
 800ac26:	e00e      	b.n	800ac46 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800ac34:	2301      	movs	r3, #1
 800ac36:	e006      	b.n	800ac46 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800ac44:	2301      	movs	r3, #1
  }
}
 800ac46:	4618      	mov	r0, r3
 800ac48:	3724      	adds	r7, #36	; 0x24
 800ac4a:	46bd      	mov	sp, r7
 800ac4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac50:	4770      	bx	lr

0800ac52 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b085      	sub	sp, #20
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ac64:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800ac66:	7afb      	ldrb	r3, [r7, #11]
 800ac68:	2b01      	cmp	r3, #1
 800ac6a:	d002      	beq.n	800ac72 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800ac6c:	7afb      	ldrb	r3, [r7, #11]
 800ac6e:	2b02      	cmp	r3, #2
 800ac70:	d11d      	bne.n	800acae <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689b      	ldr	r3, [r3, #8]
 800ac78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d002      	beq.n	800ac86 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	3301      	adds	r3, #1
 800ac84:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d002      	beq.n	800ac9a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	3301      	adds	r3, #1
 800ac98:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	689b      	ldr	r3, [r3, #8]
 800aca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d002      	beq.n	800acae <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3301      	adds	r3, #1
 800acac:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800acae:	68fb      	ldr	r3, [r7, #12]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f893 3020 	ldrb.w	r3, [r3, #32]
 800acd0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800acd2:	7dfb      	ldrb	r3, [r7, #23]
 800acd4:	2b01      	cmp	r3, #1
 800acd6:	d003      	beq.n	800ace0 <HAL_CAN_GetRxMessage+0x24>
 800acd8:	7dfb      	ldrb	r3, [r7, #23]
 800acda:	2b02      	cmp	r3, #2
 800acdc:	f040 8103 	bne.w	800aee6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d10e      	bne.n	800ad04 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	68db      	ldr	r3, [r3, #12]
 800acec:	f003 0303 	and.w	r3, r3, #3
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d116      	bne.n	800ad22 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e0f7      	b.n	800aef4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	691b      	ldr	r3, [r3, #16]
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d107      	bne.n	800ad22 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800ad1e:	2301      	movs	r3, #1
 800ad20:	e0e8      	b.n	800aef4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	681a      	ldr	r2, [r3, #0]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	331b      	adds	r3, #27
 800ad2a:	011b      	lsls	r3, r3, #4
 800ad2c:	4413      	add	r3, r2
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	f003 0204 	and.w	r2, r3, #4
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	689b      	ldr	r3, [r3, #8]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10c      	bne.n	800ad5a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	681a      	ldr	r2, [r3, #0]
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	331b      	adds	r3, #27
 800ad48:	011b      	lsls	r3, r3, #4
 800ad4a:	4413      	add	r3, r2
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	0d5b      	lsrs	r3, r3, #21
 800ad50:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	601a      	str	r2, [r3, #0]
 800ad58:	e00b      	b.n	800ad72 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681a      	ldr	r2, [r3, #0]
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	331b      	adds	r3, #27
 800ad62:	011b      	lsls	r3, r3, #4
 800ad64:	4413      	add	r3, r2
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	08db      	lsrs	r3, r3, #3
 800ad6a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	331b      	adds	r3, #27
 800ad7a:	011b      	lsls	r3, r3, #4
 800ad7c:	4413      	add	r3, r2
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f003 0202 	and.w	r2, r3, #2
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68bb      	ldr	r3, [r7, #8]
 800ad8e:	331b      	adds	r3, #27
 800ad90:	011b      	lsls	r3, r3, #4
 800ad92:	4413      	add	r3, r2
 800ad94:	3304      	adds	r3, #4
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0308 	and.w	r3, r3, #8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d003      	beq.n	800ada8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	2208      	movs	r2, #8
 800ada4:	611a      	str	r2, [r3, #16]
 800ada6:	e00b      	b.n	800adc0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	68bb      	ldr	r3, [r7, #8]
 800adae:	331b      	adds	r3, #27
 800adb0:	011b      	lsls	r3, r3, #4
 800adb2:	4413      	add	r3, r2
 800adb4:	3304      	adds	r3, #4
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f003 020f 	and.w	r2, r3, #15
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	331b      	adds	r3, #27
 800adc8:	011b      	lsls	r3, r3, #4
 800adca:	4413      	add	r3, r2
 800adcc:	3304      	adds	r3, #4
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	0a1b      	lsrs	r3, r3, #8
 800add2:	b2da      	uxtb	r2, r3
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681a      	ldr	r2, [r3, #0]
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	331b      	adds	r3, #27
 800ade0:	011b      	lsls	r3, r3, #4
 800ade2:	4413      	add	r3, r2
 800ade4:	3304      	adds	r3, #4
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	0c1b      	lsrs	r3, r3, #16
 800adea:	b29a      	uxth	r2, r3
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	68bb      	ldr	r3, [r7, #8]
 800adf6:	011b      	lsls	r3, r3, #4
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	b2da      	uxtb	r2, r3
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681a      	ldr	r2, [r3, #0]
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	011b      	lsls	r3, r3, #4
 800ae0e:	4413      	add	r3, r2
 800ae10:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	0a1a      	lsrs	r2, r3, #8
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	3301      	adds	r3, #1
 800ae1c:	b2d2      	uxtb	r2, r2
 800ae1e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	681a      	ldr	r2, [r3, #0]
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	011b      	lsls	r3, r3, #4
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	0c1a      	lsrs	r2, r3, #16
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	3302      	adds	r3, #2
 800ae36:	b2d2      	uxtb	r2, r2
 800ae38:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	681a      	ldr	r2, [r3, #0]
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	011b      	lsls	r3, r3, #4
 800ae42:	4413      	add	r3, r2
 800ae44:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	0e1a      	lsrs	r2, r3, #24
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	3303      	adds	r3, #3
 800ae50:	b2d2      	uxtb	r2, r2
 800ae52:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	4413      	add	r3, r2
 800ae5e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ae62:	681a      	ldr	r2, [r3, #0]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	3304      	adds	r3, #4
 800ae68:	b2d2      	uxtb	r2, r2
 800ae6a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681a      	ldr	r2, [r3, #0]
 800ae70:	68bb      	ldr	r3, [r7, #8]
 800ae72:	011b      	lsls	r3, r3, #4
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	0a1a      	lsrs	r2, r3, #8
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	3305      	adds	r3, #5
 800ae82:	b2d2      	uxtb	r2, r2
 800ae84:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	011b      	lsls	r3, r3, #4
 800ae8e:	4413      	add	r3, r2
 800ae90:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	0c1a      	lsrs	r2, r3, #16
 800ae98:	683b      	ldr	r3, [r7, #0]
 800ae9a:	3306      	adds	r3, #6
 800ae9c:	b2d2      	uxtb	r2, r2
 800ae9e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681a      	ldr	r2, [r3, #0]
 800aea4:	68bb      	ldr	r3, [r7, #8]
 800aea6:	011b      	lsls	r3, r3, #4
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	0e1a      	lsrs	r2, r3, #24
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	3307      	adds	r3, #7
 800aeb6:	b2d2      	uxtb	r2, r2
 800aeb8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d108      	bne.n	800aed2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	681b      	ldr	r3, [r3, #0]
 800aec4:	68da      	ldr	r2, [r3, #12]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f042 0220 	orr.w	r2, r2, #32
 800aece:	60da      	str	r2, [r3, #12]
 800aed0:	e007      	b.n	800aee2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	691a      	ldr	r2, [r3, #16]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f042 0220 	orr.w	r2, r2, #32
 800aee0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800aee2:	2300      	movs	r3, #0
 800aee4:	e006      	b.n	800aef4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeea:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
  }
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	371c      	adds	r7, #28
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800af00:	b480      	push	{r7}
 800af02:	b085      	sub	sp, #20
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
 800af08:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800af10:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800af12:	7bfb      	ldrb	r3, [r7, #15]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d002      	beq.n	800af1e <HAL_CAN_ActivateNotification+0x1e>
 800af18:	7bfb      	ldrb	r3, [r7, #15]
 800af1a:	2b02      	cmp	r3, #2
 800af1c:	d109      	bne.n	800af32 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	6959      	ldr	r1, [r3, #20]
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	683a      	ldr	r2, [r7, #0]
 800af2a:	430a      	orrs	r2, r1
 800af2c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800af2e:	2300      	movs	r3, #0
 800af30:	e006      	b.n	800af40 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800af3e:	2301      	movs	r3, #1
  }
}
 800af40:	4618      	mov	r0, r3
 800af42:	3714      	adds	r7, #20
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800af4c:	b580      	push	{r7, lr}
 800af4e:	b08a      	sub	sp, #40	; 0x28
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800af54:	2300      	movs	r3, #0
 800af56:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	695b      	ldr	r3, [r3, #20]
 800af5e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	68db      	ldr	r3, [r3, #12]
 800af76:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	691b      	ldr	r3, [r3, #16]
 800af7e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	699b      	ldr	r3, [r3, #24]
 800af86:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800af88:	6a3b      	ldr	r3, [r7, #32]
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d07c      	beq.n	800b08c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d023      	beq.n	800afe4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	2201      	movs	r2, #1
 800afa2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800afa4:	69bb      	ldr	r3, [r7, #24]
 800afa6:	f003 0302 	and.w	r3, r3, #2
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d003      	beq.n	800afb6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800afae:	6878      	ldr	r0, [r7, #4]
 800afb0:	f7fc fc8c 	bl	80078cc <HAL_CAN_TxMailbox0CompleteCallback>
 800afb4:	e016      	b.n	800afe4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d004      	beq.n	800afca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800afc6:	627b      	str	r3, [r7, #36]	; 0x24
 800afc8:	e00c      	b.n	800afe4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800afca:	69bb      	ldr	r3, [r7, #24]
 800afcc:	f003 0308 	and.w	r3, r3, #8
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d004      	beq.n	800afde <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afd6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800afda:	627b      	str	r3, [r7, #36]	; 0x24
 800afdc:	e002      	b.n	800afe4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f96b 	bl	800b2ba <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800afe4:	69bb      	ldr	r3, [r7, #24]
 800afe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afea:	2b00      	cmp	r3, #0
 800afec:	d024      	beq.n	800b038 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800aff6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800aff8:	69bb      	ldr	r3, [r7, #24]
 800affa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800affe:	2b00      	cmp	r3, #0
 800b000:	d003      	beq.n	800b00a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f7fc fc72 	bl	80078ec <HAL_CAN_TxMailbox1CompleteCallback>
 800b008:	e016      	b.n	800b038 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800b00a:	69bb      	ldr	r3, [r7, #24]
 800b00c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b010:	2b00      	cmp	r3, #0
 800b012:	d004      	beq.n	800b01e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800b014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b016:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b01a:	627b      	str	r3, [r7, #36]	; 0x24
 800b01c:	e00c      	b.n	800b038 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b024:	2b00      	cmp	r3, #0
 800b026:	d004      	beq.n	800b032 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b02e:	627b      	str	r3, [r7, #36]	; 0x24
 800b030:	e002      	b.n	800b038 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f000 f94b 	bl	800b2ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800b038:	69bb      	ldr	r3, [r7, #24]
 800b03a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d024      	beq.n	800b08c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800b04a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800b04c:	69bb      	ldr	r3, [r7, #24]
 800b04e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b052:	2b00      	cmp	r3, #0
 800b054:	d003      	beq.n	800b05e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f7fc fc58 	bl	800790c <HAL_CAN_TxMailbox2CompleteCallback>
 800b05c:	e016      	b.n	800b08c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b064:	2b00      	cmp	r3, #0
 800b066:	d004      	beq.n	800b072 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800b068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b06e:	627b      	str	r3, [r7, #36]	; 0x24
 800b070:	e00c      	b.n	800b08c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b082:	627b      	str	r3, [r7, #36]	; 0x24
 800b084:	e002      	b.n	800b08c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800b086:	6878      	ldr	r0, [r7, #4]
 800b088:	f000 f92b 	bl	800b2e2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800b08c:	6a3b      	ldr	r3, [r7, #32]
 800b08e:	f003 0308 	and.w	r3, r3, #8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00c      	beq.n	800b0b0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800b096:	697b      	ldr	r3, [r7, #20]
 800b098:	f003 0310 	and.w	r3, r3, #16
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d007      	beq.n	800b0b0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b0a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2210      	movs	r2, #16
 800b0ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800b0b0:	6a3b      	ldr	r3, [r7, #32]
 800b0b2:	f003 0304 	and.w	r3, r3, #4
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d00b      	beq.n	800b0d2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	f003 0308 	and.w	r3, r3, #8
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d006      	beq.n	800b0d2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2208      	movs	r2, #8
 800b0ca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f000 f912 	bl	800b2f6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800b0d2:	6a3b      	ldr	r3, [r7, #32]
 800b0d4:	f003 0302 	and.w	r3, r3, #2
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d009      	beq.n	800b0f0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	f003 0303 	and.w	r3, r3, #3
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d002      	beq.n	800b0f0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f7fc fb82 	bl	80077f4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800b0f0:	6a3b      	ldr	r3, [r7, #32]
 800b0f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00c      	beq.n	800b114 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	f003 0310 	and.w	r3, r3, #16
 800b100:	2b00      	cmp	r3, #0
 800b102:	d007      	beq.n	800b114 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800b104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b10a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2210      	movs	r2, #16
 800b112:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800b114:	6a3b      	ldr	r3, [r7, #32]
 800b116:	f003 0320 	and.w	r3, r3, #32
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d00b      	beq.n	800b136 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800b11e:	693b      	ldr	r3, [r7, #16]
 800b120:	f003 0308 	and.w	r3, r3, #8
 800b124:	2b00      	cmp	r3, #0
 800b126:	d006      	beq.n	800b136 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	681b      	ldr	r3, [r3, #0]
 800b12c:	2208      	movs	r2, #8
 800b12e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800b130:	6878      	ldr	r0, [r7, #4]
 800b132:	f000 f8ea 	bl	800b30a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800b136:	6a3b      	ldr	r3, [r7, #32]
 800b138:	f003 0310 	and.w	r3, r3, #16
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d009      	beq.n	800b154 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	691b      	ldr	r3, [r3, #16]
 800b146:	f003 0303 	and.w	r3, r3, #3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d002      	beq.n	800b154 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f7fc fb5d 	bl	800780e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00b      	beq.n	800b176 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	f003 0310 	and.w	r3, r3, #16
 800b164:	2b00      	cmp	r3, #0
 800b166:	d006      	beq.n	800b176 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	2210      	movs	r2, #16
 800b16e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800b170:	6878      	ldr	r0, [r7, #4]
 800b172:	f000 f8d4 	bl	800b31e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800b176:	6a3b      	ldr	r3, [r7, #32]
 800b178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d00b      	beq.n	800b198 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	f003 0308 	and.w	r3, r3, #8
 800b186:	2b00      	cmp	r3, #0
 800b188:	d006      	beq.n	800b198 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2208      	movs	r2, #8
 800b190:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	f000 f8cd 	bl	800b332 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800b198:	6a3b      	ldr	r3, [r7, #32]
 800b19a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d07b      	beq.n	800b29a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	f003 0304 	and.w	r3, r3, #4
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d072      	beq.n	800b292 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b1ac:	6a3b      	ldr	r3, [r7, #32]
 800b1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d008      	beq.n	800b1c8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d003      	beq.n	800b1c8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	f043 0301 	orr.w	r3, r3, #1
 800b1c6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b1c8:	6a3b      	ldr	r3, [r7, #32]
 800b1ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d008      	beq.n	800b1e4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d003      	beq.n	800b1e4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	f043 0302 	orr.w	r3, r3, #2
 800b1e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d008      	beq.n	800b200 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d003      	beq.n	800b200 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	f043 0304 	orr.w	r3, r3, #4
 800b1fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b200:	6a3b      	ldr	r3, [r7, #32]
 800b202:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b206:	2b00      	cmp	r3, #0
 800b208:	d043      	beq.n	800b292 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800b210:	2b00      	cmp	r3, #0
 800b212:	d03e      	beq.n	800b292 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b21a:	2b60      	cmp	r3, #96	; 0x60
 800b21c:	d02b      	beq.n	800b276 <HAL_CAN_IRQHandler+0x32a>
 800b21e:	2b60      	cmp	r3, #96	; 0x60
 800b220:	d82e      	bhi.n	800b280 <HAL_CAN_IRQHandler+0x334>
 800b222:	2b50      	cmp	r3, #80	; 0x50
 800b224:	d022      	beq.n	800b26c <HAL_CAN_IRQHandler+0x320>
 800b226:	2b50      	cmp	r3, #80	; 0x50
 800b228:	d82a      	bhi.n	800b280 <HAL_CAN_IRQHandler+0x334>
 800b22a:	2b40      	cmp	r3, #64	; 0x40
 800b22c:	d019      	beq.n	800b262 <HAL_CAN_IRQHandler+0x316>
 800b22e:	2b40      	cmp	r3, #64	; 0x40
 800b230:	d826      	bhi.n	800b280 <HAL_CAN_IRQHandler+0x334>
 800b232:	2b30      	cmp	r3, #48	; 0x30
 800b234:	d010      	beq.n	800b258 <HAL_CAN_IRQHandler+0x30c>
 800b236:	2b30      	cmp	r3, #48	; 0x30
 800b238:	d822      	bhi.n	800b280 <HAL_CAN_IRQHandler+0x334>
 800b23a:	2b10      	cmp	r3, #16
 800b23c:	d002      	beq.n	800b244 <HAL_CAN_IRQHandler+0x2f8>
 800b23e:	2b20      	cmp	r3, #32
 800b240:	d005      	beq.n	800b24e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800b242:	e01d      	b.n	800b280 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800b244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b246:	f043 0308 	orr.w	r3, r3, #8
 800b24a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b24c:	e019      	b.n	800b282 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800b24e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b250:	f043 0310 	orr.w	r3, r3, #16
 800b254:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b256:	e014      	b.n	800b282 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	f043 0320 	orr.w	r3, r3, #32
 800b25e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b260:	e00f      	b.n	800b282 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800b262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b26a:	e00a      	b.n	800b282 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b272:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b274:	e005      	b.n	800b282 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800b276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b278:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b27c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800b27e:	e000      	b.n	800b282 <HAL_CAN_IRQHandler+0x336>
            break;
 800b280:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	699a      	ldr	r2, [r3, #24]
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800b290:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	2204      	movs	r2, #4
 800b298:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d008      	beq.n	800b2b2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	431a      	orrs	r2, r3
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800b2ac:	6878      	ldr	r0, [r7, #4]
 800b2ae:	f000 f84a 	bl	800b346 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800b2b2:	bf00      	nop
 800b2b4:	3728      	adds	r7, #40	; 0x28
 800b2b6:	46bd      	mov	sp, r7
 800b2b8:	bd80      	pop	{r7, pc}

0800b2ba <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b083      	sub	sp, #12
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b083      	sub	sp, #12
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800b2ea:	bf00      	nop
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b083      	sub	sp, #12
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800b312:	bf00      	nop
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800b31e:	b480      	push	{r7}
 800b320:	b083      	sub	sp, #12
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800b326:	bf00      	nop
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800b346:	b480      	push	{r7}
 800b348:	b083      	sub	sp, #12
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800b34e:	bf00      	nop
 800b350:	370c      	adds	r7, #12
 800b352:	46bd      	mov	sp, r7
 800b354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b358:	4770      	bx	lr
	...

0800b35c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b35c:	b480      	push	{r7}
 800b35e:	b085      	sub	sp, #20
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800b36c:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <__NVIC_SetPriorityGrouping+0x44>)
 800b36e:	68db      	ldr	r3, [r3, #12]
 800b370:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800b372:	68ba      	ldr	r2, [r7, #8]
 800b374:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800b378:	4013      	ands	r3, r2
 800b37a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800b384:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800b388:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b38c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800b38e:	4a04      	ldr	r2, [pc, #16]	; (800b3a0 <__NVIC_SetPriorityGrouping+0x44>)
 800b390:	68bb      	ldr	r3, [r7, #8]
 800b392:	60d3      	str	r3, [r2, #12]
}
 800b394:	bf00      	nop
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	e000ed00 	.word	0xe000ed00

0800b3a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800b3a8:	4b04      	ldr	r3, [pc, #16]	; (800b3bc <__NVIC_GetPriorityGrouping+0x18>)
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	0a1b      	lsrs	r3, r3, #8
 800b3ae:	f003 0307 	and.w	r3, r3, #7
}
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ba:	4770      	bx	lr
 800b3bc:	e000ed00 	.word	0xe000ed00

0800b3c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b083      	sub	sp, #12
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b3ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	db0b      	blt.n	800b3ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800b3d2:	79fb      	ldrb	r3, [r7, #7]
 800b3d4:	f003 021f 	and.w	r2, r3, #31
 800b3d8:	4907      	ldr	r1, [pc, #28]	; (800b3f8 <__NVIC_EnableIRQ+0x38>)
 800b3da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b3de:	095b      	lsrs	r3, r3, #5
 800b3e0:	2001      	movs	r0, #1
 800b3e2:	fa00 f202 	lsl.w	r2, r0, r2
 800b3e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800b3ea:	bf00      	nop
 800b3ec:	370c      	adds	r7, #12
 800b3ee:	46bd      	mov	sp, r7
 800b3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f4:	4770      	bx	lr
 800b3f6:	bf00      	nop
 800b3f8:	e000e100 	.word	0xe000e100

0800b3fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800b3fc:	b480      	push	{r7}
 800b3fe:	b083      	sub	sp, #12
 800b400:	af00      	add	r7, sp, #0
 800b402:	4603      	mov	r3, r0
 800b404:	6039      	str	r1, [r7, #0]
 800b406:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800b408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	db0a      	blt.n	800b426 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	b2da      	uxtb	r2, r3
 800b414:	490c      	ldr	r1, [pc, #48]	; (800b448 <__NVIC_SetPriority+0x4c>)
 800b416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b41a:	0112      	lsls	r2, r2, #4
 800b41c:	b2d2      	uxtb	r2, r2
 800b41e:	440b      	add	r3, r1
 800b420:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800b424:	e00a      	b.n	800b43c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	b2da      	uxtb	r2, r3
 800b42a:	4908      	ldr	r1, [pc, #32]	; (800b44c <__NVIC_SetPriority+0x50>)
 800b42c:	79fb      	ldrb	r3, [r7, #7]
 800b42e:	f003 030f 	and.w	r3, r3, #15
 800b432:	3b04      	subs	r3, #4
 800b434:	0112      	lsls	r2, r2, #4
 800b436:	b2d2      	uxtb	r2, r2
 800b438:	440b      	add	r3, r1
 800b43a:	761a      	strb	r2, [r3, #24]
}
 800b43c:	bf00      	nop
 800b43e:	370c      	adds	r7, #12
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr
 800b448:	e000e100 	.word	0xe000e100
 800b44c:	e000ed00 	.word	0xe000ed00

0800b450 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b450:	b480      	push	{r7}
 800b452:	b089      	sub	sp, #36	; 0x24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f003 0307 	and.w	r3, r3, #7
 800b462:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800b464:	69fb      	ldr	r3, [r7, #28]
 800b466:	f1c3 0307 	rsb	r3, r3, #7
 800b46a:	2b04      	cmp	r3, #4
 800b46c:	bf28      	it	cs
 800b46e:	2304      	movcs	r3, #4
 800b470:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	3304      	adds	r3, #4
 800b476:	2b06      	cmp	r3, #6
 800b478:	d902      	bls.n	800b480 <NVIC_EncodePriority+0x30>
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	3b03      	subs	r3, #3
 800b47e:	e000      	b.n	800b482 <NVIC_EncodePriority+0x32>
 800b480:	2300      	movs	r3, #0
 800b482:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b484:	f04f 32ff 	mov.w	r2, #4294967295
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	fa02 f303 	lsl.w	r3, r2, r3
 800b48e:	43da      	mvns	r2, r3
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	401a      	ands	r2, r3
 800b494:	697b      	ldr	r3, [r7, #20]
 800b496:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800b498:	f04f 31ff 	mov.w	r1, #4294967295
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	fa01 f303 	lsl.w	r3, r1, r3
 800b4a2:	43d9      	mvns	r1, r3
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800b4a8:	4313      	orrs	r3, r2
         );
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3724      	adds	r7, #36	; 0x24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
	...

0800b4b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 800b4bc:	f3bf 8f4f 	dsb	sy
}
 800b4c0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800b4c2:	4b06      	ldr	r3, [pc, #24]	; (800b4dc <__NVIC_SystemReset+0x24>)
 800b4c4:	68db      	ldr	r3, [r3, #12]
 800b4c6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800b4ca:	4904      	ldr	r1, [pc, #16]	; (800b4dc <__NVIC_SystemReset+0x24>)
 800b4cc:	4b04      	ldr	r3, [pc, #16]	; (800b4e0 <__NVIC_SystemReset+0x28>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800b4d2:	f3bf 8f4f 	dsb	sy
}
 800b4d6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800b4d8:	bf00      	nop
 800b4da:	e7fd      	b.n	800b4d8 <__NVIC_SystemReset+0x20>
 800b4dc:	e000ed00 	.word	0xe000ed00
 800b4e0:	05fa0004 	.word	0x05fa0004

0800b4e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b082      	sub	sp, #8
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	3b01      	subs	r3, #1
 800b4f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b4f4:	d301      	bcc.n	800b4fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	e00f      	b.n	800b51a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b4fa:	4a0a      	ldr	r2, [pc, #40]	; (800b524 <SysTick_Config+0x40>)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	3b01      	subs	r3, #1
 800b500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b502:	210f      	movs	r1, #15
 800b504:	f04f 30ff 	mov.w	r0, #4294967295
 800b508:	f7ff ff78 	bl	800b3fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b50c:	4b05      	ldr	r3, [pc, #20]	; (800b524 <SysTick_Config+0x40>)
 800b50e:	2200      	movs	r2, #0
 800b510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b512:	4b04      	ldr	r3, [pc, #16]	; (800b524 <SysTick_Config+0x40>)
 800b514:	2207      	movs	r2, #7
 800b516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800b518:	2300      	movs	r3, #0
}
 800b51a:	4618      	mov	r0, r3
 800b51c:	3708      	adds	r7, #8
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	e000e010 	.word	0xe000e010

0800b528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	f7ff ff13 	bl	800b35c <__NVIC_SetPriorityGrouping>
}
 800b536:	bf00      	nop
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800b53e:	b580      	push	{r7, lr}
 800b540:	b086      	sub	sp, #24
 800b542:	af00      	add	r7, sp, #0
 800b544:	4603      	mov	r3, r0
 800b546:	60b9      	str	r1, [r7, #8]
 800b548:	607a      	str	r2, [r7, #4]
 800b54a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800b550:	f7ff ff28 	bl	800b3a4 <__NVIC_GetPriorityGrouping>
 800b554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	68b9      	ldr	r1, [r7, #8]
 800b55a:	6978      	ldr	r0, [r7, #20]
 800b55c:	f7ff ff78 	bl	800b450 <NVIC_EncodePriority>
 800b560:	4602      	mov	r2, r0
 800b562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b566:	4611      	mov	r1, r2
 800b568:	4618      	mov	r0, r3
 800b56a:	f7ff ff47 	bl	800b3fc <__NVIC_SetPriority>
}
 800b56e:	bf00      	nop
 800b570:	3718      	adds	r7, #24
 800b572:	46bd      	mov	sp, r7
 800b574:	bd80      	pop	{r7, pc}

0800b576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b576:	b580      	push	{r7, lr}
 800b578:	b082      	sub	sp, #8
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	4603      	mov	r3, r0
 800b57e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff ff1b 	bl	800b3c0 <__NVIC_EnableIRQ>
}
 800b58a:	bf00      	nop
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}

0800b592 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800b592:	b580      	push	{r7, lr}
 800b594:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800b596:	f7ff ff8f 	bl	800b4b8 <__NVIC_SystemReset>

0800b59a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b082      	sub	sp, #8
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b5a2:	6878      	ldr	r0, [r7, #4]
 800b5a4:	f7ff ff9e 	bl	800b4e4 <SysTick_Config>
 800b5a8:	4603      	mov	r3, r0
}
 800b5aa:	4618      	mov	r0, r3
 800b5ac:	3708      	adds	r7, #8
 800b5ae:	46bd      	mov	sp, r7
 800b5b0:	bd80      	pop	{r7, pc}
	...

0800b5b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b086      	sub	sp, #24
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800b5c0:	f7fe fbbc 	bl	8009d3c <HAL_GetTick>
 800b5c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e099      	b.n	800b704 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2202      	movs	r2, #2
 800b5d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f022 0201 	bic.w	r2, r2, #1
 800b5ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b5f0:	e00f      	b.n	800b612 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800b5f2:	f7fe fba3 	bl	8009d3c <HAL_GetTick>
 800b5f6:	4602      	mov	r2, r0
 800b5f8:	693b      	ldr	r3, [r7, #16]
 800b5fa:	1ad3      	subs	r3, r2, r3
 800b5fc:	2b05      	cmp	r3, #5
 800b5fe:	d908      	bls.n	800b612 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2220      	movs	r2, #32
 800b604:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2203      	movs	r2, #3
 800b60a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800b60e:	2303      	movs	r3, #3
 800b610:	e078      	b.n	800b704 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 0301 	and.w	r3, r3, #1
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1e8      	bne.n	800b5f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800b628:	697a      	ldr	r2, [r7, #20]
 800b62a:	4b38      	ldr	r3, [pc, #224]	; (800b70c <HAL_DMA_Init+0x158>)
 800b62c:	4013      	ands	r3, r2
 800b62e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685a      	ldr	r2, [r3, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b63e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	691b      	ldr	r3, [r3, #16]
 800b644:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b64a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	699b      	ldr	r3, [r3, #24]
 800b650:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b656:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800b65e:	697a      	ldr	r2, [r7, #20]
 800b660:	4313      	orrs	r3, r2
 800b662:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b668:	2b04      	cmp	r3, #4
 800b66a:	d107      	bne.n	800b67c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b674:	4313      	orrs	r3, r2
 800b676:	697a      	ldr	r2, [r7, #20]
 800b678:	4313      	orrs	r3, r2
 800b67a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	697a      	ldr	r2, [r7, #20]
 800b682:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	695b      	ldr	r3, [r3, #20]
 800b68a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f023 0307 	bic.w	r3, r3, #7
 800b692:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b698:	697a      	ldr	r2, [r7, #20]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a2:	2b04      	cmp	r3, #4
 800b6a4:	d117      	bne.n	800b6d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6aa:	697a      	ldr	r2, [r7, #20]
 800b6ac:	4313      	orrs	r3, r2
 800b6ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00e      	beq.n	800b6d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800b6b8:	6878      	ldr	r0, [r7, #4]
 800b6ba:	f000 fa6f 	bl	800bb9c <DMA_CheckFifoParam>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d008      	beq.n	800b6d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2240      	movs	r2, #64	; 0x40
 800b6c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	2201      	movs	r2, #1
 800b6ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800b6d2:	2301      	movs	r3, #1
 800b6d4:	e016      	b.n	800b704 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	697a      	ldr	r2, [r7, #20]
 800b6dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800b6de:	6878      	ldr	r0, [r7, #4]
 800b6e0:	f000 fa26 	bl	800bb30 <DMA_CalcBaseAndBitshift>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b6ec:	223f      	movs	r2, #63	; 0x3f
 800b6ee:	409a      	lsls	r2, r3
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2201      	movs	r2, #1
 800b6fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800b702:	2300      	movs	r3, #0
}
 800b704:	4618      	mov	r0, r3
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	f010803f 	.word	0xf010803f

0800b710 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b710:	b580      	push	{r7, lr}
 800b712:	b086      	sub	sp, #24
 800b714:	af00      	add	r7, sp, #0
 800b716:	60f8      	str	r0, [r7, #12]
 800b718:	60b9      	str	r1, [r7, #8]
 800b71a:	607a      	str	r2, [r7, #4]
 800b71c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b71e:	2300      	movs	r3, #0
 800b720:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b726:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d101      	bne.n	800b736 <HAL_DMA_Start_IT+0x26>
 800b732:	2302      	movs	r3, #2
 800b734:	e040      	b.n	800b7b8 <HAL_DMA_Start_IT+0xa8>
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2201      	movs	r2, #1
 800b73a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b744:	b2db      	uxtb	r3, r3
 800b746:	2b01      	cmp	r3, #1
 800b748:	d12f      	bne.n	800b7aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800b74a:	68fb      	ldr	r3, [r7, #12]
 800b74c:	2202      	movs	r2, #2
 800b74e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	2200      	movs	r2, #0
 800b756:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800b758:	683b      	ldr	r3, [r7, #0]
 800b75a:	687a      	ldr	r2, [r7, #4]
 800b75c:	68b9      	ldr	r1, [r7, #8]
 800b75e:	68f8      	ldr	r0, [r7, #12]
 800b760:	f000 f9b8 	bl	800bad4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b768:	223f      	movs	r2, #63	; 0x3f
 800b76a:	409a      	lsls	r2, r3
 800b76c:	693b      	ldr	r3, [r7, #16]
 800b76e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	681a      	ldr	r2, [r3, #0]
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	f042 0216 	orr.w	r2, r2, #22
 800b77e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b784:	2b00      	cmp	r3, #0
 800b786:	d007      	beq.n	800b798 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	681a      	ldr	r2, [r3, #0]
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f042 0208 	orr.w	r2, r2, #8
 800b796:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	681a      	ldr	r2, [r3, #0]
 800b79e:	68fb      	ldr	r3, [r7, #12]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	f042 0201 	orr.w	r2, r2, #1
 800b7a6:	601a      	str	r2, [r3, #0]
 800b7a8:	e005      	b.n	800b7b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800b7b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3718      	adds	r7, #24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	bd80      	pop	{r7, pc}

0800b7c0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b086      	sub	sp, #24
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b7cc:	4b8e      	ldr	r3, [pc, #568]	; (800ba08 <HAL_DMA_IRQHandler+0x248>)
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	4a8e      	ldr	r2, [pc, #568]	; (800ba0c <HAL_DMA_IRQHandler+0x24c>)
 800b7d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b7d6:	0a9b      	lsrs	r3, r3, #10
 800b7d8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7de:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800b7e0:	693b      	ldr	r3, [r7, #16]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b7ea:	2208      	movs	r2, #8
 800b7ec:	409a      	lsls	r2, r3
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d01a      	beq.n	800b82c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f003 0304 	and.w	r3, r3, #4
 800b800:	2b00      	cmp	r3, #0
 800b802:	d013      	beq.n	800b82c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	681a      	ldr	r2, [r3, #0]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f022 0204 	bic.w	r2, r2, #4
 800b812:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b818:	2208      	movs	r2, #8
 800b81a:	409a      	lsls	r2, r3
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b824:	f043 0201 	orr.w	r2, r3, #1
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b830:	2201      	movs	r2, #1
 800b832:	409a      	lsls	r2, r3
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	4013      	ands	r3, r2
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d012      	beq.n	800b862 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	695b      	ldr	r3, [r3, #20]
 800b842:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b846:	2b00      	cmp	r3, #0
 800b848:	d00b      	beq.n	800b862 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b84e:	2201      	movs	r2, #1
 800b850:	409a      	lsls	r2, r3
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b85a:	f043 0202 	orr.w	r2, r3, #2
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b866:	2204      	movs	r2, #4
 800b868:	409a      	lsls	r2, r3
 800b86a:	68fb      	ldr	r3, [r7, #12]
 800b86c:	4013      	ands	r3, r2
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d012      	beq.n	800b898 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 0302 	and.w	r3, r3, #2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00b      	beq.n	800b898 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b884:	2204      	movs	r2, #4
 800b886:	409a      	lsls	r2, r3
 800b888:	693b      	ldr	r3, [r7, #16]
 800b88a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b890:	f043 0204 	orr.w	r2, r3, #4
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b89c:	2210      	movs	r2, #16
 800b89e:	409a      	lsls	r2, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4013      	ands	r3, r2
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d043      	beq.n	800b930 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f003 0308 	and.w	r3, r3, #8
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d03c      	beq.n	800b930 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b8ba:	2210      	movs	r2, #16
 800b8bc:	409a      	lsls	r2, r3
 800b8be:	693b      	ldr	r3, [r7, #16]
 800b8c0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d018      	beq.n	800b902 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d108      	bne.n	800b8f0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8e2:	2b00      	cmp	r3, #0
 800b8e4:	d024      	beq.n	800b930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b8ea:	6878      	ldr	r0, [r7, #4]
 800b8ec:	4798      	blx	r3
 800b8ee:	e01f      	b.n	800b930 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d01b      	beq.n	800b930 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	4798      	blx	r3
 800b900:	e016      	b.n	800b930 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d107      	bne.n	800b920 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	681a      	ldr	r2, [r3, #0]
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f022 0208 	bic.w	r2, r2, #8
 800b91e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d003      	beq.n	800b930 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b934:	2220      	movs	r2, #32
 800b936:	409a      	lsls	r2, r3
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4013      	ands	r3, r2
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	f000 808f 	beq.w	800ba60 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	f003 0310 	and.w	r3, r3, #16
 800b94c:	2b00      	cmp	r3, #0
 800b94e:	f000 8087 	beq.w	800ba60 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b956:	2220      	movs	r2, #32
 800b958:	409a      	lsls	r2, r3
 800b95a:	693b      	ldr	r3, [r7, #16]
 800b95c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b964:	b2db      	uxtb	r3, r3
 800b966:	2b05      	cmp	r3, #5
 800b968:	d136      	bne.n	800b9d8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	681a      	ldr	r2, [r3, #0]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f022 0216 	bic.w	r2, r2, #22
 800b978:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	695a      	ldr	r2, [r3, #20]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b988:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d103      	bne.n	800b99a <HAL_DMA_IRQHandler+0x1da>
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b996:	2b00      	cmp	r3, #0
 800b998:	d007      	beq.n	800b9aa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681a      	ldr	r2, [r3, #0]
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	f022 0208 	bic.w	r2, r2, #8
 800b9a8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b9ae:	223f      	movs	r2, #63	; 0x3f
 800b9b0:	409a      	lsls	r2, r3
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d07e      	beq.n	800bacc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	4798      	blx	r3
        }
        return;
 800b9d6:	e079      	b.n	800bacc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	681b      	ldr	r3, [r3, #0]
 800b9de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d01d      	beq.n	800ba22 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10d      	bne.n	800ba10 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d031      	beq.n	800ba60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	4798      	blx	r3
 800ba04:	e02c      	b.n	800ba60 <HAL_DMA_IRQHandler+0x2a0>
 800ba06:	bf00      	nop
 800ba08:	20000304 	.word	0x20000304
 800ba0c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d023      	beq.n	800ba60 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba1c:	6878      	ldr	r0, [r7, #4]
 800ba1e:	4798      	blx	r3
 800ba20:	e01e      	b.n	800ba60 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d10f      	bne.n	800ba50 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	681a      	ldr	r2, [r3, #0]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	f022 0210 	bic.w	r2, r2, #16
 800ba3e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2201      	movs	r2, #1
 800ba44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	2200      	movs	r2, #0
 800ba4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d003      	beq.n	800ba60 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d032      	beq.n	800bace <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba6c:	f003 0301 	and.w	r3, r3, #1
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d022      	beq.n	800baba <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2205      	movs	r2, #5
 800ba78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	681a      	ldr	r2, [r3, #0]
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f022 0201 	bic.w	r2, r2, #1
 800ba8a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800ba8c:	68bb      	ldr	r3, [r7, #8]
 800ba8e:	3301      	adds	r3, #1
 800ba90:	60bb      	str	r3, [r7, #8]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	429a      	cmp	r2, r3
 800ba96:	d307      	bcc.n	800baa8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f003 0301 	and.w	r3, r3, #1
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d1f2      	bne.n	800ba8c <HAL_DMA_IRQHandler+0x2cc>
 800baa6:	e000      	b.n	800baaa <HAL_DMA_IRQHandler+0x2ea>
          break;
 800baa8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d005      	beq.n	800bace <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bac6:	6878      	ldr	r0, [r7, #4]
 800bac8:	4798      	blx	r3
 800baca:	e000      	b.n	800bace <HAL_DMA_IRQHandler+0x30e>
        return;
 800bacc:	bf00      	nop
    }
  }
}
 800bace:	3718      	adds	r7, #24
 800bad0:	46bd      	mov	sp, r7
 800bad2:	bd80      	pop	{r7, pc}

0800bad4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
 800bae0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	681a      	ldr	r2, [r3, #0]
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800baf0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	683a      	ldr	r2, [r7, #0]
 800baf8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	689b      	ldr	r3, [r3, #8]
 800bafe:	2b40      	cmp	r3, #64	; 0x40
 800bb00:	d108      	bne.n	800bb14 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	687a      	ldr	r2, [r7, #4]
 800bb08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800bb0a:	68fb      	ldr	r3, [r7, #12]
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	68ba      	ldr	r2, [r7, #8]
 800bb10:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800bb12:	e007      	b.n	800bb24 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	68ba      	ldr	r2, [r7, #8]
 800bb1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	687a      	ldr	r2, [r7, #4]
 800bb22:	60da      	str	r2, [r3, #12]
}
 800bb24:	bf00      	nop
 800bb26:	3714      	adds	r7, #20
 800bb28:	46bd      	mov	sp, r7
 800bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2e:	4770      	bx	lr

0800bb30 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	b2db      	uxtb	r3, r3
 800bb3e:	3b10      	subs	r3, #16
 800bb40:	4a14      	ldr	r2, [pc, #80]	; (800bb94 <DMA_CalcBaseAndBitshift+0x64>)
 800bb42:	fba2 2303 	umull	r2, r3, r2, r3
 800bb46:	091b      	lsrs	r3, r3, #4
 800bb48:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800bb4a:	4a13      	ldr	r2, [pc, #76]	; (800bb98 <DMA_CalcBaseAndBitshift+0x68>)
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	4413      	add	r3, r2
 800bb50:	781b      	ldrb	r3, [r3, #0]
 800bb52:	461a      	mov	r2, r3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	2b03      	cmp	r3, #3
 800bb5c:	d909      	bls.n	800bb72 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb66:	f023 0303 	bic.w	r3, r3, #3
 800bb6a:	1d1a      	adds	r2, r3, #4
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	659a      	str	r2, [r3, #88]	; 0x58
 800bb70:	e007      	b.n	800bb82 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800bb7a:	f023 0303 	bic.w	r3, r3, #3
 800bb7e:	687a      	ldr	r2, [r7, #4]
 800bb80:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3714      	adds	r7, #20
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb90:	4770      	bx	lr
 800bb92:	bf00      	nop
 800bb94:	aaaaaaab 	.word	0xaaaaaaab
 800bb98:	0800fb60 	.word	0x0800fb60

0800bb9c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b085      	sub	sp, #20
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bba4:	2300      	movs	r3, #0
 800bba6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bbac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	699b      	ldr	r3, [r3, #24]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d11f      	bne.n	800bbf6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b03      	cmp	r3, #3
 800bbba:	d856      	bhi.n	800bc6a <DMA_CheckFifoParam+0xce>
 800bbbc:	a201      	add	r2, pc, #4	; (adr r2, 800bbc4 <DMA_CheckFifoParam+0x28>)
 800bbbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbc2:	bf00      	nop
 800bbc4:	0800bbd5 	.word	0x0800bbd5
 800bbc8:	0800bbe7 	.word	0x0800bbe7
 800bbcc:	0800bbd5 	.word	0x0800bbd5
 800bbd0:	0800bc6b 	.word	0x0800bc6b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d046      	beq.n	800bc6e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bbe4:	e043      	b.n	800bc6e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bbee:	d140      	bne.n	800bc72 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bbf4:	e03d      	b.n	800bc72 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbfe:	d121      	bne.n	800bc44 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	2b03      	cmp	r3, #3
 800bc04:	d837      	bhi.n	800bc76 <DMA_CheckFifoParam+0xda>
 800bc06:	a201      	add	r2, pc, #4	; (adr r2, 800bc0c <DMA_CheckFifoParam+0x70>)
 800bc08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc0c:	0800bc1d 	.word	0x0800bc1d
 800bc10:	0800bc23 	.word	0x0800bc23
 800bc14:	0800bc1d 	.word	0x0800bc1d
 800bc18:	0800bc35 	.word	0x0800bc35
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800bc1c:	2301      	movs	r3, #1
 800bc1e:	73fb      	strb	r3, [r7, #15]
      break;
 800bc20:	e030      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc26:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d025      	beq.n	800bc7a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800bc2e:	2301      	movs	r3, #1
 800bc30:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800bc32:	e022      	b.n	800bc7a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc38:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800bc3c:	d11f      	bne.n	800bc7e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800bc3e:	2301      	movs	r3, #1
 800bc40:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800bc42:	e01c      	b.n	800bc7e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	2b02      	cmp	r3, #2
 800bc48:	d903      	bls.n	800bc52 <DMA_CheckFifoParam+0xb6>
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	2b03      	cmp	r3, #3
 800bc4e:	d003      	beq.n	800bc58 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800bc50:	e018      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800bc52:	2301      	movs	r3, #1
 800bc54:	73fb      	strb	r3, [r7, #15]
      break;
 800bc56:	e015      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d00e      	beq.n	800bc82 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800bc64:	2301      	movs	r3, #1
 800bc66:	73fb      	strb	r3, [r7, #15]
      break;
 800bc68:	e00b      	b.n	800bc82 <DMA_CheckFifoParam+0xe6>
      break;
 800bc6a:	bf00      	nop
 800bc6c:	e00a      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
      break;
 800bc6e:	bf00      	nop
 800bc70:	e008      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
      break;
 800bc72:	bf00      	nop
 800bc74:	e006      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
      break;
 800bc76:	bf00      	nop
 800bc78:	e004      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
      break;
 800bc7a:	bf00      	nop
 800bc7c:	e002      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
      break;   
 800bc7e:	bf00      	nop
 800bc80:	e000      	b.n	800bc84 <DMA_CheckFifoParam+0xe8>
      break;
 800bc82:	bf00      	nop
    }
  } 
  
  return status; 
 800bc84:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc86:	4618      	mov	r0, r3
 800bc88:	3714      	adds	r7, #20
 800bc8a:	46bd      	mov	sp, r7
 800bc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc90:	4770      	bx	lr
 800bc92:	bf00      	nop

0800bc94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bc94:	b480      	push	{r7}
 800bc96:	b089      	sub	sp, #36	; 0x24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800bca2:	2300      	movs	r3, #0
 800bca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800bca6:	2300      	movs	r3, #0
 800bca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bcaa:	2300      	movs	r3, #0
 800bcac:	61fb      	str	r3, [r7, #28]
 800bcae:	e177      	b.n	800bfa0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	fa02 f303 	lsl.w	r3, r2, r3
 800bcb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800bcba:	683b      	ldr	r3, [r7, #0]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	697a      	ldr	r2, [r7, #20]
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800bcc4:	693a      	ldr	r2, [r7, #16]
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	f040 8166 	bne.w	800bf9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	f003 0303 	and.w	r3, r3, #3
 800bcd6:	2b01      	cmp	r3, #1
 800bcd8:	d005      	beq.n	800bce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bcda:	683b      	ldr	r3, [r7, #0]
 800bcdc:	685b      	ldr	r3, [r3, #4]
 800bcde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800bce2:	2b02      	cmp	r3, #2
 800bce4:	d130      	bne.n	800bd48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	689b      	ldr	r3, [r3, #8]
 800bcea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	005b      	lsls	r3, r3, #1
 800bcf0:	2203      	movs	r2, #3
 800bcf2:	fa02 f303 	lsl.w	r3, r2, r3
 800bcf6:	43db      	mvns	r3, r3
 800bcf8:	69ba      	ldr	r2, [r7, #24]
 800bcfa:	4013      	ands	r3, r2
 800bcfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	68da      	ldr	r2, [r3, #12]
 800bd02:	69fb      	ldr	r3, [r7, #28]
 800bd04:	005b      	lsls	r3, r3, #1
 800bd06:	fa02 f303 	lsl.w	r3, r2, r3
 800bd0a:	69ba      	ldr	r2, [r7, #24]
 800bd0c:	4313      	orrs	r3, r2
 800bd0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	69ba      	ldr	r2, [r7, #24]
 800bd14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	685b      	ldr	r3, [r3, #4]
 800bd1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800bd1c:	2201      	movs	r2, #1
 800bd1e:	69fb      	ldr	r3, [r7, #28]
 800bd20:	fa02 f303 	lsl.w	r3, r2, r3
 800bd24:	43db      	mvns	r3, r3
 800bd26:	69ba      	ldr	r2, [r7, #24]
 800bd28:	4013      	ands	r3, r2
 800bd2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	091b      	lsrs	r3, r3, #4
 800bd32:	f003 0201 	and.w	r2, r3, #1
 800bd36:	69fb      	ldr	r3, [r7, #28]
 800bd38:	fa02 f303 	lsl.w	r3, r2, r3
 800bd3c:	69ba      	ldr	r2, [r7, #24]
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	69ba      	ldr	r2, [r7, #24]
 800bd46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	f003 0303 	and.w	r3, r3, #3
 800bd50:	2b03      	cmp	r3, #3
 800bd52:	d017      	beq.n	800bd84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	68db      	ldr	r3, [r3, #12]
 800bd58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800bd5a:	69fb      	ldr	r3, [r7, #28]
 800bd5c:	005b      	lsls	r3, r3, #1
 800bd5e:	2203      	movs	r2, #3
 800bd60:	fa02 f303 	lsl.w	r3, r2, r3
 800bd64:	43db      	mvns	r3, r3
 800bd66:	69ba      	ldr	r2, [r7, #24]
 800bd68:	4013      	ands	r3, r2
 800bd6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	689a      	ldr	r2, [r3, #8]
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	005b      	lsls	r3, r3, #1
 800bd74:	fa02 f303 	lsl.w	r3, r2, r3
 800bd78:	69ba      	ldr	r2, [r7, #24]
 800bd7a:	4313      	orrs	r3, r2
 800bd7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	69ba      	ldr	r2, [r7, #24]
 800bd82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800bd84:	683b      	ldr	r3, [r7, #0]
 800bd86:	685b      	ldr	r3, [r3, #4]
 800bd88:	f003 0303 	and.w	r3, r3, #3
 800bd8c:	2b02      	cmp	r3, #2
 800bd8e:	d123      	bne.n	800bdd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800bd90:	69fb      	ldr	r3, [r7, #28]
 800bd92:	08da      	lsrs	r2, r3, #3
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	3208      	adds	r2, #8
 800bd98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800bd9e:	69fb      	ldr	r3, [r7, #28]
 800bda0:	f003 0307 	and.w	r3, r3, #7
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	220f      	movs	r2, #15
 800bda8:	fa02 f303 	lsl.w	r3, r2, r3
 800bdac:	43db      	mvns	r3, r3
 800bdae:	69ba      	ldr	r2, [r7, #24]
 800bdb0:	4013      	ands	r3, r2
 800bdb2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	691a      	ldr	r2, [r3, #16]
 800bdb8:	69fb      	ldr	r3, [r7, #28]
 800bdba:	f003 0307 	and.w	r3, r3, #7
 800bdbe:	009b      	lsls	r3, r3, #2
 800bdc0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdc4:	69ba      	ldr	r2, [r7, #24]
 800bdc6:	4313      	orrs	r3, r2
 800bdc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800bdca:	69fb      	ldr	r3, [r7, #28]
 800bdcc:	08da      	lsrs	r2, r3, #3
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	3208      	adds	r2, #8
 800bdd2:	69b9      	ldr	r1, [r7, #24]
 800bdd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800bdde:	69fb      	ldr	r3, [r7, #28]
 800bde0:	005b      	lsls	r3, r3, #1
 800bde2:	2203      	movs	r2, #3
 800bde4:	fa02 f303 	lsl.w	r3, r2, r3
 800bde8:	43db      	mvns	r3, r3
 800bdea:	69ba      	ldr	r2, [r7, #24]
 800bdec:	4013      	ands	r3, r2
 800bdee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	685b      	ldr	r3, [r3, #4]
 800bdf4:	f003 0203 	and.w	r2, r3, #3
 800bdf8:	69fb      	ldr	r3, [r7, #28]
 800bdfa:	005b      	lsls	r3, r3, #1
 800bdfc:	fa02 f303 	lsl.w	r3, r2, r3
 800be00:	69ba      	ldr	r2, [r7, #24]
 800be02:	4313      	orrs	r3, r2
 800be04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	69ba      	ldr	r2, [r7, #24]
 800be0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800be0c:	683b      	ldr	r3, [r7, #0]
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800be14:	2b00      	cmp	r3, #0
 800be16:	f000 80c0 	beq.w	800bf9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800be1a:	2300      	movs	r3, #0
 800be1c:	60fb      	str	r3, [r7, #12]
 800be1e:	4b66      	ldr	r3, [pc, #408]	; (800bfb8 <HAL_GPIO_Init+0x324>)
 800be20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be22:	4a65      	ldr	r2, [pc, #404]	; (800bfb8 <HAL_GPIO_Init+0x324>)
 800be24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800be28:	6453      	str	r3, [r2, #68]	; 0x44
 800be2a:	4b63      	ldr	r3, [pc, #396]	; (800bfb8 <HAL_GPIO_Init+0x324>)
 800be2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800be32:	60fb      	str	r3, [r7, #12]
 800be34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800be36:	4a61      	ldr	r2, [pc, #388]	; (800bfbc <HAL_GPIO_Init+0x328>)
 800be38:	69fb      	ldr	r3, [r7, #28]
 800be3a:	089b      	lsrs	r3, r3, #2
 800be3c:	3302      	adds	r3, #2
 800be3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800be42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800be44:	69fb      	ldr	r3, [r7, #28]
 800be46:	f003 0303 	and.w	r3, r3, #3
 800be4a:	009b      	lsls	r3, r3, #2
 800be4c:	220f      	movs	r2, #15
 800be4e:	fa02 f303 	lsl.w	r3, r2, r3
 800be52:	43db      	mvns	r3, r3
 800be54:	69ba      	ldr	r2, [r7, #24]
 800be56:	4013      	ands	r3, r2
 800be58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	4a58      	ldr	r2, [pc, #352]	; (800bfc0 <HAL_GPIO_Init+0x32c>)
 800be5e:	4293      	cmp	r3, r2
 800be60:	d037      	beq.n	800bed2 <HAL_GPIO_Init+0x23e>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	4a57      	ldr	r2, [pc, #348]	; (800bfc4 <HAL_GPIO_Init+0x330>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d031      	beq.n	800bece <HAL_GPIO_Init+0x23a>
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	4a56      	ldr	r2, [pc, #344]	; (800bfc8 <HAL_GPIO_Init+0x334>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d02b      	beq.n	800beca <HAL_GPIO_Init+0x236>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	4a55      	ldr	r2, [pc, #340]	; (800bfcc <HAL_GPIO_Init+0x338>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d025      	beq.n	800bec6 <HAL_GPIO_Init+0x232>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	4a54      	ldr	r2, [pc, #336]	; (800bfd0 <HAL_GPIO_Init+0x33c>)
 800be7e:	4293      	cmp	r3, r2
 800be80:	d01f      	beq.n	800bec2 <HAL_GPIO_Init+0x22e>
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	4a53      	ldr	r2, [pc, #332]	; (800bfd4 <HAL_GPIO_Init+0x340>)
 800be86:	4293      	cmp	r3, r2
 800be88:	d019      	beq.n	800bebe <HAL_GPIO_Init+0x22a>
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	4a52      	ldr	r2, [pc, #328]	; (800bfd8 <HAL_GPIO_Init+0x344>)
 800be8e:	4293      	cmp	r3, r2
 800be90:	d013      	beq.n	800beba <HAL_GPIO_Init+0x226>
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	4a51      	ldr	r2, [pc, #324]	; (800bfdc <HAL_GPIO_Init+0x348>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d00d      	beq.n	800beb6 <HAL_GPIO_Init+0x222>
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	4a50      	ldr	r2, [pc, #320]	; (800bfe0 <HAL_GPIO_Init+0x34c>)
 800be9e:	4293      	cmp	r3, r2
 800bea0:	d007      	beq.n	800beb2 <HAL_GPIO_Init+0x21e>
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	4a4f      	ldr	r2, [pc, #316]	; (800bfe4 <HAL_GPIO_Init+0x350>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d101      	bne.n	800beae <HAL_GPIO_Init+0x21a>
 800beaa:	2309      	movs	r3, #9
 800beac:	e012      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800beae:	230a      	movs	r3, #10
 800beb0:	e010      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800beb2:	2308      	movs	r3, #8
 800beb4:	e00e      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800beb6:	2307      	movs	r3, #7
 800beb8:	e00c      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800beba:	2306      	movs	r3, #6
 800bebc:	e00a      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800bebe:	2305      	movs	r3, #5
 800bec0:	e008      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800bec2:	2304      	movs	r3, #4
 800bec4:	e006      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800bec6:	2303      	movs	r3, #3
 800bec8:	e004      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800beca:	2302      	movs	r3, #2
 800becc:	e002      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800bece:	2301      	movs	r3, #1
 800bed0:	e000      	b.n	800bed4 <HAL_GPIO_Init+0x240>
 800bed2:	2300      	movs	r3, #0
 800bed4:	69fa      	ldr	r2, [r7, #28]
 800bed6:	f002 0203 	and.w	r2, r2, #3
 800beda:	0092      	lsls	r2, r2, #2
 800bedc:	4093      	lsls	r3, r2
 800bede:	69ba      	ldr	r2, [r7, #24]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800bee4:	4935      	ldr	r1, [pc, #212]	; (800bfbc <HAL_GPIO_Init+0x328>)
 800bee6:	69fb      	ldr	r3, [r7, #28]
 800bee8:	089b      	lsrs	r3, r3, #2
 800beea:	3302      	adds	r3, #2
 800beec:	69ba      	ldr	r2, [r7, #24]
 800beee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800bef2:	4b3d      	ldr	r3, [pc, #244]	; (800bfe8 <HAL_GPIO_Init+0x354>)
 800bef4:	689b      	ldr	r3, [r3, #8]
 800bef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	43db      	mvns	r3, r3
 800befc:	69ba      	ldr	r2, [r7, #24]
 800befe:	4013      	ands	r3, r2
 800bf00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	685b      	ldr	r3, [r3, #4]
 800bf06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d003      	beq.n	800bf16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800bf0e:	69ba      	ldr	r2, [r7, #24]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800bf16:	4a34      	ldr	r2, [pc, #208]	; (800bfe8 <HAL_GPIO_Init+0x354>)
 800bf18:	69bb      	ldr	r3, [r7, #24]
 800bf1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800bf1c:	4b32      	ldr	r3, [pc, #200]	; (800bfe8 <HAL_GPIO_Init+0x354>)
 800bf1e:	68db      	ldr	r3, [r3, #12]
 800bf20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf22:	693b      	ldr	r3, [r7, #16]
 800bf24:	43db      	mvns	r3, r3
 800bf26:	69ba      	ldr	r2, [r7, #24]
 800bf28:	4013      	ands	r3, r2
 800bf2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d003      	beq.n	800bf40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800bf38:	69ba      	ldr	r2, [r7, #24]
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	4313      	orrs	r3, r2
 800bf3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800bf40:	4a29      	ldr	r2, [pc, #164]	; (800bfe8 <HAL_GPIO_Init+0x354>)
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800bf46:	4b28      	ldr	r3, [pc, #160]	; (800bfe8 <HAL_GPIO_Init+0x354>)
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf4c:	693b      	ldr	r3, [r7, #16]
 800bf4e:	43db      	mvns	r3, r3
 800bf50:	69ba      	ldr	r2, [r7, #24]
 800bf52:	4013      	ands	r3, r2
 800bf54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	685b      	ldr	r3, [r3, #4]
 800bf5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d003      	beq.n	800bf6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800bf62:	69ba      	ldr	r2, [r7, #24]
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800bf6a:	4a1f      	ldr	r2, [pc, #124]	; (800bfe8 <HAL_GPIO_Init+0x354>)
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800bf70:	4b1d      	ldr	r3, [pc, #116]	; (800bfe8 <HAL_GPIO_Init+0x354>)
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800bf76:	693b      	ldr	r3, [r7, #16]
 800bf78:	43db      	mvns	r3, r3
 800bf7a:	69ba      	ldr	r2, [r7, #24]
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800bf80:	683b      	ldr	r3, [r7, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d003      	beq.n	800bf94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	693b      	ldr	r3, [r7, #16]
 800bf90:	4313      	orrs	r3, r2
 800bf92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800bf94:	4a14      	ldr	r2, [pc, #80]	; (800bfe8 <HAL_GPIO_Init+0x354>)
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	3301      	adds	r3, #1
 800bf9e:	61fb      	str	r3, [r7, #28]
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	2b0f      	cmp	r3, #15
 800bfa4:	f67f ae84 	bls.w	800bcb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800bfa8:	bf00      	nop
 800bfaa:	bf00      	nop
 800bfac:	3724      	adds	r7, #36	; 0x24
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	40023800 	.word	0x40023800
 800bfbc:	40013800 	.word	0x40013800
 800bfc0:	40020000 	.word	0x40020000
 800bfc4:	40020400 	.word	0x40020400
 800bfc8:	40020800 	.word	0x40020800
 800bfcc:	40020c00 	.word	0x40020c00
 800bfd0:	40021000 	.word	0x40021000
 800bfd4:	40021400 	.word	0x40021400
 800bfd8:	40021800 	.word	0x40021800
 800bfdc:	40021c00 	.word	0x40021c00
 800bfe0:	40022000 	.word	0x40022000
 800bfe4:	40022400 	.word	0x40022400
 800bfe8:	40013c00 	.word	0x40013c00

0800bfec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
 800bff4:	460b      	mov	r3, r1
 800bff6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	691a      	ldr	r2, [r3, #16]
 800bffc:	887b      	ldrh	r3, [r7, #2]
 800bffe:	4013      	ands	r3, r2
 800c000:	2b00      	cmp	r3, #0
 800c002:	d002      	beq.n	800c00a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c004:	2301      	movs	r3, #1
 800c006:	73fb      	strb	r3, [r7, #15]
 800c008:	e001      	b.n	800c00e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c00a:	2300      	movs	r3, #0
 800c00c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c00e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c010:	4618      	mov	r0, r3
 800c012:	3714      	adds	r7, #20
 800c014:	46bd      	mov	sp, r7
 800c016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01a:	4770      	bx	lr

0800c01c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c01c:	b480      	push	{r7}
 800c01e:	b083      	sub	sp, #12
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	460b      	mov	r3, r1
 800c026:	807b      	strh	r3, [r7, #2]
 800c028:	4613      	mov	r3, r2
 800c02a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800c02c:	787b      	ldrb	r3, [r7, #1]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d003      	beq.n	800c03a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c032:	887a      	ldrh	r2, [r7, #2]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800c038:	e003      	b.n	800c042 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800c03a:	887b      	ldrh	r3, [r7, #2]
 800c03c:	041a      	lsls	r2, r3, #16
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	619a      	str	r2, [r3, #24]
}
 800c042:	bf00      	nop
 800c044:	370c      	adds	r7, #12
 800c046:	46bd      	mov	sp, r7
 800c048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04c:	4770      	bx	lr

0800c04e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800c04e:	b480      	push	{r7}
 800c050:	b085      	sub	sp, #20
 800c052:	af00      	add	r7, sp, #0
 800c054:	6078      	str	r0, [r7, #4]
 800c056:	460b      	mov	r3, r1
 800c058:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	695b      	ldr	r3, [r3, #20]
 800c05e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800c060:	887a      	ldrh	r2, [r7, #2]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	4013      	ands	r3, r2
 800c066:	041a      	lsls	r2, r3, #16
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	43d9      	mvns	r1, r3
 800c06c:	887b      	ldrh	r3, [r7, #2]
 800c06e:	400b      	ands	r3, r1
 800c070:	431a      	orrs	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	619a      	str	r2, [r3, #24]
}
 800c076:	bf00      	nop
 800c078:	3714      	adds	r7, #20
 800c07a:	46bd      	mov	sp, r7
 800c07c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c080:	4770      	bx	lr

0800c082 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800c082:	b580      	push	{r7, lr}
 800c084:	b086      	sub	sp, #24
 800c086:	af02      	add	r7, sp, #8
 800c088:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d101      	bne.n	800c094 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800c090:	2301      	movs	r3, #1
 800c092:	e059      	b.n	800c148 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	f893 33d5 	ldrb.w	r3, [r3, #981]	; 0x3d5
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d106      	bne.n	800c0b4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2200      	movs	r2, #0
 800c0aa:	f883 23d4 	strb.w	r2, [r3, #980]	; 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f7fd fd68 	bl	8009b84 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2203      	movs	r2, #3
 800c0b8:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c0c2:	d102      	bne.n	800c0ca <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f002 f8d4 	bl	800e27c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6818      	ldr	r0, [r3, #0]
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	7c1a      	ldrb	r2, [r3, #16]
 800c0dc:	f88d 2000 	strb.w	r2, [sp]
 800c0e0:	3304      	adds	r3, #4
 800c0e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c0e4:	f002 f866 	bl	800e1b4 <USB_CoreInit>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d005      	beq.n	800c0fa <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	2202      	movs	r2, #2
 800c0f2:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e026      	b.n	800c148 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	2101      	movs	r1, #1
 800c100:	4618      	mov	r0, r3
 800c102:	f002 f8cc 	bl	800e29e <USB_SetCurrentMode>
 800c106:	4603      	mov	r3, r0
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d005      	beq.n	800c118 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2202      	movs	r2, #2
 800c110:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800c114:	2301      	movs	r3, #1
 800c116:	e017      	b.n	800c148 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6818      	ldr	r0, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	7c1a      	ldrb	r2, [r3, #16]
 800c120:	f88d 2000 	strb.w	r2, [sp]
 800c124:	3304      	adds	r3, #4
 800c126:	cb0e      	ldmia	r3, {r1, r2, r3}
 800c128:	f002 f9a4 	bl	800e474 <USB_HostInit>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d005      	beq.n	800c13e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	2202      	movs	r2, #2
 800c136:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5
    return HAL_ERROR;
 800c13a:	2301      	movs	r3, #1
 800c13c:	e004      	b.n	800c148 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2201      	movs	r2, #1
 800c142:	f883 23d5 	strb.w	r2, [r3, #981]	; 0x3d5

  return HAL_OK;
 800c146:	2300      	movs	r3, #0
}
 800c148:	4618      	mov	r0, r3
 800c14a:	3710      	adds	r7, #16
 800c14c:	46bd      	mov	sp, r7
 800c14e:	bd80      	pop	{r7, pc}

0800c150 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e034      	b.n	800c1cc <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800c16a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f245 5255 	movw	r2, #21845	; 0x5555
 800c174:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	6852      	ldr	r2, [r2, #4]
 800c17e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	687a      	ldr	r2, [r7, #4]
 800c186:	6892      	ldr	r2, [r2, #8]
 800c188:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800c18a:	f7fd fdd7 	bl	8009d3c <HAL_GetTick>
 800c18e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c190:	e00f      	b.n	800c1b2 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800c192:	f7fd fdd3 	bl	8009d3c <HAL_GetTick>
 800c196:	4602      	mov	r2, r0
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	1ad3      	subs	r3, r2, r3
 800c19c:	2b31      	cmp	r3, #49	; 0x31
 800c19e:	d908      	bls.n	800c1b2 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	68db      	ldr	r3, [r3, #12]
 800c1a6:	f003 0303 	and.w	r3, r3, #3
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d001      	beq.n	800c1b2 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e00c      	b.n	800c1cc <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	68db      	ldr	r3, [r3, #12]
 800c1b8:	f003 0303 	and.w	r3, r3, #3
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d1e8      	bne.n	800c192 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c1c8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c1ca:	2300      	movs	r3, #0
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3710      	adds	r7, #16
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	bd80      	pop	{r7, pc}

0800c1d4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800c1d4:	b480      	push	{r7}
 800c1d6:	b083      	sub	sp, #12
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800c1e4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800c1e6:	2300      	movs	r3, #0
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d101      	bne.n	800c206 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c202:	2301      	movs	r3, #1
 800c204:	e267      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	f003 0301 	and.w	r3, r3, #1
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d075      	beq.n	800c2fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c212:	4b88      	ldr	r3, [pc, #544]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c214:	689b      	ldr	r3, [r3, #8]
 800c216:	f003 030c 	and.w	r3, r3, #12
 800c21a:	2b04      	cmp	r3, #4
 800c21c:	d00c      	beq.n	800c238 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c21e:	4b85      	ldr	r3, [pc, #532]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c220:	689b      	ldr	r3, [r3, #8]
 800c222:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800c226:	2b08      	cmp	r3, #8
 800c228:	d112      	bne.n	800c250 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c22a:	4b82      	ldr	r3, [pc, #520]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c232:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c236:	d10b      	bne.n	800c250 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c238:	4b7e      	ldr	r3, [pc, #504]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c240:	2b00      	cmp	r3, #0
 800c242:	d05b      	beq.n	800c2fc <HAL_RCC_OscConfig+0x108>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	685b      	ldr	r3, [r3, #4]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d157      	bne.n	800c2fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c24c:	2301      	movs	r3, #1
 800c24e:	e242      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	685b      	ldr	r3, [r3, #4]
 800c254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c258:	d106      	bne.n	800c268 <HAL_RCC_OscConfig+0x74>
 800c25a:	4b76      	ldr	r3, [pc, #472]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c25c:	681b      	ldr	r3, [r3, #0]
 800c25e:	4a75      	ldr	r2, [pc, #468]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c264:	6013      	str	r3, [r2, #0]
 800c266:	e01d      	b.n	800c2a4 <HAL_RCC_OscConfig+0xb0>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	685b      	ldr	r3, [r3, #4]
 800c26c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c270:	d10c      	bne.n	800c28c <HAL_RCC_OscConfig+0x98>
 800c272:	4b70      	ldr	r3, [pc, #448]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	4a6f      	ldr	r2, [pc, #444]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c27c:	6013      	str	r3, [r2, #0]
 800c27e:	4b6d      	ldr	r3, [pc, #436]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a6c      	ldr	r2, [pc, #432]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c288:	6013      	str	r3, [r2, #0]
 800c28a:	e00b      	b.n	800c2a4 <HAL_RCC_OscConfig+0xb0>
 800c28c:	4b69      	ldr	r3, [pc, #420]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	4a68      	ldr	r2, [pc, #416]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c296:	6013      	str	r3, [r2, #0]
 800c298:	4b66      	ldr	r3, [pc, #408]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	4a65      	ldr	r2, [pc, #404]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c29e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c2a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d013      	beq.n	800c2d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2ac:	f7fd fd46 	bl	8009d3c <HAL_GetTick>
 800c2b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2b2:	e008      	b.n	800c2c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c2b4:	f7fd fd42 	bl	8009d3c <HAL_GetTick>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	693b      	ldr	r3, [r7, #16]
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	2b64      	cmp	r3, #100	; 0x64
 800c2c0:	d901      	bls.n	800c2c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e207      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c2c6:	4b5b      	ldr	r3, [pc, #364]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d0f0      	beq.n	800c2b4 <HAL_RCC_OscConfig+0xc0>
 800c2d2:	e014      	b.n	800c2fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c2d4:	f7fd fd32 	bl	8009d3c <HAL_GetTick>
 800c2d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2da:	e008      	b.n	800c2ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c2dc:	f7fd fd2e 	bl	8009d3c <HAL_GetTick>
 800c2e0:	4602      	mov	r2, r0
 800c2e2:	693b      	ldr	r3, [r7, #16]
 800c2e4:	1ad3      	subs	r3, r2, r3
 800c2e6:	2b64      	cmp	r3, #100	; 0x64
 800c2e8:	d901      	bls.n	800c2ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	e1f3      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c2ee:	4b51      	ldr	r3, [pc, #324]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d1f0      	bne.n	800c2dc <HAL_RCC_OscConfig+0xe8>
 800c2fa:	e000      	b.n	800c2fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c2fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	f003 0302 	and.w	r3, r3, #2
 800c306:	2b00      	cmp	r3, #0
 800c308:	d063      	beq.n	800c3d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c30a:	4b4a      	ldr	r3, [pc, #296]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c30c:	689b      	ldr	r3, [r3, #8]
 800c30e:	f003 030c 	and.w	r3, r3, #12
 800c312:	2b00      	cmp	r3, #0
 800c314:	d00b      	beq.n	800c32e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c316:	4b47      	ldr	r3, [pc, #284]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c318:	689b      	ldr	r3, [r3, #8]
 800c31a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800c31e:	2b08      	cmp	r3, #8
 800c320:	d11c      	bne.n	800c35c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c322:	4b44      	ldr	r3, [pc, #272]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c324:	685b      	ldr	r3, [r3, #4]
 800c326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d116      	bne.n	800c35c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c32e:	4b41      	ldr	r3, [pc, #260]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f003 0302 	and.w	r3, r3, #2
 800c336:	2b00      	cmp	r3, #0
 800c338:	d005      	beq.n	800c346 <HAL_RCC_OscConfig+0x152>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d001      	beq.n	800c346 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e1c7      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c346:	4b3b      	ldr	r3, [pc, #236]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	691b      	ldr	r3, [r3, #16]
 800c352:	00db      	lsls	r3, r3, #3
 800c354:	4937      	ldr	r1, [pc, #220]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c356:	4313      	orrs	r3, r2
 800c358:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c35a:	e03a      	b.n	800c3d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d020      	beq.n	800c3a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c364:	4b34      	ldr	r3, [pc, #208]	; (800c438 <HAL_RCC_OscConfig+0x244>)
 800c366:	2201      	movs	r2, #1
 800c368:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c36a:	f7fd fce7 	bl	8009d3c <HAL_GetTick>
 800c36e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c370:	e008      	b.n	800c384 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c372:	f7fd fce3 	bl	8009d3c <HAL_GetTick>
 800c376:	4602      	mov	r2, r0
 800c378:	693b      	ldr	r3, [r7, #16]
 800c37a:	1ad3      	subs	r3, r2, r3
 800c37c:	2b02      	cmp	r3, #2
 800c37e:	d901      	bls.n	800c384 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800c380:	2303      	movs	r3, #3
 800c382:	e1a8      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c384:	4b2b      	ldr	r3, [pc, #172]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	f003 0302 	and.w	r3, r3, #2
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d0f0      	beq.n	800c372 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c390:	4b28      	ldr	r3, [pc, #160]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	691b      	ldr	r3, [r3, #16]
 800c39c:	00db      	lsls	r3, r3, #3
 800c39e:	4925      	ldr	r1, [pc, #148]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c3a0:	4313      	orrs	r3, r2
 800c3a2:	600b      	str	r3, [r1, #0]
 800c3a4:	e015      	b.n	800c3d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3a6:	4b24      	ldr	r3, [pc, #144]	; (800c438 <HAL_RCC_OscConfig+0x244>)
 800c3a8:	2200      	movs	r2, #0
 800c3aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3ac:	f7fd fcc6 	bl	8009d3c <HAL_GetTick>
 800c3b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c3b2:	e008      	b.n	800c3c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c3b4:	f7fd fcc2 	bl	8009d3c <HAL_GetTick>
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	693b      	ldr	r3, [r7, #16]
 800c3bc:	1ad3      	subs	r3, r2, r3
 800c3be:	2b02      	cmp	r3, #2
 800c3c0:	d901      	bls.n	800c3c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800c3c2:	2303      	movs	r3, #3
 800c3c4:	e187      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c3c6:	4b1b      	ldr	r3, [pc, #108]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 0302 	and.w	r3, r3, #2
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d1f0      	bne.n	800c3b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	f003 0308 	and.w	r3, r3, #8
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d036      	beq.n	800c44c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	695b      	ldr	r3, [r3, #20]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d016      	beq.n	800c414 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c3e6:	4b15      	ldr	r3, [pc, #84]	; (800c43c <HAL_RCC_OscConfig+0x248>)
 800c3e8:	2201      	movs	r2, #1
 800c3ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c3ec:	f7fd fca6 	bl	8009d3c <HAL_GetTick>
 800c3f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c3f2:	e008      	b.n	800c406 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c3f4:	f7fd fca2 	bl	8009d3c <HAL_GetTick>
 800c3f8:	4602      	mov	r2, r0
 800c3fa:	693b      	ldr	r3, [r7, #16]
 800c3fc:	1ad3      	subs	r3, r2, r3
 800c3fe:	2b02      	cmp	r3, #2
 800c400:	d901      	bls.n	800c406 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800c402:	2303      	movs	r3, #3
 800c404:	e167      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c406:	4b0b      	ldr	r3, [pc, #44]	; (800c434 <HAL_RCC_OscConfig+0x240>)
 800c408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c40a:	f003 0302 	and.w	r3, r3, #2
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d0f0      	beq.n	800c3f4 <HAL_RCC_OscConfig+0x200>
 800c412:	e01b      	b.n	800c44c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c414:	4b09      	ldr	r3, [pc, #36]	; (800c43c <HAL_RCC_OscConfig+0x248>)
 800c416:	2200      	movs	r2, #0
 800c418:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c41a:	f7fd fc8f 	bl	8009d3c <HAL_GetTick>
 800c41e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c420:	e00e      	b.n	800c440 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c422:	f7fd fc8b 	bl	8009d3c <HAL_GetTick>
 800c426:	4602      	mov	r2, r0
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	1ad3      	subs	r3, r2, r3
 800c42c:	2b02      	cmp	r3, #2
 800c42e:	d907      	bls.n	800c440 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800c430:	2303      	movs	r3, #3
 800c432:	e150      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
 800c434:	40023800 	.word	0x40023800
 800c438:	42470000 	.word	0x42470000
 800c43c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c440:	4b88      	ldr	r3, [pc, #544]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c444:	f003 0302 	and.w	r3, r3, #2
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1ea      	bne.n	800c422 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f003 0304 	and.w	r3, r3, #4
 800c454:	2b00      	cmp	r3, #0
 800c456:	f000 8097 	beq.w	800c588 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c45a:	2300      	movs	r3, #0
 800c45c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c45e:	4b81      	ldr	r3, [pc, #516]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d10f      	bne.n	800c48a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c46a:	2300      	movs	r3, #0
 800c46c:	60bb      	str	r3, [r7, #8]
 800c46e:	4b7d      	ldr	r3, [pc, #500]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c472:	4a7c      	ldr	r2, [pc, #496]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c478:	6413      	str	r3, [r2, #64]	; 0x40
 800c47a:	4b7a      	ldr	r3, [pc, #488]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c47c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c47e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c482:	60bb      	str	r3, [r7, #8]
 800c484:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c486:	2301      	movs	r3, #1
 800c488:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c48a:	4b77      	ldr	r3, [pc, #476]	; (800c668 <HAL_RCC_OscConfig+0x474>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c492:	2b00      	cmp	r3, #0
 800c494:	d118      	bne.n	800c4c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c496:	4b74      	ldr	r3, [pc, #464]	; (800c668 <HAL_RCC_OscConfig+0x474>)
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	4a73      	ldr	r2, [pc, #460]	; (800c668 <HAL_RCC_OscConfig+0x474>)
 800c49c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c4a2:	f7fd fc4b 	bl	8009d3c <HAL_GetTick>
 800c4a6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4a8:	e008      	b.n	800c4bc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c4aa:	f7fd fc47 	bl	8009d3c <HAL_GetTick>
 800c4ae:	4602      	mov	r2, r0
 800c4b0:	693b      	ldr	r3, [r7, #16]
 800c4b2:	1ad3      	subs	r3, r2, r3
 800c4b4:	2b02      	cmp	r3, #2
 800c4b6:	d901      	bls.n	800c4bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800c4b8:	2303      	movs	r3, #3
 800c4ba:	e10c      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4bc:	4b6a      	ldr	r3, [pc, #424]	; (800c668 <HAL_RCC_OscConfig+0x474>)
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d0f0      	beq.n	800c4aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d106      	bne.n	800c4de <HAL_RCC_OscConfig+0x2ea>
 800c4d0:	4b64      	ldr	r3, [pc, #400]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c4d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4d4:	4a63      	ldr	r2, [pc, #396]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c4d6:	f043 0301 	orr.w	r3, r3, #1
 800c4da:	6713      	str	r3, [r2, #112]	; 0x70
 800c4dc:	e01c      	b.n	800c518 <HAL_RCC_OscConfig+0x324>
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	689b      	ldr	r3, [r3, #8]
 800c4e2:	2b05      	cmp	r3, #5
 800c4e4:	d10c      	bne.n	800c500 <HAL_RCC_OscConfig+0x30c>
 800c4e6:	4b5f      	ldr	r3, [pc, #380]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4ea:	4a5e      	ldr	r2, [pc, #376]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c4ec:	f043 0304 	orr.w	r3, r3, #4
 800c4f0:	6713      	str	r3, [r2, #112]	; 0x70
 800c4f2:	4b5c      	ldr	r3, [pc, #368]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c4f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4f6:	4a5b      	ldr	r2, [pc, #364]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c4f8:	f043 0301 	orr.w	r3, r3, #1
 800c4fc:	6713      	str	r3, [r2, #112]	; 0x70
 800c4fe:	e00b      	b.n	800c518 <HAL_RCC_OscConfig+0x324>
 800c500:	4b58      	ldr	r3, [pc, #352]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c504:	4a57      	ldr	r2, [pc, #348]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c506:	f023 0301 	bic.w	r3, r3, #1
 800c50a:	6713      	str	r3, [r2, #112]	; 0x70
 800c50c:	4b55      	ldr	r3, [pc, #340]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c50e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c510:	4a54      	ldr	r2, [pc, #336]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c512:	f023 0304 	bic.w	r3, r3, #4
 800c516:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	689b      	ldr	r3, [r3, #8]
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	d015      	beq.n	800c54c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c520:	f7fd fc0c 	bl	8009d3c <HAL_GetTick>
 800c524:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c526:	e00a      	b.n	800c53e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c528:	f7fd fc08 	bl	8009d3c <HAL_GetTick>
 800c52c:	4602      	mov	r2, r0
 800c52e:	693b      	ldr	r3, [r7, #16]
 800c530:	1ad3      	subs	r3, r2, r3
 800c532:	f241 3288 	movw	r2, #5000	; 0x1388
 800c536:	4293      	cmp	r3, r2
 800c538:	d901      	bls.n	800c53e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800c53a:	2303      	movs	r3, #3
 800c53c:	e0cb      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800c53e:	4b49      	ldr	r3, [pc, #292]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c542:	f003 0302 	and.w	r3, r3, #2
 800c546:	2b00      	cmp	r3, #0
 800c548:	d0ee      	beq.n	800c528 <HAL_RCC_OscConfig+0x334>
 800c54a:	e014      	b.n	800c576 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c54c:	f7fd fbf6 	bl	8009d3c <HAL_GetTick>
 800c550:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c552:	e00a      	b.n	800c56a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c554:	f7fd fbf2 	bl	8009d3c <HAL_GetTick>
 800c558:	4602      	mov	r2, r0
 800c55a:	693b      	ldr	r3, [r7, #16]
 800c55c:	1ad3      	subs	r3, r2, r3
 800c55e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c562:	4293      	cmp	r3, r2
 800c564:	d901      	bls.n	800c56a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800c566:	2303      	movs	r3, #3
 800c568:	e0b5      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800c56a:	4b3e      	ldr	r3, [pc, #248]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c56e:	f003 0302 	and.w	r3, r3, #2
 800c572:	2b00      	cmp	r3, #0
 800c574:	d1ee      	bne.n	800c554 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c576:	7dfb      	ldrb	r3, [r7, #23]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d105      	bne.n	800c588 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c57c:	4b39      	ldr	r3, [pc, #228]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c57e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c580:	4a38      	ldr	r2, [pc, #224]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c582:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c586:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	699b      	ldr	r3, [r3, #24]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f000 80a1 	beq.w	800c6d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800c592:	4b34      	ldr	r3, [pc, #208]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c594:	689b      	ldr	r3, [r3, #8]
 800c596:	f003 030c 	and.w	r3, r3, #12
 800c59a:	2b08      	cmp	r3, #8
 800c59c:	d05c      	beq.n	800c658 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	699b      	ldr	r3, [r3, #24]
 800c5a2:	2b02      	cmp	r3, #2
 800c5a4:	d141      	bne.n	800c62a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c5a6:	4b31      	ldr	r3, [pc, #196]	; (800c66c <HAL_RCC_OscConfig+0x478>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5ac:	f7fd fbc6 	bl	8009d3c <HAL_GetTick>
 800c5b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5b2:	e008      	b.n	800c5c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c5b4:	f7fd fbc2 	bl	8009d3c <HAL_GetTick>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d901      	bls.n	800c5c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800c5c2:	2303      	movs	r3, #3
 800c5c4:	e087      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c5c6:	4b27      	ldr	r3, [pc, #156]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1f0      	bne.n	800c5b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	69da      	ldr	r2, [r3, #28]
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	6a1b      	ldr	r3, [r3, #32]
 800c5da:	431a      	orrs	r2, r3
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5e0:	019b      	lsls	r3, r3, #6
 800c5e2:	431a      	orrs	r2, r3
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5e8:	085b      	lsrs	r3, r3, #1
 800c5ea:	3b01      	subs	r3, #1
 800c5ec:	041b      	lsls	r3, r3, #16
 800c5ee:	431a      	orrs	r2, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5f4:	061b      	lsls	r3, r3, #24
 800c5f6:	491b      	ldr	r1, [pc, #108]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c5f8:	4313      	orrs	r3, r2
 800c5fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c5fc:	4b1b      	ldr	r3, [pc, #108]	; (800c66c <HAL_RCC_OscConfig+0x478>)
 800c5fe:	2201      	movs	r2, #1
 800c600:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c602:	f7fd fb9b 	bl	8009d3c <HAL_GetTick>
 800c606:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c608:	e008      	b.n	800c61c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c60a:	f7fd fb97 	bl	8009d3c <HAL_GetTick>
 800c60e:	4602      	mov	r2, r0
 800c610:	693b      	ldr	r3, [r7, #16]
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	2b02      	cmp	r3, #2
 800c616:	d901      	bls.n	800c61c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c618:	2303      	movs	r3, #3
 800c61a:	e05c      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c61c:	4b11      	ldr	r3, [pc, #68]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c624:	2b00      	cmp	r3, #0
 800c626:	d0f0      	beq.n	800c60a <HAL_RCC_OscConfig+0x416>
 800c628:	e054      	b.n	800c6d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c62a:	4b10      	ldr	r3, [pc, #64]	; (800c66c <HAL_RCC_OscConfig+0x478>)
 800c62c:	2200      	movs	r2, #0
 800c62e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c630:	f7fd fb84 	bl	8009d3c <HAL_GetTick>
 800c634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c636:	e008      	b.n	800c64a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c638:	f7fd fb80 	bl	8009d3c <HAL_GetTick>
 800c63c:	4602      	mov	r2, r0
 800c63e:	693b      	ldr	r3, [r7, #16]
 800c640:	1ad3      	subs	r3, r2, r3
 800c642:	2b02      	cmp	r3, #2
 800c644:	d901      	bls.n	800c64a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800c646:	2303      	movs	r3, #3
 800c648:	e045      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800c64a:	4b06      	ldr	r3, [pc, #24]	; (800c664 <HAL_RCC_OscConfig+0x470>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c652:	2b00      	cmp	r3, #0
 800c654:	d1f0      	bne.n	800c638 <HAL_RCC_OscConfig+0x444>
 800c656:	e03d      	b.n	800c6d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	699b      	ldr	r3, [r3, #24]
 800c65c:	2b01      	cmp	r3, #1
 800c65e:	d107      	bne.n	800c670 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	e038      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
 800c664:	40023800 	.word	0x40023800
 800c668:	40007000 	.word	0x40007000
 800c66c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800c670:	4b1b      	ldr	r3, [pc, #108]	; (800c6e0 <HAL_RCC_OscConfig+0x4ec>)
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d028      	beq.n	800c6d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c688:	429a      	cmp	r2, r3
 800c68a:	d121      	bne.n	800c6d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c696:	429a      	cmp	r2, r3
 800c698:	d11a      	bne.n	800c6d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c69a:	68fa      	ldr	r2, [r7, #12]
 800c69c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800c6a0:	4013      	ands	r3, r2
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800c6a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800c6a8:	4293      	cmp	r3, r2
 800c6aa:	d111      	bne.n	800c6d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b6:	085b      	lsrs	r3, r3, #1
 800c6b8:	3b01      	subs	r3, #1
 800c6ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d107      	bne.n	800c6d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800c6cc:	429a      	cmp	r2, r3
 800c6ce:	d001      	beq.n	800c6d4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	e000      	b.n	800c6d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3718      	adds	r7, #24
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	40023800 	.word	0x40023800

0800c6e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b084      	sub	sp, #16
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d101      	bne.n	800c6f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c6f4:	2301      	movs	r3, #1
 800c6f6:	e0cc      	b.n	800c892 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c6f8:	4b68      	ldr	r3, [pc, #416]	; (800c89c <HAL_RCC_ClockConfig+0x1b8>)
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	f003 030f 	and.w	r3, r3, #15
 800c700:	683a      	ldr	r2, [r7, #0]
 800c702:	429a      	cmp	r2, r3
 800c704:	d90c      	bls.n	800c720 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c706:	4b65      	ldr	r3, [pc, #404]	; (800c89c <HAL_RCC_ClockConfig+0x1b8>)
 800c708:	683a      	ldr	r2, [r7, #0]
 800c70a:	b2d2      	uxtb	r2, r2
 800c70c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c70e:	4b63      	ldr	r3, [pc, #396]	; (800c89c <HAL_RCC_ClockConfig+0x1b8>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 030f 	and.w	r3, r3, #15
 800c716:	683a      	ldr	r2, [r7, #0]
 800c718:	429a      	cmp	r2, r3
 800c71a:	d001      	beq.n	800c720 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c71c:	2301      	movs	r3, #1
 800c71e:	e0b8      	b.n	800c892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	f003 0302 	and.w	r3, r3, #2
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d020      	beq.n	800c76e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	f003 0304 	and.w	r3, r3, #4
 800c734:	2b00      	cmp	r3, #0
 800c736:	d005      	beq.n	800c744 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c738:	4b59      	ldr	r3, [pc, #356]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	4a58      	ldr	r2, [pc, #352]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c73e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c742:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	f003 0308 	and.w	r3, r3, #8
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d005      	beq.n	800c75c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c750:	4b53      	ldr	r3, [pc, #332]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	4a52      	ldr	r2, [pc, #328]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c756:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c75a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c75c:	4b50      	ldr	r3, [pc, #320]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c75e:	689b      	ldr	r3, [r3, #8]
 800c760:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	494d      	ldr	r1, [pc, #308]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c76a:	4313      	orrs	r3, r2
 800c76c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	2b00      	cmp	r3, #0
 800c778:	d044      	beq.n	800c804 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d107      	bne.n	800c792 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c782:	4b47      	ldr	r3, [pc, #284]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d119      	bne.n	800c7c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c78e:	2301      	movs	r3, #1
 800c790:	e07f      	b.n	800c892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	685b      	ldr	r3, [r3, #4]
 800c796:	2b02      	cmp	r3, #2
 800c798:	d003      	beq.n	800c7a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d107      	bne.n	800c7b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c7a2:	4b3f      	ldr	r3, [pc, #252]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d109      	bne.n	800c7c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7ae:	2301      	movs	r3, #1
 800c7b0:	e06f      	b.n	800c892 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c7b2:	4b3b      	ldr	r3, [pc, #236]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f003 0302 	and.w	r3, r3, #2
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d101      	bne.n	800c7c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	e067      	b.n	800c892 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c7c2:	4b37      	ldr	r3, [pc, #220]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7c4:	689b      	ldr	r3, [r3, #8]
 800c7c6:	f023 0203 	bic.w	r2, r3, #3
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	685b      	ldr	r3, [r3, #4]
 800c7ce:	4934      	ldr	r1, [pc, #208]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7d0:	4313      	orrs	r3, r2
 800c7d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c7d4:	f7fd fab2 	bl	8009d3c <HAL_GetTick>
 800c7d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7da:	e00a      	b.n	800c7f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c7dc:	f7fd faae 	bl	8009d3c <HAL_GetTick>
 800c7e0:	4602      	mov	r2, r0
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	1ad3      	subs	r3, r2, r3
 800c7e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800c7ea:	4293      	cmp	r3, r2
 800c7ec:	d901      	bls.n	800c7f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c7ee:	2303      	movs	r3, #3
 800c7f0:	e04f      	b.n	800c892 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c7f2:	4b2b      	ldr	r3, [pc, #172]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c7f4:	689b      	ldr	r3, [r3, #8]
 800c7f6:	f003 020c 	and.w	r2, r3, #12
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	685b      	ldr	r3, [r3, #4]
 800c7fe:	009b      	lsls	r3, r3, #2
 800c800:	429a      	cmp	r2, r3
 800c802:	d1eb      	bne.n	800c7dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c804:	4b25      	ldr	r3, [pc, #148]	; (800c89c <HAL_RCC_ClockConfig+0x1b8>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 030f 	and.w	r3, r3, #15
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	429a      	cmp	r2, r3
 800c810:	d20c      	bcs.n	800c82c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c812:	4b22      	ldr	r3, [pc, #136]	; (800c89c <HAL_RCC_ClockConfig+0x1b8>)
 800c814:	683a      	ldr	r2, [r7, #0]
 800c816:	b2d2      	uxtb	r2, r2
 800c818:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c81a:	4b20      	ldr	r3, [pc, #128]	; (800c89c <HAL_RCC_ClockConfig+0x1b8>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 030f 	and.w	r3, r3, #15
 800c822:	683a      	ldr	r2, [r7, #0]
 800c824:	429a      	cmp	r2, r3
 800c826:	d001      	beq.n	800c82c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c828:	2301      	movs	r3, #1
 800c82a:	e032      	b.n	800c892 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	681b      	ldr	r3, [r3, #0]
 800c830:	f003 0304 	and.w	r3, r3, #4
 800c834:	2b00      	cmp	r3, #0
 800c836:	d008      	beq.n	800c84a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c838:	4b19      	ldr	r3, [pc, #100]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c83a:	689b      	ldr	r3, [r3, #8]
 800c83c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	68db      	ldr	r3, [r3, #12]
 800c844:	4916      	ldr	r1, [pc, #88]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c846:	4313      	orrs	r3, r2
 800c848:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	f003 0308 	and.w	r3, r3, #8
 800c852:	2b00      	cmp	r3, #0
 800c854:	d009      	beq.n	800c86a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c856:	4b12      	ldr	r3, [pc, #72]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c858:	689b      	ldr	r3, [r3, #8]
 800c85a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	00db      	lsls	r3, r3, #3
 800c864:	490e      	ldr	r1, [pc, #56]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c866:	4313      	orrs	r3, r2
 800c868:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c86a:	f000 f82d 	bl	800c8c8 <HAL_RCC_GetSysClockFreq>
 800c86e:	4602      	mov	r2, r0
 800c870:	4b0b      	ldr	r3, [pc, #44]	; (800c8a0 <HAL_RCC_ClockConfig+0x1bc>)
 800c872:	689b      	ldr	r3, [r3, #8]
 800c874:	091b      	lsrs	r3, r3, #4
 800c876:	f003 030f 	and.w	r3, r3, #15
 800c87a:	490a      	ldr	r1, [pc, #40]	; (800c8a4 <HAL_RCC_ClockConfig+0x1c0>)
 800c87c:	5ccb      	ldrb	r3, [r1, r3]
 800c87e:	fa22 f303 	lsr.w	r3, r2, r3
 800c882:	4a09      	ldr	r2, [pc, #36]	; (800c8a8 <HAL_RCC_ClockConfig+0x1c4>)
 800c884:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c886:	4b09      	ldr	r3, [pc, #36]	; (800c8ac <HAL_RCC_ClockConfig+0x1c8>)
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7fd fa12 	bl	8009cb4 <HAL_InitTick>

  return HAL_OK;
 800c890:	2300      	movs	r3, #0
}
 800c892:	4618      	mov	r0, r3
 800c894:	3710      	adds	r7, #16
 800c896:	46bd      	mov	sp, r7
 800c898:	bd80      	pop	{r7, pc}
 800c89a:	bf00      	nop
 800c89c:	40023c00 	.word	0x40023c00
 800c8a0:	40023800 	.word	0x40023800
 800c8a4:	0800fb48 	.word	0x0800fb48
 800c8a8:	20000304 	.word	0x20000304
 800c8ac:	20000308 	.word	0x20000308

0800c8b0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800c8b0:	b480      	push	{r7}
 800c8b2:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800c8b4:	4b03      	ldr	r3, [pc, #12]	; (800c8c4 <HAL_RCC_EnableCSS+0x14>)
 800c8b6:	2201      	movs	r2, #1
 800c8b8:	601a      	str	r2, [r3, #0]
}
 800c8ba:	bf00      	nop
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	4247004c 	.word	0x4247004c

0800c8c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c8c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c8cc:	b094      	sub	sp, #80	; 0x50
 800c8ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	647b      	str	r3, [r7, #68]	; 0x44
 800c8d4:	2300      	movs	r3, #0
 800c8d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c8d8:	2300      	movs	r3, #0
 800c8da:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800c8dc:	2300      	movs	r3, #0
 800c8de:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c8e0:	4b79      	ldr	r3, [pc, #484]	; (800cac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800c8e2:	689b      	ldr	r3, [r3, #8]
 800c8e4:	f003 030c 	and.w	r3, r3, #12
 800c8e8:	2b08      	cmp	r3, #8
 800c8ea:	d00d      	beq.n	800c908 <HAL_RCC_GetSysClockFreq+0x40>
 800c8ec:	2b08      	cmp	r3, #8
 800c8ee:	f200 80e1 	bhi.w	800cab4 <HAL_RCC_GetSysClockFreq+0x1ec>
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d002      	beq.n	800c8fc <HAL_RCC_GetSysClockFreq+0x34>
 800c8f6:	2b04      	cmp	r3, #4
 800c8f8:	d003      	beq.n	800c902 <HAL_RCC_GetSysClockFreq+0x3a>
 800c8fa:	e0db      	b.n	800cab4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c8fc:	4b73      	ldr	r3, [pc, #460]	; (800cacc <HAL_RCC_GetSysClockFreq+0x204>)
 800c8fe:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800c900:	e0db      	b.n	800caba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c902:	4b73      	ldr	r3, [pc, #460]	; (800cad0 <HAL_RCC_GetSysClockFreq+0x208>)
 800c904:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800c906:	e0d8      	b.n	800caba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c908:	4b6f      	ldr	r3, [pc, #444]	; (800cac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800c90a:	685b      	ldr	r3, [r3, #4]
 800c90c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c910:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c912:	4b6d      	ldr	r3, [pc, #436]	; (800cac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800c914:	685b      	ldr	r3, [r3, #4]
 800c916:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d063      	beq.n	800c9e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c91e:	4b6a      	ldr	r3, [pc, #424]	; (800cac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800c920:	685b      	ldr	r3, [r3, #4]
 800c922:	099b      	lsrs	r3, r3, #6
 800c924:	2200      	movs	r2, #0
 800c926:	63bb      	str	r3, [r7, #56]	; 0x38
 800c928:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c92a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c92c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c930:	633b      	str	r3, [r7, #48]	; 0x30
 800c932:	2300      	movs	r3, #0
 800c934:	637b      	str	r3, [r7, #52]	; 0x34
 800c936:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c93a:	4622      	mov	r2, r4
 800c93c:	462b      	mov	r3, r5
 800c93e:	f04f 0000 	mov.w	r0, #0
 800c942:	f04f 0100 	mov.w	r1, #0
 800c946:	0159      	lsls	r1, r3, #5
 800c948:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c94c:	0150      	lsls	r0, r2, #5
 800c94e:	4602      	mov	r2, r0
 800c950:	460b      	mov	r3, r1
 800c952:	4621      	mov	r1, r4
 800c954:	1a51      	subs	r1, r2, r1
 800c956:	6139      	str	r1, [r7, #16]
 800c958:	4629      	mov	r1, r5
 800c95a:	eb63 0301 	sbc.w	r3, r3, r1
 800c95e:	617b      	str	r3, [r7, #20]
 800c960:	f04f 0200 	mov.w	r2, #0
 800c964:	f04f 0300 	mov.w	r3, #0
 800c968:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c96c:	4659      	mov	r1, fp
 800c96e:	018b      	lsls	r3, r1, #6
 800c970:	4651      	mov	r1, sl
 800c972:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c976:	4651      	mov	r1, sl
 800c978:	018a      	lsls	r2, r1, #6
 800c97a:	4651      	mov	r1, sl
 800c97c:	ebb2 0801 	subs.w	r8, r2, r1
 800c980:	4659      	mov	r1, fp
 800c982:	eb63 0901 	sbc.w	r9, r3, r1
 800c986:	f04f 0200 	mov.w	r2, #0
 800c98a:	f04f 0300 	mov.w	r3, #0
 800c98e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c992:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c996:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c99a:	4690      	mov	r8, r2
 800c99c:	4699      	mov	r9, r3
 800c99e:	4623      	mov	r3, r4
 800c9a0:	eb18 0303 	adds.w	r3, r8, r3
 800c9a4:	60bb      	str	r3, [r7, #8]
 800c9a6:	462b      	mov	r3, r5
 800c9a8:	eb49 0303 	adc.w	r3, r9, r3
 800c9ac:	60fb      	str	r3, [r7, #12]
 800c9ae:	f04f 0200 	mov.w	r2, #0
 800c9b2:	f04f 0300 	mov.w	r3, #0
 800c9b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800c9ba:	4629      	mov	r1, r5
 800c9bc:	024b      	lsls	r3, r1, #9
 800c9be:	4621      	mov	r1, r4
 800c9c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c9c4:	4621      	mov	r1, r4
 800c9c6:	024a      	lsls	r2, r1, #9
 800c9c8:	4610      	mov	r0, r2
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c9ce:	2200      	movs	r2, #0
 800c9d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c9d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c9d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c9d8:	f7f4 f8d8 	bl	8000b8c <__aeabi_uldivmod>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	460b      	mov	r3, r1
 800c9e0:	4613      	mov	r3, r2
 800c9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c9e4:	e058      	b.n	800ca98 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c9e6:	4b38      	ldr	r3, [pc, #224]	; (800cac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800c9e8:	685b      	ldr	r3, [r3, #4]
 800c9ea:	099b      	lsrs	r3, r3, #6
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	4611      	mov	r1, r2
 800c9f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c9f6:	623b      	str	r3, [r7, #32]
 800c9f8:	2300      	movs	r3, #0
 800c9fa:	627b      	str	r3, [r7, #36]	; 0x24
 800c9fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800ca00:	4642      	mov	r2, r8
 800ca02:	464b      	mov	r3, r9
 800ca04:	f04f 0000 	mov.w	r0, #0
 800ca08:	f04f 0100 	mov.w	r1, #0
 800ca0c:	0159      	lsls	r1, r3, #5
 800ca0e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800ca12:	0150      	lsls	r0, r2, #5
 800ca14:	4602      	mov	r2, r0
 800ca16:	460b      	mov	r3, r1
 800ca18:	4641      	mov	r1, r8
 800ca1a:	ebb2 0a01 	subs.w	sl, r2, r1
 800ca1e:	4649      	mov	r1, r9
 800ca20:	eb63 0b01 	sbc.w	fp, r3, r1
 800ca24:	f04f 0200 	mov.w	r2, #0
 800ca28:	f04f 0300 	mov.w	r3, #0
 800ca2c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800ca30:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800ca34:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800ca38:	ebb2 040a 	subs.w	r4, r2, sl
 800ca3c:	eb63 050b 	sbc.w	r5, r3, fp
 800ca40:	f04f 0200 	mov.w	r2, #0
 800ca44:	f04f 0300 	mov.w	r3, #0
 800ca48:	00eb      	lsls	r3, r5, #3
 800ca4a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800ca4e:	00e2      	lsls	r2, r4, #3
 800ca50:	4614      	mov	r4, r2
 800ca52:	461d      	mov	r5, r3
 800ca54:	4643      	mov	r3, r8
 800ca56:	18e3      	adds	r3, r4, r3
 800ca58:	603b      	str	r3, [r7, #0]
 800ca5a:	464b      	mov	r3, r9
 800ca5c:	eb45 0303 	adc.w	r3, r5, r3
 800ca60:	607b      	str	r3, [r7, #4]
 800ca62:	f04f 0200 	mov.w	r2, #0
 800ca66:	f04f 0300 	mov.w	r3, #0
 800ca6a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800ca6e:	4629      	mov	r1, r5
 800ca70:	028b      	lsls	r3, r1, #10
 800ca72:	4621      	mov	r1, r4
 800ca74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800ca78:	4621      	mov	r1, r4
 800ca7a:	028a      	lsls	r2, r1, #10
 800ca7c:	4610      	mov	r0, r2
 800ca7e:	4619      	mov	r1, r3
 800ca80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ca82:	2200      	movs	r2, #0
 800ca84:	61bb      	str	r3, [r7, #24]
 800ca86:	61fa      	str	r2, [r7, #28]
 800ca88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ca8c:	f7f4 f87e 	bl	8000b8c <__aeabi_uldivmod>
 800ca90:	4602      	mov	r2, r0
 800ca92:	460b      	mov	r3, r1
 800ca94:	4613      	mov	r3, r2
 800ca96:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ca98:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <HAL_RCC_GetSysClockFreq+0x200>)
 800ca9a:	685b      	ldr	r3, [r3, #4]
 800ca9c:	0c1b      	lsrs	r3, r3, #16
 800ca9e:	f003 0303 	and.w	r3, r3, #3
 800caa2:	3301      	adds	r3, #1
 800caa4:	005b      	lsls	r3, r3, #1
 800caa6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800caa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800caaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800caac:	fbb2 f3f3 	udiv	r3, r2, r3
 800cab0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cab2:	e002      	b.n	800caba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800cab4:	4b05      	ldr	r3, [pc, #20]	; (800cacc <HAL_RCC_GetSysClockFreq+0x204>)
 800cab6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800cab8:	bf00      	nop
    }
  }
  return sysclockfreq;
 800caba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800cabc:	4618      	mov	r0, r3
 800cabe:	3750      	adds	r7, #80	; 0x50
 800cac0:	46bd      	mov	sp, r7
 800cac2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cac6:	bf00      	nop
 800cac8:	40023800 	.word	0x40023800
 800cacc:	00f42400 	.word	0x00f42400
 800cad0:	007a1200 	.word	0x007a1200

0800cad4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cad4:	b480      	push	{r7}
 800cad6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cad8:	4b03      	ldr	r3, [pc, #12]	; (800cae8 <HAL_RCC_GetHCLKFreq+0x14>)
 800cada:	681b      	ldr	r3, [r3, #0]
}
 800cadc:	4618      	mov	r0, r3
 800cade:	46bd      	mov	sp, r7
 800cae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae4:	4770      	bx	lr
 800cae6:	bf00      	nop
 800cae8:	20000304 	.word	0x20000304

0800caec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800caf0:	f7ff fff0 	bl	800cad4 <HAL_RCC_GetHCLKFreq>
 800caf4:	4602      	mov	r2, r0
 800caf6:	4b05      	ldr	r3, [pc, #20]	; (800cb0c <HAL_RCC_GetPCLK1Freq+0x20>)
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	0a9b      	lsrs	r3, r3, #10
 800cafc:	f003 0307 	and.w	r3, r3, #7
 800cb00:	4903      	ldr	r1, [pc, #12]	; (800cb10 <HAL_RCC_GetPCLK1Freq+0x24>)
 800cb02:	5ccb      	ldrb	r3, [r1, r3]
 800cb04:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb08:	4618      	mov	r0, r3
 800cb0a:	bd80      	pop	{r7, pc}
 800cb0c:	40023800 	.word	0x40023800
 800cb10:	0800fb58 	.word	0x0800fb58

0800cb14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800cb18:	f7ff ffdc 	bl	800cad4 <HAL_RCC_GetHCLKFreq>
 800cb1c:	4602      	mov	r2, r0
 800cb1e:	4b05      	ldr	r3, [pc, #20]	; (800cb34 <HAL_RCC_GetPCLK2Freq+0x20>)
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	0b5b      	lsrs	r3, r3, #13
 800cb24:	f003 0307 	and.w	r3, r3, #7
 800cb28:	4903      	ldr	r1, [pc, #12]	; (800cb38 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cb2a:	5ccb      	ldrb	r3, [r1, r3]
 800cb2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	40023800 	.word	0x40023800
 800cb38:	0800fb58 	.word	0x0800fb58

0800cb3c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800cb40:	4b06      	ldr	r3, [pc, #24]	; (800cb5c <HAL_RCC_NMI_IRQHandler+0x20>)
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb48:	2b80      	cmp	r3, #128	; 0x80
 800cb4a:	d104      	bne.n	800cb56 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800cb4c:	f000 f80a 	bl	800cb64 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800cb50:	4b03      	ldr	r3, [pc, #12]	; (800cb60 <HAL_RCC_NMI_IRQHandler+0x24>)
 800cb52:	2280      	movs	r2, #128	; 0x80
 800cb54:	701a      	strb	r2, [r3, #0]
  }
}
 800cb56:	bf00      	nop
 800cb58:	bd80      	pop	{r7, pc}
 800cb5a:	bf00      	nop
 800cb5c:	40023800 	.word	0x40023800
 800cb60:	4002380e 	.word	0x4002380e

0800cb64 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800cb64:	b480      	push	{r7}
 800cb66:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800cb68:	bf00      	nop
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb70:	4770      	bx	lr

0800cb72 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cb72:	b580      	push	{r7, lr}
 800cb74:	b082      	sub	sp, #8
 800cb76:	af00      	add	r7, sp, #0
 800cb78:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d101      	bne.n	800cb84 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e041      	b.n	800cc08 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cb8a:	b2db      	uxtb	r3, r3
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d106      	bne.n	800cb9e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f7fc fccf 	bl	800953c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2202      	movs	r2, #2
 800cba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	3304      	adds	r3, #4
 800cbae:	4619      	mov	r1, r3
 800cbb0:	4610      	mov	r0, r2
 800cbb2:	f000 fc8f 	bl	800d4d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2201      	movs	r2, #1
 800cbba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2201      	movs	r2, #1
 800cbc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	2201      	movs	r2, #1
 800cbca:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2201      	movs	r2, #1
 800cbda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2201      	movs	r2, #1
 800cc02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cc06:	2300      	movs	r3, #0
}
 800cc08:	4618      	mov	r0, r3
 800cc0a:	3708      	adds	r7, #8
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	bd80      	pop	{r7, pc}

0800cc10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cc10:	b480      	push	{r7}
 800cc12:	b085      	sub	sp, #20
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc1e:	b2db      	uxtb	r3, r3
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d001      	beq.n	800cc28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	e04e      	b.n	800ccc6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2202      	movs	r2, #2
 800cc2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	68da      	ldr	r2, [r3, #12]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	f042 0201 	orr.w	r2, r2, #1
 800cc3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4a23      	ldr	r2, [pc, #140]	; (800ccd4 <HAL_TIM_Base_Start_IT+0xc4>)
 800cc46:	4293      	cmp	r3, r2
 800cc48:	d022      	beq.n	800cc90 <HAL_TIM_Base_Start_IT+0x80>
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc52:	d01d      	beq.n	800cc90 <HAL_TIM_Base_Start_IT+0x80>
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4a1f      	ldr	r2, [pc, #124]	; (800ccd8 <HAL_TIM_Base_Start_IT+0xc8>)
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	d018      	beq.n	800cc90 <HAL_TIM_Base_Start_IT+0x80>
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	681b      	ldr	r3, [r3, #0]
 800cc62:	4a1e      	ldr	r2, [pc, #120]	; (800ccdc <HAL_TIM_Base_Start_IT+0xcc>)
 800cc64:	4293      	cmp	r3, r2
 800cc66:	d013      	beq.n	800cc90 <HAL_TIM_Base_Start_IT+0x80>
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4a1c      	ldr	r2, [pc, #112]	; (800cce0 <HAL_TIM_Base_Start_IT+0xd0>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d00e      	beq.n	800cc90 <HAL_TIM_Base_Start_IT+0x80>
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	4a1b      	ldr	r2, [pc, #108]	; (800cce4 <HAL_TIM_Base_Start_IT+0xd4>)
 800cc78:	4293      	cmp	r3, r2
 800cc7a:	d009      	beq.n	800cc90 <HAL_TIM_Base_Start_IT+0x80>
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a19      	ldr	r2, [pc, #100]	; (800cce8 <HAL_TIM_Base_Start_IT+0xd8>)
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d004      	beq.n	800cc90 <HAL_TIM_Base_Start_IT+0x80>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	4a18      	ldr	r2, [pc, #96]	; (800ccec <HAL_TIM_Base_Start_IT+0xdc>)
 800cc8c:	4293      	cmp	r3, r2
 800cc8e:	d111      	bne.n	800ccb4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	689b      	ldr	r3, [r3, #8]
 800cc96:	f003 0307 	and.w	r3, r3, #7
 800cc9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	2b06      	cmp	r3, #6
 800cca0:	d010      	beq.n	800ccc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f042 0201 	orr.w	r2, r2, #1
 800ccb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ccb2:	e007      	b.n	800ccc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	681a      	ldr	r2, [r3, #0]
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	f042 0201 	orr.w	r2, r2, #1
 800ccc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ccc4:	2300      	movs	r3, #0
}
 800ccc6:	4618      	mov	r0, r3
 800ccc8:	3714      	adds	r7, #20
 800ccca:	46bd      	mov	sp, r7
 800cccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd0:	4770      	bx	lr
 800ccd2:	bf00      	nop
 800ccd4:	40010000 	.word	0x40010000
 800ccd8:	40000400 	.word	0x40000400
 800ccdc:	40000800 	.word	0x40000800
 800cce0:	40000c00 	.word	0x40000c00
 800cce4:	40010400 	.word	0x40010400
 800cce8:	40014000 	.word	0x40014000
 800ccec:	40001800 	.word	0x40001800

0800ccf0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ccf0:	b480      	push	{r7}
 800ccf2:	b083      	sub	sp, #12
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	68da      	ldr	r2, [r3, #12]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	f022 0201 	bic.w	r2, r2, #1
 800cd06:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	6a1a      	ldr	r2, [r3, #32]
 800cd0e:	f241 1311 	movw	r3, #4369	; 0x1111
 800cd12:	4013      	ands	r3, r2
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10f      	bne.n	800cd38 <HAL_TIM_Base_Stop_IT+0x48>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	6a1a      	ldr	r2, [r3, #32]
 800cd1e:	f240 4344 	movw	r3, #1092	; 0x444
 800cd22:	4013      	ands	r3, r2
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d107      	bne.n	800cd38 <HAL_TIM_Base_Stop_IT+0x48>
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	681a      	ldr	r2, [r3, #0]
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f022 0201 	bic.w	r2, r2, #1
 800cd36:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2201      	movs	r2, #1
 800cd3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800cd40:	2300      	movs	r3, #0
}
 800cd42:	4618      	mov	r0, r3
 800cd44:	370c      	adds	r7, #12
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr

0800cd4e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800cd4e:	b580      	push	{r7, lr}
 800cd50:	b082      	sub	sp, #8
 800cd52:	af00      	add	r7, sp, #0
 800cd54:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d101      	bne.n	800cd60 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e041      	b.n	800cde4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cd66:	b2db      	uxtb	r3, r3
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d106      	bne.n	800cd7a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2200      	movs	r2, #0
 800cd70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f000 f839 	bl	800cdec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	2202      	movs	r2, #2
 800cd7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681a      	ldr	r2, [r3, #0]
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	3304      	adds	r3, #4
 800cd8a:	4619      	mov	r1, r3
 800cd8c:	4610      	mov	r0, r2
 800cd8e:	f000 fba1 	bl	800d4d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	2201      	movs	r2, #1
 800cd96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	2201      	movs	r2, #1
 800cda6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2201      	movs	r2, #1
 800cdae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	2201      	movs	r2, #1
 800cdb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2201      	movs	r2, #1
 800cdc6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2201      	movs	r2, #1
 800cdce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2201      	movs	r2, #1
 800cdde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cde2:	2300      	movs	r3, #0
}
 800cde4:	4618      	mov	r0, r3
 800cde6:	3708      	adds	r7, #8
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd80      	pop	{r7, pc}

0800cdec <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b083      	sub	sp, #12
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cdf4:	bf00      	nop
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d109      	bne.n	800ce24 <HAL_TIM_PWM_Start+0x24>
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ce16:	b2db      	uxtb	r3, r3
 800ce18:	2b01      	cmp	r3, #1
 800ce1a:	bf14      	ite	ne
 800ce1c:	2301      	movne	r3, #1
 800ce1e:	2300      	moveq	r3, #0
 800ce20:	b2db      	uxtb	r3, r3
 800ce22:	e022      	b.n	800ce6a <HAL_TIM_PWM_Start+0x6a>
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	2b04      	cmp	r3, #4
 800ce28:	d109      	bne.n	800ce3e <HAL_TIM_PWM_Start+0x3e>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	2b01      	cmp	r3, #1
 800ce34:	bf14      	ite	ne
 800ce36:	2301      	movne	r3, #1
 800ce38:	2300      	moveq	r3, #0
 800ce3a:	b2db      	uxtb	r3, r3
 800ce3c:	e015      	b.n	800ce6a <HAL_TIM_PWM_Start+0x6a>
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	2b08      	cmp	r3, #8
 800ce42:	d109      	bne.n	800ce58 <HAL_TIM_PWM_Start+0x58>
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ce4a:	b2db      	uxtb	r3, r3
 800ce4c:	2b01      	cmp	r3, #1
 800ce4e:	bf14      	ite	ne
 800ce50:	2301      	movne	r3, #1
 800ce52:	2300      	moveq	r3, #0
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	e008      	b.n	800ce6a <HAL_TIM_PWM_Start+0x6a>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ce5e:	b2db      	uxtb	r3, r3
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	bf14      	ite	ne
 800ce64:	2301      	movne	r3, #1
 800ce66:	2300      	moveq	r3, #0
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800ce6e:	2301      	movs	r3, #1
 800ce70:	e07c      	b.n	800cf6c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ce72:	683b      	ldr	r3, [r7, #0]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d104      	bne.n	800ce82 <HAL_TIM_PWM_Start+0x82>
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2202      	movs	r2, #2
 800ce7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ce80:	e013      	b.n	800ceaa <HAL_TIM_PWM_Start+0xaa>
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	2b04      	cmp	r3, #4
 800ce86:	d104      	bne.n	800ce92 <HAL_TIM_PWM_Start+0x92>
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	2202      	movs	r2, #2
 800ce8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ce90:	e00b      	b.n	800ceaa <HAL_TIM_PWM_Start+0xaa>
 800ce92:	683b      	ldr	r3, [r7, #0]
 800ce94:	2b08      	cmp	r3, #8
 800ce96:	d104      	bne.n	800cea2 <HAL_TIM_PWM_Start+0xa2>
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2202      	movs	r2, #2
 800ce9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cea0:	e003      	b.n	800ceaa <HAL_TIM_PWM_Start+0xaa>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	2202      	movs	r2, #2
 800cea6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	2201      	movs	r2, #1
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f000 fe04 	bl	800dac0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	4a2d      	ldr	r2, [pc, #180]	; (800cf74 <HAL_TIM_PWM_Start+0x174>)
 800cebe:	4293      	cmp	r3, r2
 800cec0:	d004      	beq.n	800cecc <HAL_TIM_PWM_Start+0xcc>
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a2c      	ldr	r2, [pc, #176]	; (800cf78 <HAL_TIM_PWM_Start+0x178>)
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d101      	bne.n	800ced0 <HAL_TIM_PWM_Start+0xd0>
 800cecc:	2301      	movs	r3, #1
 800cece:	e000      	b.n	800ced2 <HAL_TIM_PWM_Start+0xd2>
 800ced0:	2300      	movs	r3, #0
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d007      	beq.n	800cee6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	681b      	ldr	r3, [r3, #0]
 800ceda:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cee4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	681b      	ldr	r3, [r3, #0]
 800ceea:	4a22      	ldr	r2, [pc, #136]	; (800cf74 <HAL_TIM_PWM_Start+0x174>)
 800ceec:	4293      	cmp	r3, r2
 800ceee:	d022      	beq.n	800cf36 <HAL_TIM_PWM_Start+0x136>
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cef8:	d01d      	beq.n	800cf36 <HAL_TIM_PWM_Start+0x136>
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	4a1f      	ldr	r2, [pc, #124]	; (800cf7c <HAL_TIM_PWM_Start+0x17c>)
 800cf00:	4293      	cmp	r3, r2
 800cf02:	d018      	beq.n	800cf36 <HAL_TIM_PWM_Start+0x136>
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	4a1d      	ldr	r2, [pc, #116]	; (800cf80 <HAL_TIM_PWM_Start+0x180>)
 800cf0a:	4293      	cmp	r3, r2
 800cf0c:	d013      	beq.n	800cf36 <HAL_TIM_PWM_Start+0x136>
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	4a1c      	ldr	r2, [pc, #112]	; (800cf84 <HAL_TIM_PWM_Start+0x184>)
 800cf14:	4293      	cmp	r3, r2
 800cf16:	d00e      	beq.n	800cf36 <HAL_TIM_PWM_Start+0x136>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	4a16      	ldr	r2, [pc, #88]	; (800cf78 <HAL_TIM_PWM_Start+0x178>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d009      	beq.n	800cf36 <HAL_TIM_PWM_Start+0x136>
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4a18      	ldr	r2, [pc, #96]	; (800cf88 <HAL_TIM_PWM_Start+0x188>)
 800cf28:	4293      	cmp	r3, r2
 800cf2a:	d004      	beq.n	800cf36 <HAL_TIM_PWM_Start+0x136>
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	4a16      	ldr	r2, [pc, #88]	; (800cf8c <HAL_TIM_PWM_Start+0x18c>)
 800cf32:	4293      	cmp	r3, r2
 800cf34:	d111      	bne.n	800cf5a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	681b      	ldr	r3, [r3, #0]
 800cf3a:	689b      	ldr	r3, [r3, #8]
 800cf3c:	f003 0307 	and.w	r3, r3, #7
 800cf40:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf42:	68fb      	ldr	r3, [r7, #12]
 800cf44:	2b06      	cmp	r3, #6
 800cf46:	d010      	beq.n	800cf6a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	681a      	ldr	r2, [r3, #0]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f042 0201 	orr.w	r2, r2, #1
 800cf56:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cf58:	e007      	b.n	800cf6a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	f042 0201 	orr.w	r2, r2, #1
 800cf68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cf6a:	2300      	movs	r3, #0
}
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	3710      	adds	r7, #16
 800cf70:	46bd      	mov	sp, r7
 800cf72:	bd80      	pop	{r7, pc}
 800cf74:	40010000 	.word	0x40010000
 800cf78:	40010400 	.word	0x40010400
 800cf7c:	40000400 	.word	0x40000400
 800cf80:	40000800 	.word	0x40000800
 800cf84:	40000c00 	.word	0x40000c00
 800cf88:	40014000 	.word	0x40014000
 800cf8c:	40001800 	.word	0x40001800

0800cf90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b084      	sub	sp, #16
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	68db      	ldr	r3, [r3, #12]
 800cf9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	691b      	ldr	r3, [r3, #16]
 800cfa6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	f003 0302 	and.w	r3, r3, #2
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d020      	beq.n	800cff4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	f003 0302 	and.w	r3, r3, #2
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d01b      	beq.n	800cff4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	f06f 0202 	mvn.w	r2, #2
 800cfc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	2201      	movs	r2, #1
 800cfca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	699b      	ldr	r3, [r3, #24]
 800cfd2:	f003 0303 	and.w	r3, r3, #3
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d003      	beq.n	800cfe2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 fa5b 	bl	800d496 <HAL_TIM_IC_CaptureCallback>
 800cfe0:	e005      	b.n	800cfee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 fa4d 	bl	800d482 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fa5e 	bl	800d4aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	2200      	movs	r2, #0
 800cff2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800cff4:	68bb      	ldr	r3, [r7, #8]
 800cff6:	f003 0304 	and.w	r3, r3, #4
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d020      	beq.n	800d040 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	f003 0304 	and.w	r3, r3, #4
 800d004:	2b00      	cmp	r3, #0
 800d006:	d01b      	beq.n	800d040 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	681b      	ldr	r3, [r3, #0]
 800d00c:	f06f 0204 	mvn.w	r2, #4
 800d010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2202      	movs	r2, #2
 800d016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	699b      	ldr	r3, [r3, #24]
 800d01e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d022:	2b00      	cmp	r3, #0
 800d024:	d003      	beq.n	800d02e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d026:	6878      	ldr	r0, [r7, #4]
 800d028:	f000 fa35 	bl	800d496 <HAL_TIM_IC_CaptureCallback>
 800d02c:	e005      	b.n	800d03a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fa27 	bl	800d482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fa38 	bl	800d4aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	f003 0308 	and.w	r3, r3, #8
 800d046:	2b00      	cmp	r3, #0
 800d048:	d020      	beq.n	800d08c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	f003 0308 	and.w	r3, r3, #8
 800d050:	2b00      	cmp	r3, #0
 800d052:	d01b      	beq.n	800d08c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	f06f 0208 	mvn.w	r2, #8
 800d05c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	2204      	movs	r2, #4
 800d062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	69db      	ldr	r3, [r3, #28]
 800d06a:	f003 0303 	and.w	r3, r3, #3
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d003      	beq.n	800d07a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fa0f 	bl	800d496 <HAL_TIM_IC_CaptureCallback>
 800d078:	e005      	b.n	800d086 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 fa01 	bl	800d482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fa12 	bl	800d4aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2200      	movs	r2, #0
 800d08a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d08c:	68bb      	ldr	r3, [r7, #8]
 800d08e:	f003 0310 	and.w	r3, r3, #16
 800d092:	2b00      	cmp	r3, #0
 800d094:	d020      	beq.n	800d0d8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f003 0310 	and.w	r3, r3, #16
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d01b      	beq.n	800d0d8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	f06f 0210 	mvn.w	r2, #16
 800d0a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	2208      	movs	r2, #8
 800d0ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	681b      	ldr	r3, [r3, #0]
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d003      	beq.n	800d0c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 f9e9 	bl	800d496 <HAL_TIM_IC_CaptureCallback>
 800d0c4:	e005      	b.n	800d0d2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d0c6:	6878      	ldr	r0, [r7, #4]
 800d0c8:	f000 f9db 	bl	800d482 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d0cc:	6878      	ldr	r0, [r7, #4]
 800d0ce:	f000 f9ec 	bl	800d4aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	2200      	movs	r2, #0
 800d0d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d0d8:	68bb      	ldr	r3, [r7, #8]
 800d0da:	f003 0301 	and.w	r3, r3, #1
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d00c      	beq.n	800d0fc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	f003 0301 	and.w	r3, r3, #1
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d007      	beq.n	800d0fc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	681b      	ldr	r3, [r3, #0]
 800d0f0:	f06f 0201 	mvn.w	r2, #1
 800d0f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f7fb f836 	bl	8008168 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d0fc:	68bb      	ldr	r3, [r7, #8]
 800d0fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00c      	beq.n	800d120 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d007      	beq.n	800d120 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d11a:	6878      	ldr	r0, [r7, #4]
 800d11c:	f000 fd7c 	bl	800dc18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d120:	68bb      	ldr	r3, [r7, #8]
 800d122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00c      	beq.n	800d144 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d130:	2b00      	cmp	r3, #0
 800d132:	d007      	beq.n	800d144 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d13c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	f000 f9bd 	bl	800d4be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f003 0320 	and.w	r3, r3, #32
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d00c      	beq.n	800d168 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	f003 0320 	and.w	r3, r3, #32
 800d154:	2b00      	cmp	r3, #0
 800d156:	d007      	beq.n	800d168 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	f06f 0220 	mvn.w	r2, #32
 800d160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f000 fd4e 	bl	800dc04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d168:	bf00      	nop
 800d16a:	3710      	adds	r7, #16
 800d16c:	46bd      	mov	sp, r7
 800d16e:	bd80      	pop	{r7, pc}

0800d170 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b086      	sub	sp, #24
 800d174:	af00      	add	r7, sp, #0
 800d176:	60f8      	str	r0, [r7, #12]
 800d178:	60b9      	str	r1, [r7, #8]
 800d17a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d17c:	2300      	movs	r3, #0
 800d17e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d186:	2b01      	cmp	r3, #1
 800d188:	d101      	bne.n	800d18e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d18a:	2302      	movs	r3, #2
 800d18c:	e0ae      	b.n	800d2ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2b0c      	cmp	r3, #12
 800d19a:	f200 809f 	bhi.w	800d2dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d19e:	a201      	add	r2, pc, #4	; (adr r2, 800d1a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d1a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1a4:	0800d1d9 	.word	0x0800d1d9
 800d1a8:	0800d2dd 	.word	0x0800d2dd
 800d1ac:	0800d2dd 	.word	0x0800d2dd
 800d1b0:	0800d2dd 	.word	0x0800d2dd
 800d1b4:	0800d219 	.word	0x0800d219
 800d1b8:	0800d2dd 	.word	0x0800d2dd
 800d1bc:	0800d2dd 	.word	0x0800d2dd
 800d1c0:	0800d2dd 	.word	0x0800d2dd
 800d1c4:	0800d25b 	.word	0x0800d25b
 800d1c8:	0800d2dd 	.word	0x0800d2dd
 800d1cc:	0800d2dd 	.word	0x0800d2dd
 800d1d0:	0800d2dd 	.word	0x0800d2dd
 800d1d4:	0800d29b 	.word	0x0800d29b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	68b9      	ldr	r1, [r7, #8]
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f000 fa24 	bl	800d62c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d1e4:	68fb      	ldr	r3, [r7, #12]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	699a      	ldr	r2, [r3, #24]
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f042 0208 	orr.w	r2, r2, #8
 800d1f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	699a      	ldr	r2, [r3, #24]
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	f022 0204 	bic.w	r2, r2, #4
 800d202:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6999      	ldr	r1, [r3, #24]
 800d20a:	68bb      	ldr	r3, [r7, #8]
 800d20c:	691a      	ldr	r2, [r3, #16]
 800d20e:	68fb      	ldr	r3, [r7, #12]
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	430a      	orrs	r2, r1
 800d214:	619a      	str	r2, [r3, #24]
      break;
 800d216:	e064      	b.n	800d2e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d218:	68fb      	ldr	r3, [r7, #12]
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	68b9      	ldr	r1, [r7, #8]
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 fa74 	bl	800d70c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	699a      	ldr	r2, [r3, #24]
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d232:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	699a      	ldr	r2, [r3, #24]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d242:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6999      	ldr	r1, [r3, #24]
 800d24a:	68bb      	ldr	r3, [r7, #8]
 800d24c:	691b      	ldr	r3, [r3, #16]
 800d24e:	021a      	lsls	r2, r3, #8
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	430a      	orrs	r2, r1
 800d256:	619a      	str	r2, [r3, #24]
      break;
 800d258:	e043      	b.n	800d2e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	68b9      	ldr	r1, [r7, #8]
 800d260:	4618      	mov	r0, r3
 800d262:	f000 fac9 	bl	800d7f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	69da      	ldr	r2, [r3, #28]
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	f042 0208 	orr.w	r2, r2, #8
 800d274:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	69da      	ldr	r2, [r3, #28]
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f022 0204 	bic.w	r2, r2, #4
 800d284:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	69d9      	ldr	r1, [r3, #28]
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	691a      	ldr	r2, [r3, #16]
 800d290:	68fb      	ldr	r3, [r7, #12]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	430a      	orrs	r2, r1
 800d296:	61da      	str	r2, [r3, #28]
      break;
 800d298:	e023      	b.n	800d2e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	68b9      	ldr	r1, [r7, #8]
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f000 fb1d 	bl	800d8e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d2a6:	68fb      	ldr	r3, [r7, #12]
 800d2a8:	681b      	ldr	r3, [r3, #0]
 800d2aa:	69da      	ldr	r2, [r3, #28]
 800d2ac:	68fb      	ldr	r3, [r7, #12]
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d2b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	681b      	ldr	r3, [r3, #0]
 800d2ba:	69da      	ldr	r2, [r3, #28]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d2c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	69d9      	ldr	r1, [r3, #28]
 800d2cc:	68bb      	ldr	r3, [r7, #8]
 800d2ce:	691b      	ldr	r3, [r3, #16]
 800d2d0:	021a      	lsls	r2, r3, #8
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	681b      	ldr	r3, [r3, #0]
 800d2d6:	430a      	orrs	r2, r1
 800d2d8:	61da      	str	r2, [r3, #28]
      break;
 800d2da:	e002      	b.n	800d2e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d2dc:	2301      	movs	r3, #1
 800d2de:	75fb      	strb	r3, [r7, #23]
      break;
 800d2e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	2200      	movs	r2, #0
 800d2e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d2ea:	7dfb      	ldrb	r3, [r7, #23]
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3718      	adds	r7, #24
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}

0800d2f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d2fe:	2300      	movs	r3, #0
 800d300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d101      	bne.n	800d310 <HAL_TIM_ConfigClockSource+0x1c>
 800d30c:	2302      	movs	r3, #2
 800d30e:	e0b4      	b.n	800d47a <HAL_TIM_ConfigClockSource+0x186>
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2202      	movs	r2, #2
 800d31c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d328:	68bb      	ldr	r3, [r7, #8]
 800d32a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d32e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d330:	68bb      	ldr	r3, [r7, #8]
 800d332:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	68ba      	ldr	r2, [r7, #8]
 800d33e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d340:	683b      	ldr	r3, [r7, #0]
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d348:	d03e      	beq.n	800d3c8 <HAL_TIM_ConfigClockSource+0xd4>
 800d34a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d34e:	f200 8087 	bhi.w	800d460 <HAL_TIM_ConfigClockSource+0x16c>
 800d352:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d356:	f000 8086 	beq.w	800d466 <HAL_TIM_ConfigClockSource+0x172>
 800d35a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d35e:	d87f      	bhi.n	800d460 <HAL_TIM_ConfigClockSource+0x16c>
 800d360:	2b70      	cmp	r3, #112	; 0x70
 800d362:	d01a      	beq.n	800d39a <HAL_TIM_ConfigClockSource+0xa6>
 800d364:	2b70      	cmp	r3, #112	; 0x70
 800d366:	d87b      	bhi.n	800d460 <HAL_TIM_ConfigClockSource+0x16c>
 800d368:	2b60      	cmp	r3, #96	; 0x60
 800d36a:	d050      	beq.n	800d40e <HAL_TIM_ConfigClockSource+0x11a>
 800d36c:	2b60      	cmp	r3, #96	; 0x60
 800d36e:	d877      	bhi.n	800d460 <HAL_TIM_ConfigClockSource+0x16c>
 800d370:	2b50      	cmp	r3, #80	; 0x50
 800d372:	d03c      	beq.n	800d3ee <HAL_TIM_ConfigClockSource+0xfa>
 800d374:	2b50      	cmp	r3, #80	; 0x50
 800d376:	d873      	bhi.n	800d460 <HAL_TIM_ConfigClockSource+0x16c>
 800d378:	2b40      	cmp	r3, #64	; 0x40
 800d37a:	d058      	beq.n	800d42e <HAL_TIM_ConfigClockSource+0x13a>
 800d37c:	2b40      	cmp	r3, #64	; 0x40
 800d37e:	d86f      	bhi.n	800d460 <HAL_TIM_ConfigClockSource+0x16c>
 800d380:	2b30      	cmp	r3, #48	; 0x30
 800d382:	d064      	beq.n	800d44e <HAL_TIM_ConfigClockSource+0x15a>
 800d384:	2b30      	cmp	r3, #48	; 0x30
 800d386:	d86b      	bhi.n	800d460 <HAL_TIM_ConfigClockSource+0x16c>
 800d388:	2b20      	cmp	r3, #32
 800d38a:	d060      	beq.n	800d44e <HAL_TIM_ConfigClockSource+0x15a>
 800d38c:	2b20      	cmp	r3, #32
 800d38e:	d867      	bhi.n	800d460 <HAL_TIM_ConfigClockSource+0x16c>
 800d390:	2b00      	cmp	r3, #0
 800d392:	d05c      	beq.n	800d44e <HAL_TIM_ConfigClockSource+0x15a>
 800d394:	2b10      	cmp	r3, #16
 800d396:	d05a      	beq.n	800d44e <HAL_TIM_ConfigClockSource+0x15a>
 800d398:	e062      	b.n	800d460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3a2:	683b      	ldr	r3, [r7, #0]
 800d3a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3a6:	683b      	ldr	r3, [r7, #0]
 800d3a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3aa:	f000 fb69 	bl	800da80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	689b      	ldr	r3, [r3, #8]
 800d3b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d3bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	68ba      	ldr	r2, [r7, #8]
 800d3c4:	609a      	str	r2, [r3, #8]
      break;
 800d3c6:	e04f      	b.n	800d468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d3cc:	683b      	ldr	r3, [r7, #0]
 800d3ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d3d4:	683b      	ldr	r3, [r7, #0]
 800d3d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d3d8:	f000 fb52 	bl	800da80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	689a      	ldr	r2, [r3, #8]
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d3ea:	609a      	str	r2, [r3, #8]
      break;
 800d3ec:	e03c      	b.n	800d468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d3f2:	683b      	ldr	r3, [r7, #0]
 800d3f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d3fa:	461a      	mov	r2, r3
 800d3fc:	f000 fac6 	bl	800d98c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	2150      	movs	r1, #80	; 0x50
 800d406:	4618      	mov	r0, r3
 800d408:	f000 fb1f 	bl	800da4a <TIM_ITRx_SetConfig>
      break;
 800d40c:	e02c      	b.n	800d468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d416:	683b      	ldr	r3, [r7, #0]
 800d418:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d41a:	461a      	mov	r2, r3
 800d41c:	f000 fae5 	bl	800d9ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	2160      	movs	r1, #96	; 0x60
 800d426:	4618      	mov	r0, r3
 800d428:	f000 fb0f 	bl	800da4a <TIM_ITRx_SetConfig>
      break;
 800d42c:	e01c      	b.n	800d468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d43a:	461a      	mov	r2, r3
 800d43c:	f000 faa6 	bl	800d98c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2140      	movs	r1, #64	; 0x40
 800d446:	4618      	mov	r0, r3
 800d448:	f000 faff 	bl	800da4a <TIM_ITRx_SetConfig>
      break;
 800d44c:	e00c      	b.n	800d468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4619      	mov	r1, r3
 800d458:	4610      	mov	r0, r2
 800d45a:	f000 faf6 	bl	800da4a <TIM_ITRx_SetConfig>
      break;
 800d45e:	e003      	b.n	800d468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d460:	2301      	movs	r3, #1
 800d462:	73fb      	strb	r3, [r7, #15]
      break;
 800d464:	e000      	b.n	800d468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	2201      	movs	r2, #1
 800d46c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d478:	7bfb      	ldrb	r3, [r7, #15]
}
 800d47a:	4618      	mov	r0, r3
 800d47c:	3710      	adds	r7, #16
 800d47e:	46bd      	mov	sp, r7
 800d480:	bd80      	pop	{r7, pc}

0800d482 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d482:	b480      	push	{r7}
 800d484:	b083      	sub	sp, #12
 800d486:	af00      	add	r7, sp, #0
 800d488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d48a:	bf00      	nop
 800d48c:	370c      	adds	r7, #12
 800d48e:	46bd      	mov	sp, r7
 800d490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d494:	4770      	bx	lr

0800d496 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d496:	b480      	push	{r7}
 800d498:	b083      	sub	sp, #12
 800d49a:	af00      	add	r7, sp, #0
 800d49c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d49e:	bf00      	nop
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b083      	sub	sp, #12
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d4b2:	bf00      	nop
 800d4b4:	370c      	adds	r7, #12
 800d4b6:	46bd      	mov	sp, r7
 800d4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4bc:	4770      	bx	lr

0800d4be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d4be:	b480      	push	{r7}
 800d4c0:	b083      	sub	sp, #12
 800d4c2:	af00      	add	r7, sp, #0
 800d4c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d4c6:	bf00      	nop
 800d4c8:	370c      	adds	r7, #12
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr
	...

0800d4d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b085      	sub	sp, #20
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	681b      	ldr	r3, [r3, #0]
 800d4e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	4a46      	ldr	r2, [pc, #280]	; (800d600 <TIM_Base_SetConfig+0x12c>)
 800d4e8:	4293      	cmp	r3, r2
 800d4ea:	d013      	beq.n	800d514 <TIM_Base_SetConfig+0x40>
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d4f2:	d00f      	beq.n	800d514 <TIM_Base_SetConfig+0x40>
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	4a43      	ldr	r2, [pc, #268]	; (800d604 <TIM_Base_SetConfig+0x130>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d00b      	beq.n	800d514 <TIM_Base_SetConfig+0x40>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	4a42      	ldr	r2, [pc, #264]	; (800d608 <TIM_Base_SetConfig+0x134>)
 800d500:	4293      	cmp	r3, r2
 800d502:	d007      	beq.n	800d514 <TIM_Base_SetConfig+0x40>
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	4a41      	ldr	r2, [pc, #260]	; (800d60c <TIM_Base_SetConfig+0x138>)
 800d508:	4293      	cmp	r3, r2
 800d50a:	d003      	beq.n	800d514 <TIM_Base_SetConfig+0x40>
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	4a40      	ldr	r2, [pc, #256]	; (800d610 <TIM_Base_SetConfig+0x13c>)
 800d510:	4293      	cmp	r3, r2
 800d512:	d108      	bne.n	800d526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d51a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	4313      	orrs	r3, r2
 800d524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	4a35      	ldr	r2, [pc, #212]	; (800d600 <TIM_Base_SetConfig+0x12c>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d02b      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d534:	d027      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	4a32      	ldr	r2, [pc, #200]	; (800d604 <TIM_Base_SetConfig+0x130>)
 800d53a:	4293      	cmp	r3, r2
 800d53c:	d023      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	4a31      	ldr	r2, [pc, #196]	; (800d608 <TIM_Base_SetConfig+0x134>)
 800d542:	4293      	cmp	r3, r2
 800d544:	d01f      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	4a30      	ldr	r2, [pc, #192]	; (800d60c <TIM_Base_SetConfig+0x138>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d01b      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	4a2f      	ldr	r2, [pc, #188]	; (800d610 <TIM_Base_SetConfig+0x13c>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d017      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	4a2e      	ldr	r2, [pc, #184]	; (800d614 <TIM_Base_SetConfig+0x140>)
 800d55a:	4293      	cmp	r3, r2
 800d55c:	d013      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	4a2d      	ldr	r2, [pc, #180]	; (800d618 <TIM_Base_SetConfig+0x144>)
 800d562:	4293      	cmp	r3, r2
 800d564:	d00f      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	4a2c      	ldr	r2, [pc, #176]	; (800d61c <TIM_Base_SetConfig+0x148>)
 800d56a:	4293      	cmp	r3, r2
 800d56c:	d00b      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	4a2b      	ldr	r2, [pc, #172]	; (800d620 <TIM_Base_SetConfig+0x14c>)
 800d572:	4293      	cmp	r3, r2
 800d574:	d007      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	4a2a      	ldr	r2, [pc, #168]	; (800d624 <TIM_Base_SetConfig+0x150>)
 800d57a:	4293      	cmp	r3, r2
 800d57c:	d003      	beq.n	800d586 <TIM_Base_SetConfig+0xb2>
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	4a29      	ldr	r2, [pc, #164]	; (800d628 <TIM_Base_SetConfig+0x154>)
 800d582:	4293      	cmp	r3, r2
 800d584:	d108      	bne.n	800d598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d58c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	68db      	ldr	r3, [r3, #12]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	4313      	orrs	r3, r2
 800d596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	695b      	ldr	r3, [r3, #20]
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	68fa      	ldr	r2, [r7, #12]
 800d5aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	689a      	ldr	r2, [r3, #8]
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	681a      	ldr	r2, [r3, #0]
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	4a10      	ldr	r2, [pc, #64]	; (800d600 <TIM_Base_SetConfig+0x12c>)
 800d5c0:	4293      	cmp	r3, r2
 800d5c2:	d003      	beq.n	800d5cc <TIM_Base_SetConfig+0xf8>
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	4a12      	ldr	r2, [pc, #72]	; (800d610 <TIM_Base_SetConfig+0x13c>)
 800d5c8:	4293      	cmp	r3, r2
 800d5ca:	d103      	bne.n	800d5d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d5cc:	683b      	ldr	r3, [r7, #0]
 800d5ce:	691a      	ldr	r2, [r3, #16]
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	691b      	ldr	r3, [r3, #16]
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d105      	bne.n	800d5f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	691b      	ldr	r3, [r3, #16]
 800d5ea:	f023 0201 	bic.w	r2, r3, #1
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	611a      	str	r2, [r3, #16]
  }
}
 800d5f2:	bf00      	nop
 800d5f4:	3714      	adds	r7, #20
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5fc:	4770      	bx	lr
 800d5fe:	bf00      	nop
 800d600:	40010000 	.word	0x40010000
 800d604:	40000400 	.word	0x40000400
 800d608:	40000800 	.word	0x40000800
 800d60c:	40000c00 	.word	0x40000c00
 800d610:	40010400 	.word	0x40010400
 800d614:	40014000 	.word	0x40014000
 800d618:	40014400 	.word	0x40014400
 800d61c:	40014800 	.word	0x40014800
 800d620:	40001800 	.word	0x40001800
 800d624:	40001c00 	.word	0x40001c00
 800d628:	40002000 	.word	0x40002000

0800d62c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d62c:	b480      	push	{r7}
 800d62e:	b087      	sub	sp, #28
 800d630:	af00      	add	r7, sp, #0
 800d632:	6078      	str	r0, [r7, #4]
 800d634:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a1b      	ldr	r3, [r3, #32]
 800d63a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	6a1b      	ldr	r3, [r3, #32]
 800d640:	f023 0201 	bic.w	r2, r3, #1
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	685b      	ldr	r3, [r3, #4]
 800d64c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	699b      	ldr	r3, [r3, #24]
 800d652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d654:	68fb      	ldr	r3, [r7, #12]
 800d656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d65a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f023 0303 	bic.w	r3, r3, #3
 800d662:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	f023 0302 	bic.w	r3, r3, #2
 800d674:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	689b      	ldr	r3, [r3, #8]
 800d67a:	697a      	ldr	r2, [r7, #20]
 800d67c:	4313      	orrs	r3, r2
 800d67e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	4a20      	ldr	r2, [pc, #128]	; (800d704 <TIM_OC1_SetConfig+0xd8>)
 800d684:	4293      	cmp	r3, r2
 800d686:	d003      	beq.n	800d690 <TIM_OC1_SetConfig+0x64>
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	4a1f      	ldr	r2, [pc, #124]	; (800d708 <TIM_OC1_SetConfig+0xdc>)
 800d68c:	4293      	cmp	r3, r2
 800d68e:	d10c      	bne.n	800d6aa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d690:	697b      	ldr	r3, [r7, #20]
 800d692:	f023 0308 	bic.w	r3, r3, #8
 800d696:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d698:	683b      	ldr	r3, [r7, #0]
 800d69a:	68db      	ldr	r3, [r3, #12]
 800d69c:	697a      	ldr	r2, [r7, #20]
 800d69e:	4313      	orrs	r3, r2
 800d6a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f023 0304 	bic.w	r3, r3, #4
 800d6a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	4a15      	ldr	r2, [pc, #84]	; (800d704 <TIM_OC1_SetConfig+0xd8>)
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	d003      	beq.n	800d6ba <TIM_OC1_SetConfig+0x8e>
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	4a14      	ldr	r2, [pc, #80]	; (800d708 <TIM_OC1_SetConfig+0xdc>)
 800d6b6:	4293      	cmp	r3, r2
 800d6b8:	d111      	bne.n	800d6de <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d6c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d6c2:	693b      	ldr	r3, [r7, #16]
 800d6c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d6c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d6ca:	683b      	ldr	r3, [r7, #0]
 800d6cc:	695b      	ldr	r3, [r3, #20]
 800d6ce:	693a      	ldr	r2, [r7, #16]
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d6d4:	683b      	ldr	r3, [r7, #0]
 800d6d6:	699b      	ldr	r3, [r3, #24]
 800d6d8:	693a      	ldr	r2, [r7, #16]
 800d6da:	4313      	orrs	r3, r2
 800d6dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	693a      	ldr	r2, [r7, #16]
 800d6e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	68fa      	ldr	r2, [r7, #12]
 800d6e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d6ea:	683b      	ldr	r3, [r7, #0]
 800d6ec:	685a      	ldr	r2, [r3, #4]
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	697a      	ldr	r2, [r7, #20]
 800d6f6:	621a      	str	r2, [r3, #32]
}
 800d6f8:	bf00      	nop
 800d6fa:	371c      	adds	r7, #28
 800d6fc:	46bd      	mov	sp, r7
 800d6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d702:	4770      	bx	lr
 800d704:	40010000 	.word	0x40010000
 800d708:	40010400 	.word	0x40010400

0800d70c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d70c:	b480      	push	{r7}
 800d70e:	b087      	sub	sp, #28
 800d710:	af00      	add	r7, sp, #0
 800d712:	6078      	str	r0, [r7, #4]
 800d714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	6a1b      	ldr	r3, [r3, #32]
 800d71a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	6a1b      	ldr	r3, [r3, #32]
 800d720:	f023 0210 	bic.w	r2, r3, #16
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	685b      	ldr	r3, [r3, #4]
 800d72c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	699b      	ldr	r3, [r3, #24]
 800d732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d73a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d742:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d744:	683b      	ldr	r3, [r7, #0]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	021b      	lsls	r3, r3, #8
 800d74a:	68fa      	ldr	r2, [r7, #12]
 800d74c:	4313      	orrs	r3, r2
 800d74e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	f023 0320 	bic.w	r3, r3, #32
 800d756:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d758:	683b      	ldr	r3, [r7, #0]
 800d75a:	689b      	ldr	r3, [r3, #8]
 800d75c:	011b      	lsls	r3, r3, #4
 800d75e:	697a      	ldr	r2, [r7, #20]
 800d760:	4313      	orrs	r3, r2
 800d762:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d764:	687b      	ldr	r3, [r7, #4]
 800d766:	4a22      	ldr	r2, [pc, #136]	; (800d7f0 <TIM_OC2_SetConfig+0xe4>)
 800d768:	4293      	cmp	r3, r2
 800d76a:	d003      	beq.n	800d774 <TIM_OC2_SetConfig+0x68>
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	4a21      	ldr	r2, [pc, #132]	; (800d7f4 <TIM_OC2_SetConfig+0xe8>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d10d      	bne.n	800d790 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d774:	697b      	ldr	r3, [r7, #20]
 800d776:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d77a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	68db      	ldr	r3, [r3, #12]
 800d780:	011b      	lsls	r3, r3, #4
 800d782:	697a      	ldr	r2, [r7, #20]
 800d784:	4313      	orrs	r3, r2
 800d786:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d78e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	4a17      	ldr	r2, [pc, #92]	; (800d7f0 <TIM_OC2_SetConfig+0xe4>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d003      	beq.n	800d7a0 <TIM_OC2_SetConfig+0x94>
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	4a16      	ldr	r2, [pc, #88]	; (800d7f4 <TIM_OC2_SetConfig+0xe8>)
 800d79c:	4293      	cmp	r3, r2
 800d79e:	d113      	bne.n	800d7c8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d7a0:	693b      	ldr	r3, [r7, #16]
 800d7a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d7a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d7a8:	693b      	ldr	r3, [r7, #16]
 800d7aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d7ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	695b      	ldr	r3, [r3, #20]
 800d7b4:	009b      	lsls	r3, r3, #2
 800d7b6:	693a      	ldr	r2, [r7, #16]
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d7bc:	683b      	ldr	r3, [r7, #0]
 800d7be:	699b      	ldr	r3, [r3, #24]
 800d7c0:	009b      	lsls	r3, r3, #2
 800d7c2:	693a      	ldr	r2, [r7, #16]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	693a      	ldr	r2, [r7, #16]
 800d7cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	68fa      	ldr	r2, [r7, #12]
 800d7d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d7d4:	683b      	ldr	r3, [r7, #0]
 800d7d6:	685a      	ldr	r2, [r3, #4]
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	697a      	ldr	r2, [r7, #20]
 800d7e0:	621a      	str	r2, [r3, #32]
}
 800d7e2:	bf00      	nop
 800d7e4:	371c      	adds	r7, #28
 800d7e6:	46bd      	mov	sp, r7
 800d7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ec:	4770      	bx	lr
 800d7ee:	bf00      	nop
 800d7f0:	40010000 	.word	0x40010000
 800d7f4:	40010400 	.word	0x40010400

0800d7f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d7f8:	b480      	push	{r7}
 800d7fa:	b087      	sub	sp, #28
 800d7fc:	af00      	add	r7, sp, #0
 800d7fe:	6078      	str	r0, [r7, #4]
 800d800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6a1b      	ldr	r3, [r3, #32]
 800d806:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	6a1b      	ldr	r3, [r3, #32]
 800d80c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	685b      	ldr	r3, [r3, #4]
 800d818:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	69db      	ldr	r3, [r3, #28]
 800d81e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	f023 0303 	bic.w	r3, r3, #3
 800d82e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d830:	683b      	ldr	r3, [r7, #0]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	68fa      	ldr	r2, [r7, #12]
 800d836:	4313      	orrs	r3, r2
 800d838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d83a:	697b      	ldr	r3, [r7, #20]
 800d83c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	689b      	ldr	r3, [r3, #8]
 800d846:	021b      	lsls	r3, r3, #8
 800d848:	697a      	ldr	r2, [r7, #20]
 800d84a:	4313      	orrs	r3, r2
 800d84c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	4a21      	ldr	r2, [pc, #132]	; (800d8d8 <TIM_OC3_SetConfig+0xe0>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d003      	beq.n	800d85e <TIM_OC3_SetConfig+0x66>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	4a20      	ldr	r2, [pc, #128]	; (800d8dc <TIM_OC3_SetConfig+0xe4>)
 800d85a:	4293      	cmp	r3, r2
 800d85c:	d10d      	bne.n	800d87a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d85e:	697b      	ldr	r3, [r7, #20]
 800d860:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d864:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d866:	683b      	ldr	r3, [r7, #0]
 800d868:	68db      	ldr	r3, [r3, #12]
 800d86a:	021b      	lsls	r3, r3, #8
 800d86c:	697a      	ldr	r2, [r7, #20]
 800d86e:	4313      	orrs	r3, r2
 800d870:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d878:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	4a16      	ldr	r2, [pc, #88]	; (800d8d8 <TIM_OC3_SetConfig+0xe0>)
 800d87e:	4293      	cmp	r3, r2
 800d880:	d003      	beq.n	800d88a <TIM_OC3_SetConfig+0x92>
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	4a15      	ldr	r2, [pc, #84]	; (800d8dc <TIM_OC3_SetConfig+0xe4>)
 800d886:	4293      	cmp	r3, r2
 800d888:	d113      	bne.n	800d8b2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d88a:	693b      	ldr	r3, [r7, #16]
 800d88c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d892:	693b      	ldr	r3, [r7, #16]
 800d894:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	695b      	ldr	r3, [r3, #20]
 800d89e:	011b      	lsls	r3, r3, #4
 800d8a0:	693a      	ldr	r2, [r7, #16]
 800d8a2:	4313      	orrs	r3, r2
 800d8a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d8a6:	683b      	ldr	r3, [r7, #0]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	011b      	lsls	r3, r3, #4
 800d8ac:	693a      	ldr	r2, [r7, #16]
 800d8ae:	4313      	orrs	r3, r2
 800d8b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	693a      	ldr	r2, [r7, #16]
 800d8b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	68fa      	ldr	r2, [r7, #12]
 800d8bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d8be:	683b      	ldr	r3, [r7, #0]
 800d8c0:	685a      	ldr	r2, [r3, #4]
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	621a      	str	r2, [r3, #32]
}
 800d8cc:	bf00      	nop
 800d8ce:	371c      	adds	r7, #28
 800d8d0:	46bd      	mov	sp, r7
 800d8d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d6:	4770      	bx	lr
 800d8d8:	40010000 	.word	0x40010000
 800d8dc:	40010400 	.word	0x40010400

0800d8e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d8e0:	b480      	push	{r7}
 800d8e2:	b087      	sub	sp, #28
 800d8e4:	af00      	add	r7, sp, #0
 800d8e6:	6078      	str	r0, [r7, #4]
 800d8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	6a1b      	ldr	r3, [r3, #32]
 800d8ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	6a1b      	ldr	r3, [r3, #32]
 800d8f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	69db      	ldr	r3, [r3, #28]
 800d906:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d90e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d910:	68fb      	ldr	r3, [r7, #12]
 800d912:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d916:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d918:	683b      	ldr	r3, [r7, #0]
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	021b      	lsls	r3, r3, #8
 800d91e:	68fa      	ldr	r2, [r7, #12]
 800d920:	4313      	orrs	r3, r2
 800d922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d92a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d92c:	683b      	ldr	r3, [r7, #0]
 800d92e:	689b      	ldr	r3, [r3, #8]
 800d930:	031b      	lsls	r3, r3, #12
 800d932:	693a      	ldr	r2, [r7, #16]
 800d934:	4313      	orrs	r3, r2
 800d936:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	4a12      	ldr	r2, [pc, #72]	; (800d984 <TIM_OC4_SetConfig+0xa4>)
 800d93c:	4293      	cmp	r3, r2
 800d93e:	d003      	beq.n	800d948 <TIM_OC4_SetConfig+0x68>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	4a11      	ldr	r2, [pc, #68]	; (800d988 <TIM_OC4_SetConfig+0xa8>)
 800d944:	4293      	cmp	r3, r2
 800d946:	d109      	bne.n	800d95c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800d94e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	695b      	ldr	r3, [r3, #20]
 800d954:	019b      	lsls	r3, r3, #6
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	4313      	orrs	r3, r2
 800d95a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	697a      	ldr	r2, [r7, #20]
 800d960:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68fa      	ldr	r2, [r7, #12]
 800d966:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d968:	683b      	ldr	r3, [r7, #0]
 800d96a:	685a      	ldr	r2, [r3, #4]
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	693a      	ldr	r2, [r7, #16]
 800d974:	621a      	str	r2, [r3, #32]
}
 800d976:	bf00      	nop
 800d978:	371c      	adds	r7, #28
 800d97a:	46bd      	mov	sp, r7
 800d97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d980:	4770      	bx	lr
 800d982:	bf00      	nop
 800d984:	40010000 	.word	0x40010000
 800d988:	40010400 	.word	0x40010400

0800d98c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b087      	sub	sp, #28
 800d990:	af00      	add	r7, sp, #0
 800d992:	60f8      	str	r0, [r7, #12]
 800d994:	60b9      	str	r1, [r7, #8]
 800d996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6a1b      	ldr	r3, [r3, #32]
 800d99c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	6a1b      	ldr	r3, [r3, #32]
 800d9a2:	f023 0201 	bic.w	r2, r3, #1
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	699b      	ldr	r3, [r3, #24]
 800d9ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800d9b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	011b      	lsls	r3, r3, #4
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	4313      	orrs	r3, r2
 800d9c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d9c2:	697b      	ldr	r3, [r7, #20]
 800d9c4:	f023 030a 	bic.w	r3, r3, #10
 800d9c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d9ca:	697a      	ldr	r2, [r7, #20]
 800d9cc:	68bb      	ldr	r3, [r7, #8]
 800d9ce:	4313      	orrs	r3, r2
 800d9d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	693a      	ldr	r2, [r7, #16]
 800d9d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	621a      	str	r2, [r3, #32]
}
 800d9de:	bf00      	nop
 800d9e0:	371c      	adds	r7, #28
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e8:	4770      	bx	lr

0800d9ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d9ea:	b480      	push	{r7}
 800d9ec:	b087      	sub	sp, #28
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	60f8      	str	r0, [r7, #12]
 800d9f2:	60b9      	str	r1, [r7, #8]
 800d9f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	6a1b      	ldr	r3, [r3, #32]
 800d9fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	6a1b      	ldr	r3, [r3, #32]
 800da00:	f023 0210 	bic.w	r2, r3, #16
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800da0e:	693b      	ldr	r3, [r7, #16]
 800da10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800da14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	031b      	lsls	r3, r3, #12
 800da1a:	693a      	ldr	r2, [r7, #16]
 800da1c:	4313      	orrs	r3, r2
 800da1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800da26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	011b      	lsls	r3, r3, #4
 800da2c:	697a      	ldr	r2, [r7, #20]
 800da2e:	4313      	orrs	r3, r2
 800da30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	693a      	ldr	r2, [r7, #16]
 800da36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	697a      	ldr	r2, [r7, #20]
 800da3c:	621a      	str	r2, [r3, #32]
}
 800da3e:	bf00      	nop
 800da40:	371c      	adds	r7, #28
 800da42:	46bd      	mov	sp, r7
 800da44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da48:	4770      	bx	lr

0800da4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800da4a:	b480      	push	{r7}
 800da4c:	b085      	sub	sp, #20
 800da4e:	af00      	add	r7, sp, #0
 800da50:	6078      	str	r0, [r7, #4]
 800da52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	689b      	ldr	r3, [r3, #8]
 800da58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800da62:	683a      	ldr	r2, [r7, #0]
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	4313      	orrs	r3, r2
 800da68:	f043 0307 	orr.w	r3, r3, #7
 800da6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	68fa      	ldr	r2, [r7, #12]
 800da72:	609a      	str	r2, [r3, #8]
}
 800da74:	bf00      	nop
 800da76:	3714      	adds	r7, #20
 800da78:	46bd      	mov	sp, r7
 800da7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7e:	4770      	bx	lr

0800da80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800da80:	b480      	push	{r7}
 800da82:	b087      	sub	sp, #28
 800da84:	af00      	add	r7, sp, #0
 800da86:	60f8      	str	r0, [r7, #12]
 800da88:	60b9      	str	r1, [r7, #8]
 800da8a:	607a      	str	r2, [r7, #4]
 800da8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800da94:	697b      	ldr	r3, [r7, #20]
 800da96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800da9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	021a      	lsls	r2, r3, #8
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	431a      	orrs	r2, r3
 800daa4:	68bb      	ldr	r3, [r7, #8]
 800daa6:	4313      	orrs	r3, r2
 800daa8:	697a      	ldr	r2, [r7, #20]
 800daaa:	4313      	orrs	r3, r2
 800daac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	697a      	ldr	r2, [r7, #20]
 800dab2:	609a      	str	r2, [r3, #8]
}
 800dab4:	bf00      	nop
 800dab6:	371c      	adds	r7, #28
 800dab8:	46bd      	mov	sp, r7
 800daba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabe:	4770      	bx	lr

0800dac0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b087      	sub	sp, #28
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	60f8      	str	r0, [r7, #12]
 800dac8:	60b9      	str	r1, [r7, #8]
 800daca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dacc:	68bb      	ldr	r3, [r7, #8]
 800dace:	f003 031f 	and.w	r3, r3, #31
 800dad2:	2201      	movs	r2, #1
 800dad4:	fa02 f303 	lsl.w	r3, r2, r3
 800dad8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	6a1a      	ldr	r2, [r3, #32]
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	43db      	mvns	r3, r3
 800dae2:	401a      	ands	r2, r3
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	6a1a      	ldr	r2, [r3, #32]
 800daec:	68bb      	ldr	r3, [r7, #8]
 800daee:	f003 031f 	and.w	r3, r3, #31
 800daf2:	6879      	ldr	r1, [r7, #4]
 800daf4:	fa01 f303 	lsl.w	r3, r1, r3
 800daf8:	431a      	orrs	r2, r3
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	621a      	str	r2, [r3, #32]
}
 800dafe:	bf00      	nop
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr
	...

0800db0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
 800db14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db1c:	2b01      	cmp	r3, #1
 800db1e:	d101      	bne.n	800db24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800db20:	2302      	movs	r3, #2
 800db22:	e05a      	b.n	800dbda <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2201      	movs	r2, #1
 800db28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2202      	movs	r2, #2
 800db30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	689b      	ldr	r3, [r3, #8]
 800db42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800db4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800db4c:	683b      	ldr	r3, [r7, #0]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	4313      	orrs	r3, r2
 800db54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	68fa      	ldr	r2, [r7, #12]
 800db5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a21      	ldr	r2, [pc, #132]	; (800dbe8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800db64:	4293      	cmp	r3, r2
 800db66:	d022      	beq.n	800dbae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800db70:	d01d      	beq.n	800dbae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	4a1d      	ldr	r2, [pc, #116]	; (800dbec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800db78:	4293      	cmp	r3, r2
 800db7a:	d018      	beq.n	800dbae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	4a1b      	ldr	r2, [pc, #108]	; (800dbf0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800db82:	4293      	cmp	r3, r2
 800db84:	d013      	beq.n	800dbae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	4a1a      	ldr	r2, [pc, #104]	; (800dbf4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800db8c:	4293      	cmp	r3, r2
 800db8e:	d00e      	beq.n	800dbae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	4a18      	ldr	r2, [pc, #96]	; (800dbf8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800db96:	4293      	cmp	r3, r2
 800db98:	d009      	beq.n	800dbae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	4a17      	ldr	r2, [pc, #92]	; (800dbfc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dba0:	4293      	cmp	r3, r2
 800dba2:	d004      	beq.n	800dbae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	4a15      	ldr	r2, [pc, #84]	; (800dc00 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dbaa:	4293      	cmp	r3, r2
 800dbac:	d10c      	bne.n	800dbc8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dbae:	68bb      	ldr	r3, [r7, #8]
 800dbb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dbb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	685b      	ldr	r3, [r3, #4]
 800dbba:	68ba      	ldr	r2, [r7, #8]
 800dbbc:	4313      	orrs	r3, r2
 800dbbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	2201      	movs	r2, #1
 800dbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dbd8:	2300      	movs	r3, #0
}
 800dbda:	4618      	mov	r0, r3
 800dbdc:	3714      	adds	r7, #20
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe4:	4770      	bx	lr
 800dbe6:	bf00      	nop
 800dbe8:	40010000 	.word	0x40010000
 800dbec:	40000400 	.word	0x40000400
 800dbf0:	40000800 	.word	0x40000800
 800dbf4:	40000c00 	.word	0x40000c00
 800dbf8:	40010400 	.word	0x40010400
 800dbfc:	40014000 	.word	0x40014000
 800dc00:	40001800 	.word	0x40001800

0800dc04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800dc04:	b480      	push	{r7}
 800dc06:	b083      	sub	sp, #12
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800dc0c:	bf00      	nop
 800dc0e:	370c      	adds	r7, #12
 800dc10:	46bd      	mov	sp, r7
 800dc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc16:	4770      	bx	lr

0800dc18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800dc18:	b480      	push	{r7}
 800dc1a:	b083      	sub	sp, #12
 800dc1c:	af00      	add	r7, sp, #0
 800dc1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800dc20:	bf00      	nop
 800dc22:	370c      	adds	r7, #12
 800dc24:	46bd      	mov	sp, r7
 800dc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2a:	4770      	bx	lr

0800dc2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d101      	bne.n	800dc3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	e042      	b.n	800dcc4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc44:	b2db      	uxtb	r3, r3
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d106      	bne.n	800dc58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f7fb fef8 	bl	8009a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2224      	movs	r2, #36	; 0x24
 800dc5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	68da      	ldr	r2, [r3, #12]
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800dc6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 f82b 	bl	800dccc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	691a      	ldr	r2, [r3, #16]
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800dc84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	681b      	ldr	r3, [r3, #0]
 800dc8a:	695a      	ldr	r2, [r3, #20]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800dc94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	68da      	ldr	r2, [r3, #12]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800dca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	2200      	movs	r2, #0
 800dcaa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	2220      	movs	r2, #32
 800dcb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2220      	movs	r2, #32
 800dcb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800dccc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800dcd0:	b0c0      	sub	sp, #256	; 0x100
 800dcd2:	af00      	add	r7, sp, #0
 800dcd4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dcd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	691b      	ldr	r3, [r3, #16]
 800dce0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800dce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dce8:	68d9      	ldr	r1, [r3, #12]
 800dcea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcee:	681a      	ldr	r2, [r3, #0]
 800dcf0:	ea40 0301 	orr.w	r3, r0, r1
 800dcf4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dcf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dcfa:	689a      	ldr	r2, [r3, #8]
 800dcfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd00:	691b      	ldr	r3, [r3, #16]
 800dd02:	431a      	orrs	r2, r3
 800dd04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd08:	695b      	ldr	r3, [r3, #20]
 800dd0a:	431a      	orrs	r2, r3
 800dd0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd10:	69db      	ldr	r3, [r3, #28]
 800dd12:	4313      	orrs	r3, r2
 800dd14:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800dd18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800dd24:	f021 010c 	bic.w	r1, r1, #12
 800dd28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd2c:	681a      	ldr	r2, [r3, #0]
 800dd2e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800dd32:	430b      	orrs	r3, r1
 800dd34:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800dd36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	695b      	ldr	r3, [r3, #20]
 800dd3e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800dd42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd46:	6999      	ldr	r1, [r3, #24]
 800dd48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd4c:	681a      	ldr	r2, [r3, #0]
 800dd4e:	ea40 0301 	orr.w	r3, r0, r1
 800dd52:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800dd54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd58:	681a      	ldr	r2, [r3, #0]
 800dd5a:	4b8f      	ldr	r3, [pc, #572]	; (800df98 <UART_SetConfig+0x2cc>)
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d005      	beq.n	800dd6c <UART_SetConfig+0xa0>
 800dd60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd64:	681a      	ldr	r2, [r3, #0]
 800dd66:	4b8d      	ldr	r3, [pc, #564]	; (800df9c <UART_SetConfig+0x2d0>)
 800dd68:	429a      	cmp	r2, r3
 800dd6a:	d104      	bne.n	800dd76 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800dd6c:	f7fe fed2 	bl	800cb14 <HAL_RCC_GetPCLK2Freq>
 800dd70:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800dd74:	e003      	b.n	800dd7e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800dd76:	f7fe feb9 	bl	800caec <HAL_RCC_GetPCLK1Freq>
 800dd7a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dd7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dd82:	69db      	ldr	r3, [r3, #28]
 800dd84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dd88:	f040 810c 	bne.w	800dfa4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800dd8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dd90:	2200      	movs	r2, #0
 800dd92:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800dd96:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800dd9a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800dd9e:	4622      	mov	r2, r4
 800dda0:	462b      	mov	r3, r5
 800dda2:	1891      	adds	r1, r2, r2
 800dda4:	65b9      	str	r1, [r7, #88]	; 0x58
 800dda6:	415b      	adcs	r3, r3
 800dda8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ddaa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800ddae:	4621      	mov	r1, r4
 800ddb0:	eb12 0801 	adds.w	r8, r2, r1
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	eb43 0901 	adc.w	r9, r3, r1
 800ddba:	f04f 0200 	mov.w	r2, #0
 800ddbe:	f04f 0300 	mov.w	r3, #0
 800ddc2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800ddc6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800ddca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800ddce:	4690      	mov	r8, r2
 800ddd0:	4699      	mov	r9, r3
 800ddd2:	4623      	mov	r3, r4
 800ddd4:	eb18 0303 	adds.w	r3, r8, r3
 800ddd8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dddc:	462b      	mov	r3, r5
 800ddde:	eb49 0303 	adc.w	r3, r9, r3
 800dde2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dde6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ddea:	685b      	ldr	r3, [r3, #4]
 800ddec:	2200      	movs	r2, #0
 800ddee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800ddf2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800ddf6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800ddfa:	460b      	mov	r3, r1
 800ddfc:	18db      	adds	r3, r3, r3
 800ddfe:	653b      	str	r3, [r7, #80]	; 0x50
 800de00:	4613      	mov	r3, r2
 800de02:	eb42 0303 	adc.w	r3, r2, r3
 800de06:	657b      	str	r3, [r7, #84]	; 0x54
 800de08:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800de0c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800de10:	f7f2 febc 	bl	8000b8c <__aeabi_uldivmod>
 800de14:	4602      	mov	r2, r0
 800de16:	460b      	mov	r3, r1
 800de18:	4b61      	ldr	r3, [pc, #388]	; (800dfa0 <UART_SetConfig+0x2d4>)
 800de1a:	fba3 2302 	umull	r2, r3, r3, r2
 800de1e:	095b      	lsrs	r3, r3, #5
 800de20:	011c      	lsls	r4, r3, #4
 800de22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800de26:	2200      	movs	r2, #0
 800de28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800de2c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800de30:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800de34:	4642      	mov	r2, r8
 800de36:	464b      	mov	r3, r9
 800de38:	1891      	adds	r1, r2, r2
 800de3a:	64b9      	str	r1, [r7, #72]	; 0x48
 800de3c:	415b      	adcs	r3, r3
 800de3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de40:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800de44:	4641      	mov	r1, r8
 800de46:	eb12 0a01 	adds.w	sl, r2, r1
 800de4a:	4649      	mov	r1, r9
 800de4c:	eb43 0b01 	adc.w	fp, r3, r1
 800de50:	f04f 0200 	mov.w	r2, #0
 800de54:	f04f 0300 	mov.w	r3, #0
 800de58:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800de5c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800de60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800de64:	4692      	mov	sl, r2
 800de66:	469b      	mov	fp, r3
 800de68:	4643      	mov	r3, r8
 800de6a:	eb1a 0303 	adds.w	r3, sl, r3
 800de6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800de72:	464b      	mov	r3, r9
 800de74:	eb4b 0303 	adc.w	r3, fp, r3
 800de78:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800de7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800de80:	685b      	ldr	r3, [r3, #4]
 800de82:	2200      	movs	r2, #0
 800de84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800de88:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800de8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800de90:	460b      	mov	r3, r1
 800de92:	18db      	adds	r3, r3, r3
 800de94:	643b      	str	r3, [r7, #64]	; 0x40
 800de96:	4613      	mov	r3, r2
 800de98:	eb42 0303 	adc.w	r3, r2, r3
 800de9c:	647b      	str	r3, [r7, #68]	; 0x44
 800de9e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800dea2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800dea6:	f7f2 fe71 	bl	8000b8c <__aeabi_uldivmod>
 800deaa:	4602      	mov	r2, r0
 800deac:	460b      	mov	r3, r1
 800deae:	4611      	mov	r1, r2
 800deb0:	4b3b      	ldr	r3, [pc, #236]	; (800dfa0 <UART_SetConfig+0x2d4>)
 800deb2:	fba3 2301 	umull	r2, r3, r3, r1
 800deb6:	095b      	lsrs	r3, r3, #5
 800deb8:	2264      	movs	r2, #100	; 0x64
 800deba:	fb02 f303 	mul.w	r3, r2, r3
 800debe:	1acb      	subs	r3, r1, r3
 800dec0:	00db      	lsls	r3, r3, #3
 800dec2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800dec6:	4b36      	ldr	r3, [pc, #216]	; (800dfa0 <UART_SetConfig+0x2d4>)
 800dec8:	fba3 2302 	umull	r2, r3, r3, r2
 800decc:	095b      	lsrs	r3, r3, #5
 800dece:	005b      	lsls	r3, r3, #1
 800ded0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ded4:	441c      	add	r4, r3
 800ded6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800deda:	2200      	movs	r2, #0
 800dedc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800dee0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800dee4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800dee8:	4642      	mov	r2, r8
 800deea:	464b      	mov	r3, r9
 800deec:	1891      	adds	r1, r2, r2
 800deee:	63b9      	str	r1, [r7, #56]	; 0x38
 800def0:	415b      	adcs	r3, r3
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800def4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800def8:	4641      	mov	r1, r8
 800defa:	1851      	adds	r1, r2, r1
 800defc:	6339      	str	r1, [r7, #48]	; 0x30
 800defe:	4649      	mov	r1, r9
 800df00:	414b      	adcs	r3, r1
 800df02:	637b      	str	r3, [r7, #52]	; 0x34
 800df04:	f04f 0200 	mov.w	r2, #0
 800df08:	f04f 0300 	mov.w	r3, #0
 800df0c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800df10:	4659      	mov	r1, fp
 800df12:	00cb      	lsls	r3, r1, #3
 800df14:	4651      	mov	r1, sl
 800df16:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800df1a:	4651      	mov	r1, sl
 800df1c:	00ca      	lsls	r2, r1, #3
 800df1e:	4610      	mov	r0, r2
 800df20:	4619      	mov	r1, r3
 800df22:	4603      	mov	r3, r0
 800df24:	4642      	mov	r2, r8
 800df26:	189b      	adds	r3, r3, r2
 800df28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800df2c:	464b      	mov	r3, r9
 800df2e:	460a      	mov	r2, r1
 800df30:	eb42 0303 	adc.w	r3, r2, r3
 800df34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800df38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	2200      	movs	r2, #0
 800df40:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800df44:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800df48:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800df4c:	460b      	mov	r3, r1
 800df4e:	18db      	adds	r3, r3, r3
 800df50:	62bb      	str	r3, [r7, #40]	; 0x28
 800df52:	4613      	mov	r3, r2
 800df54:	eb42 0303 	adc.w	r3, r2, r3
 800df58:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800df5e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800df62:	f7f2 fe13 	bl	8000b8c <__aeabi_uldivmod>
 800df66:	4602      	mov	r2, r0
 800df68:	460b      	mov	r3, r1
 800df6a:	4b0d      	ldr	r3, [pc, #52]	; (800dfa0 <UART_SetConfig+0x2d4>)
 800df6c:	fba3 1302 	umull	r1, r3, r3, r2
 800df70:	095b      	lsrs	r3, r3, #5
 800df72:	2164      	movs	r1, #100	; 0x64
 800df74:	fb01 f303 	mul.w	r3, r1, r3
 800df78:	1ad3      	subs	r3, r2, r3
 800df7a:	00db      	lsls	r3, r3, #3
 800df7c:	3332      	adds	r3, #50	; 0x32
 800df7e:	4a08      	ldr	r2, [pc, #32]	; (800dfa0 <UART_SetConfig+0x2d4>)
 800df80:	fba2 2303 	umull	r2, r3, r2, r3
 800df84:	095b      	lsrs	r3, r3, #5
 800df86:	f003 0207 	and.w	r2, r3, #7
 800df8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4422      	add	r2, r4
 800df92:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800df94:	e106      	b.n	800e1a4 <UART_SetConfig+0x4d8>
 800df96:	bf00      	nop
 800df98:	40011000 	.word	0x40011000
 800df9c:	40011400 	.word	0x40011400
 800dfa0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800dfa4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800dfa8:	2200      	movs	r2, #0
 800dfaa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dfae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800dfb2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800dfb6:	4642      	mov	r2, r8
 800dfb8:	464b      	mov	r3, r9
 800dfba:	1891      	adds	r1, r2, r2
 800dfbc:	6239      	str	r1, [r7, #32]
 800dfbe:	415b      	adcs	r3, r3
 800dfc0:	627b      	str	r3, [r7, #36]	; 0x24
 800dfc2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800dfc6:	4641      	mov	r1, r8
 800dfc8:	1854      	adds	r4, r2, r1
 800dfca:	4649      	mov	r1, r9
 800dfcc:	eb43 0501 	adc.w	r5, r3, r1
 800dfd0:	f04f 0200 	mov.w	r2, #0
 800dfd4:	f04f 0300 	mov.w	r3, #0
 800dfd8:	00eb      	lsls	r3, r5, #3
 800dfda:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800dfde:	00e2      	lsls	r2, r4, #3
 800dfe0:	4614      	mov	r4, r2
 800dfe2:	461d      	mov	r5, r3
 800dfe4:	4643      	mov	r3, r8
 800dfe6:	18e3      	adds	r3, r4, r3
 800dfe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dfec:	464b      	mov	r3, r9
 800dfee:	eb45 0303 	adc.w	r3, r5, r3
 800dff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dffa:	685b      	ldr	r3, [r3, #4]
 800dffc:	2200      	movs	r2, #0
 800dffe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e002:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e006:	f04f 0200 	mov.w	r2, #0
 800e00a:	f04f 0300 	mov.w	r3, #0
 800e00e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e012:	4629      	mov	r1, r5
 800e014:	008b      	lsls	r3, r1, #2
 800e016:	4621      	mov	r1, r4
 800e018:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e01c:	4621      	mov	r1, r4
 800e01e:	008a      	lsls	r2, r1, #2
 800e020:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e024:	f7f2 fdb2 	bl	8000b8c <__aeabi_uldivmod>
 800e028:	4602      	mov	r2, r0
 800e02a:	460b      	mov	r3, r1
 800e02c:	4b60      	ldr	r3, [pc, #384]	; (800e1b0 <UART_SetConfig+0x4e4>)
 800e02e:	fba3 2302 	umull	r2, r3, r3, r2
 800e032:	095b      	lsrs	r3, r3, #5
 800e034:	011c      	lsls	r4, r3, #4
 800e036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e03a:	2200      	movs	r2, #0
 800e03c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e040:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e044:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e048:	4642      	mov	r2, r8
 800e04a:	464b      	mov	r3, r9
 800e04c:	1891      	adds	r1, r2, r2
 800e04e:	61b9      	str	r1, [r7, #24]
 800e050:	415b      	adcs	r3, r3
 800e052:	61fb      	str	r3, [r7, #28]
 800e054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e058:	4641      	mov	r1, r8
 800e05a:	1851      	adds	r1, r2, r1
 800e05c:	6139      	str	r1, [r7, #16]
 800e05e:	4649      	mov	r1, r9
 800e060:	414b      	adcs	r3, r1
 800e062:	617b      	str	r3, [r7, #20]
 800e064:	f04f 0200 	mov.w	r2, #0
 800e068:	f04f 0300 	mov.w	r3, #0
 800e06c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e070:	4659      	mov	r1, fp
 800e072:	00cb      	lsls	r3, r1, #3
 800e074:	4651      	mov	r1, sl
 800e076:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e07a:	4651      	mov	r1, sl
 800e07c:	00ca      	lsls	r2, r1, #3
 800e07e:	4610      	mov	r0, r2
 800e080:	4619      	mov	r1, r3
 800e082:	4603      	mov	r3, r0
 800e084:	4642      	mov	r2, r8
 800e086:	189b      	adds	r3, r3, r2
 800e088:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e08c:	464b      	mov	r3, r9
 800e08e:	460a      	mov	r2, r1
 800e090:	eb42 0303 	adc.w	r3, r2, r3
 800e094:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e09c:	685b      	ldr	r3, [r3, #4]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800e0a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e0a4:	f04f 0200 	mov.w	r2, #0
 800e0a8:	f04f 0300 	mov.w	r3, #0
 800e0ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e0b0:	4649      	mov	r1, r9
 800e0b2:	008b      	lsls	r3, r1, #2
 800e0b4:	4641      	mov	r1, r8
 800e0b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e0ba:	4641      	mov	r1, r8
 800e0bc:	008a      	lsls	r2, r1, #2
 800e0be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e0c2:	f7f2 fd63 	bl	8000b8c <__aeabi_uldivmod>
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4611      	mov	r1, r2
 800e0cc:	4b38      	ldr	r3, [pc, #224]	; (800e1b0 <UART_SetConfig+0x4e4>)
 800e0ce:	fba3 2301 	umull	r2, r3, r3, r1
 800e0d2:	095b      	lsrs	r3, r3, #5
 800e0d4:	2264      	movs	r2, #100	; 0x64
 800e0d6:	fb02 f303 	mul.w	r3, r2, r3
 800e0da:	1acb      	subs	r3, r1, r3
 800e0dc:	011b      	lsls	r3, r3, #4
 800e0de:	3332      	adds	r3, #50	; 0x32
 800e0e0:	4a33      	ldr	r2, [pc, #204]	; (800e1b0 <UART_SetConfig+0x4e4>)
 800e0e2:	fba2 2303 	umull	r2, r3, r2, r3
 800e0e6:	095b      	lsrs	r3, r3, #5
 800e0e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0ec:	441c      	add	r4, r3
 800e0ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e0f2:	2200      	movs	r2, #0
 800e0f4:	673b      	str	r3, [r7, #112]	; 0x70
 800e0f6:	677a      	str	r2, [r7, #116]	; 0x74
 800e0f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e0fc:	4642      	mov	r2, r8
 800e0fe:	464b      	mov	r3, r9
 800e100:	1891      	adds	r1, r2, r2
 800e102:	60b9      	str	r1, [r7, #8]
 800e104:	415b      	adcs	r3, r3
 800e106:	60fb      	str	r3, [r7, #12]
 800e108:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e10c:	4641      	mov	r1, r8
 800e10e:	1851      	adds	r1, r2, r1
 800e110:	6039      	str	r1, [r7, #0]
 800e112:	4649      	mov	r1, r9
 800e114:	414b      	adcs	r3, r1
 800e116:	607b      	str	r3, [r7, #4]
 800e118:	f04f 0200 	mov.w	r2, #0
 800e11c:	f04f 0300 	mov.w	r3, #0
 800e120:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e124:	4659      	mov	r1, fp
 800e126:	00cb      	lsls	r3, r1, #3
 800e128:	4651      	mov	r1, sl
 800e12a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e12e:	4651      	mov	r1, sl
 800e130:	00ca      	lsls	r2, r1, #3
 800e132:	4610      	mov	r0, r2
 800e134:	4619      	mov	r1, r3
 800e136:	4603      	mov	r3, r0
 800e138:	4642      	mov	r2, r8
 800e13a:	189b      	adds	r3, r3, r2
 800e13c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e13e:	464b      	mov	r3, r9
 800e140:	460a      	mov	r2, r1
 800e142:	eb42 0303 	adc.w	r3, r2, r3
 800e146:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	2200      	movs	r2, #0
 800e150:	663b      	str	r3, [r7, #96]	; 0x60
 800e152:	667a      	str	r2, [r7, #100]	; 0x64
 800e154:	f04f 0200 	mov.w	r2, #0
 800e158:	f04f 0300 	mov.w	r3, #0
 800e15c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e160:	4649      	mov	r1, r9
 800e162:	008b      	lsls	r3, r1, #2
 800e164:	4641      	mov	r1, r8
 800e166:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e16a:	4641      	mov	r1, r8
 800e16c:	008a      	lsls	r2, r1, #2
 800e16e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e172:	f7f2 fd0b 	bl	8000b8c <__aeabi_uldivmod>
 800e176:	4602      	mov	r2, r0
 800e178:	460b      	mov	r3, r1
 800e17a:	4b0d      	ldr	r3, [pc, #52]	; (800e1b0 <UART_SetConfig+0x4e4>)
 800e17c:	fba3 1302 	umull	r1, r3, r3, r2
 800e180:	095b      	lsrs	r3, r3, #5
 800e182:	2164      	movs	r1, #100	; 0x64
 800e184:	fb01 f303 	mul.w	r3, r1, r3
 800e188:	1ad3      	subs	r3, r2, r3
 800e18a:	011b      	lsls	r3, r3, #4
 800e18c:	3332      	adds	r3, #50	; 0x32
 800e18e:	4a08      	ldr	r2, [pc, #32]	; (800e1b0 <UART_SetConfig+0x4e4>)
 800e190:	fba2 2303 	umull	r2, r3, r2, r3
 800e194:	095b      	lsrs	r3, r3, #5
 800e196:	f003 020f 	and.w	r2, r3, #15
 800e19a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	4422      	add	r2, r4
 800e1a2:	609a      	str	r2, [r3, #8]
}
 800e1a4:	bf00      	nop
 800e1a6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1b0:	51eb851f 	.word	0x51eb851f

0800e1b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e1b4:	b084      	sub	sp, #16
 800e1b6:	b580      	push	{r7, lr}
 800e1b8:	b084      	sub	sp, #16
 800e1ba:	af00      	add	r7, sp, #0
 800e1bc:	6078      	str	r0, [r7, #4]
 800e1be:	f107 001c 	add.w	r0, r7, #28
 800e1c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e1c6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800e1ca:	2b01      	cmp	r3, #1
 800e1cc:	d123      	bne.n	800e216 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e1d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	68db      	ldr	r3, [r3, #12]
 800e1de:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800e1e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	68db      	ldr	r3, [r3, #12]
 800e1ee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e1f6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d105      	bne.n	800e20a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	68db      	ldr	r3, [r3, #12]
 800e202:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e20a:	6878      	ldr	r0, [r7, #4]
 800e20c:	f000 f901 	bl	800e412 <USB_CoreReset>
 800e210:	4603      	mov	r3, r0
 800e212:	73fb      	strb	r3, [r7, #15]
 800e214:	e01b      	b.n	800e24e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e222:	6878      	ldr	r0, [r7, #4]
 800e224:	f000 f8f5 	bl	800e412 <USB_CoreReset>
 800e228:	4603      	mov	r3, r0
 800e22a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e22c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e230:	2b00      	cmp	r3, #0
 800e232:	d106      	bne.n	800e242 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e238:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	639a      	str	r2, [r3, #56]	; 0x38
 800e240:	e005      	b.n	800e24e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e246:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e24e:	7fbb      	ldrb	r3, [r7, #30]
 800e250:	2b01      	cmp	r3, #1
 800e252:	d10b      	bne.n	800e26c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	689b      	ldr	r3, [r3, #8]
 800e258:	f043 0206 	orr.w	r2, r3, #6
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	689b      	ldr	r3, [r3, #8]
 800e264:	f043 0220 	orr.w	r2, r3, #32
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e278:	b004      	add	sp, #16
 800e27a:	4770      	bx	lr

0800e27c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e27c:	b480      	push	{r7}
 800e27e:	b083      	sub	sp, #12
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	689b      	ldr	r3, [r3, #8]
 800e288:	f023 0201 	bic.w	r2, r3, #1
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e290:	2300      	movs	r3, #0
}
 800e292:	4618      	mov	r0, r3
 800e294:	370c      	adds	r7, #12
 800e296:	46bd      	mov	sp, r7
 800e298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e29c:	4770      	bx	lr

0800e29e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e29e:	b580      	push	{r7, lr}
 800e2a0:	b084      	sub	sp, #16
 800e2a2:	af00      	add	r7, sp, #0
 800e2a4:	6078      	str	r0, [r7, #4]
 800e2a6:	460b      	mov	r3, r1
 800e2a8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e2aa:	2300      	movs	r3, #0
 800e2ac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	68db      	ldr	r3, [r3, #12]
 800e2b2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e2ba:	78fb      	ldrb	r3, [r7, #3]
 800e2bc:	2b01      	cmp	r3, #1
 800e2be:	d115      	bne.n	800e2ec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e2cc:	200a      	movs	r0, #10
 800e2ce:	f7fb fd41 	bl	8009d54 <HAL_Delay>
      ms += 10U;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	330a      	adds	r3, #10
 800e2d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e2d8:	6878      	ldr	r0, [r7, #4]
 800e2da:	f000 f88c 	bl	800e3f6 <USB_GetMode>
 800e2de:	4603      	mov	r3, r0
 800e2e0:	2b01      	cmp	r3, #1
 800e2e2:	d01e      	beq.n	800e322 <USB_SetCurrentMode+0x84>
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	2bc7      	cmp	r3, #199	; 0xc7
 800e2e8:	d9f0      	bls.n	800e2cc <USB_SetCurrentMode+0x2e>
 800e2ea:	e01a      	b.n	800e322 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e2ec:	78fb      	ldrb	r3, [r7, #3]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d115      	bne.n	800e31e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	68db      	ldr	r3, [r3, #12]
 800e2f6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800e2fe:	200a      	movs	r0, #10
 800e300:	f7fb fd28 	bl	8009d54 <HAL_Delay>
      ms += 10U;
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	330a      	adds	r3, #10
 800e308:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 f873 	bl	800e3f6 <USB_GetMode>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d005      	beq.n	800e322 <USB_SetCurrentMode+0x84>
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	2bc7      	cmp	r3, #199	; 0xc7
 800e31a:	d9f0      	bls.n	800e2fe <USB_SetCurrentMode+0x60>
 800e31c:	e001      	b.n	800e322 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e31e:	2301      	movs	r3, #1
 800e320:	e005      	b.n	800e32e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	2bc8      	cmp	r3, #200	; 0xc8
 800e326:	d101      	bne.n	800e32c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e328:	2301      	movs	r3, #1
 800e32a:	e000      	b.n	800e32e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e32c:	2300      	movs	r3, #0
}
 800e32e:	4618      	mov	r0, r3
 800e330:	3710      	adds	r7, #16
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}

0800e336 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800e336:	b480      	push	{r7}
 800e338:	b085      	sub	sp, #20
 800e33a:	af00      	add	r7, sp, #0
 800e33c:	6078      	str	r0, [r7, #4]
 800e33e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800e340:	2300      	movs	r3, #0
 800e342:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	3301      	adds	r3, #1
 800e348:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e350:	d901      	bls.n	800e356 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800e352:	2303      	movs	r3, #3
 800e354:	e01b      	b.n	800e38e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	691b      	ldr	r3, [r3, #16]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	daf2      	bge.n	800e344 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800e35e:	2300      	movs	r3, #0
 800e360:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	019b      	lsls	r3, r3, #6
 800e366:	f043 0220 	orr.w	r2, r3, #32
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e36e:	68fb      	ldr	r3, [r7, #12]
 800e370:	3301      	adds	r3, #1
 800e372:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e37a:	d901      	bls.n	800e380 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800e37c:	2303      	movs	r3, #3
 800e37e:	e006      	b.n	800e38e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	691b      	ldr	r3, [r3, #16]
 800e384:	f003 0320 	and.w	r3, r3, #32
 800e388:	2b20      	cmp	r3, #32
 800e38a:	d0f0      	beq.n	800e36e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800e38c:	2300      	movs	r3, #0
}
 800e38e:	4618      	mov	r0, r3
 800e390:	3714      	adds	r7, #20
 800e392:	46bd      	mov	sp, r7
 800e394:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e398:	4770      	bx	lr

0800e39a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800e39a:	b480      	push	{r7}
 800e39c:	b085      	sub	sp, #20
 800e39e:	af00      	add	r7, sp, #0
 800e3a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e3a2:	2300      	movs	r3, #0
 800e3a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	3301      	adds	r3, #1
 800e3aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e3b2:	d901      	bls.n	800e3b8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800e3b4:	2303      	movs	r3, #3
 800e3b6:	e018      	b.n	800e3ea <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	691b      	ldr	r3, [r3, #16]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	daf2      	bge.n	800e3a6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2210      	movs	r2, #16
 800e3c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	3301      	adds	r3, #1
 800e3ce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e3d0:	68fb      	ldr	r3, [r7, #12]
 800e3d2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e3d6:	d901      	bls.n	800e3dc <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800e3d8:	2303      	movs	r3, #3
 800e3da:	e006      	b.n	800e3ea <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	691b      	ldr	r3, [r3, #16]
 800e3e0:	f003 0310 	and.w	r3, r3, #16
 800e3e4:	2b10      	cmp	r3, #16
 800e3e6:	d0f0      	beq.n	800e3ca <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800e3e8:	2300      	movs	r3, #0
}
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	3714      	adds	r7, #20
 800e3ee:	46bd      	mov	sp, r7
 800e3f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f4:	4770      	bx	lr

0800e3f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800e3f6:	b480      	push	{r7}
 800e3f8:	b083      	sub	sp, #12
 800e3fa:	af00      	add	r7, sp, #0
 800e3fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	695b      	ldr	r3, [r3, #20]
 800e402:	f003 0301 	and.w	r3, r3, #1
}
 800e406:	4618      	mov	r0, r3
 800e408:	370c      	adds	r7, #12
 800e40a:	46bd      	mov	sp, r7
 800e40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e410:	4770      	bx	lr

0800e412 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800e412:	b480      	push	{r7}
 800e414:	b085      	sub	sp, #20
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e41a:	2300      	movs	r3, #0
 800e41c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3301      	adds	r3, #1
 800e422:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e42a:	d901      	bls.n	800e430 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800e42c:	2303      	movs	r3, #3
 800e42e:	e01b      	b.n	800e468 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	691b      	ldr	r3, [r3, #16]
 800e434:	2b00      	cmp	r3, #0
 800e436:	daf2      	bge.n	800e41e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800e438:	2300      	movs	r3, #0
 800e43a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	691b      	ldr	r3, [r3, #16]
 800e440:	f043 0201 	orr.w	r2, r3, #1
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	3301      	adds	r3, #1
 800e44c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800e454:	d901      	bls.n	800e45a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800e456:	2303      	movs	r3, #3
 800e458:	e006      	b.n	800e468 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	691b      	ldr	r3, [r3, #16]
 800e45e:	f003 0301 	and.w	r3, r3, #1
 800e462:	2b01      	cmp	r3, #1
 800e464:	d0f0      	beq.n	800e448 <USB_CoreReset+0x36>

  return HAL_OK;
 800e466:	2300      	movs	r3, #0
}
 800e468:	4618      	mov	r0, r3
 800e46a:	3714      	adds	r7, #20
 800e46c:	46bd      	mov	sp, r7
 800e46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e472:	4770      	bx	lr

0800e474 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e474:	b084      	sub	sp, #16
 800e476:	b580      	push	{r7, lr}
 800e478:	b086      	sub	sp, #24
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
 800e47e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e486:	2300      	movs	r3, #0
 800e488:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e494:	461a      	mov	r2, r3
 800e496:	2300      	movs	r3, #0
 800e498:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e49e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4aa:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e4b6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	68db      	ldr	r3, [r3, #12]
 800e4c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d119      	bne.n	800e4fe <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800e4ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4ce:	2b01      	cmp	r3, #1
 800e4d0:	d10a      	bne.n	800e4e8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	68fa      	ldr	r2, [r7, #12]
 800e4dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e4e0:	f043 0304 	orr.w	r3, r3, #4
 800e4e4:	6013      	str	r3, [r2, #0]
 800e4e6:	e014      	b.n	800e512 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	68fa      	ldr	r2, [r7, #12]
 800e4f2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e4f6:	f023 0304 	bic.w	r3, r3, #4
 800e4fa:	6013      	str	r3, [r2, #0]
 800e4fc:	e009      	b.n	800e512 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800e504:	681b      	ldr	r3, [r3, #0]
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800e50c:	f023 0304 	bic.w	r3, r3, #4
 800e510:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e512:	2110      	movs	r1, #16
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f7ff ff0e 	bl	800e336 <USB_FlushTxFifo>
 800e51a:	4603      	mov	r3, r0
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d001      	beq.n	800e524 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800e520:	2301      	movs	r3, #1
 800e522:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e524:	6878      	ldr	r0, [r7, #4]
 800e526:	f7ff ff38 	bl	800e39a <USB_FlushRxFifo>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d001      	beq.n	800e534 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800e530:	2301      	movs	r3, #1
 800e532:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800e534:	2300      	movs	r3, #0
 800e536:	613b      	str	r3, [r7, #16]
 800e538:	e015      	b.n	800e566 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	015a      	lsls	r2, r3, #5
 800e53e:	68fb      	ldr	r3, [r7, #12]
 800e540:	4413      	add	r3, r2
 800e542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e546:	461a      	mov	r2, r3
 800e548:	f04f 33ff 	mov.w	r3, #4294967295
 800e54c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	015a      	lsls	r2, r3, #5
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	4413      	add	r3, r2
 800e556:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800e55a:	461a      	mov	r2, r3
 800e55c:	2300      	movs	r3, #0
 800e55e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	3301      	adds	r3, #1
 800e564:	613b      	str	r3, [r7, #16]
 800e566:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800e56a:	461a      	mov	r2, r3
 800e56c:	693b      	ldr	r3, [r7, #16]
 800e56e:	4293      	cmp	r3, r2
 800e570:	d3e3      	bcc.n	800e53a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	2200      	movs	r2, #0
 800e576:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	f04f 32ff 	mov.w	r2, #4294967295
 800e57e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	4a18      	ldr	r2, [pc, #96]	; (800e5e4 <USB_HostInit+0x170>)
 800e584:	4293      	cmp	r3, r2
 800e586:	d10b      	bne.n	800e5a0 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e58e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	4a15      	ldr	r2, [pc, #84]	; (800e5e8 <USB_HostInit+0x174>)
 800e594:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	4a14      	ldr	r2, [pc, #80]	; (800e5ec <USB_HostInit+0x178>)
 800e59a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e59e:	e009      	b.n	800e5b4 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	2280      	movs	r2, #128	; 0x80
 800e5a4:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	4a11      	ldr	r2, [pc, #68]	; (800e5f0 <USB_HostInit+0x17c>)
 800e5aa:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	4a11      	ldr	r2, [pc, #68]	; (800e5f4 <USB_HostInit+0x180>)
 800e5b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800e5b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d105      	bne.n	800e5c8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	699b      	ldr	r3, [r3, #24]
 800e5c0:	f043 0210 	orr.w	r2, r3, #16
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	699a      	ldr	r2, [r3, #24]
 800e5cc:	4b0a      	ldr	r3, [pc, #40]	; (800e5f8 <USB_HostInit+0x184>)
 800e5ce:	4313      	orrs	r3, r2
 800e5d0:	687a      	ldr	r2, [r7, #4]
 800e5d2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800e5d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e5d6:	4618      	mov	r0, r3
 800e5d8:	3718      	adds	r7, #24
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e5e0:	b004      	add	sp, #16
 800e5e2:	4770      	bx	lr
 800e5e4:	40040000 	.word	0x40040000
 800e5e8:	01000200 	.word	0x01000200
 800e5ec:	00e00300 	.word	0x00e00300
 800e5f0:	00600080 	.word	0x00600080
 800e5f4:	004000e0 	.word	0x004000e0
 800e5f8:	a3200008 	.word	0xa3200008

0800e5fc <calloc>:
 800e5fc:	4b02      	ldr	r3, [pc, #8]	; (800e608 <calloc+0xc>)
 800e5fe:	460a      	mov	r2, r1
 800e600:	4601      	mov	r1, r0
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	f000 b802 	b.w	800e60c <_calloc_r>
 800e608:	20000368 	.word	0x20000368

0800e60c <_calloc_r>:
 800e60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e60e:	fba1 2402 	umull	r2, r4, r1, r2
 800e612:	b94c      	cbnz	r4, 800e628 <_calloc_r+0x1c>
 800e614:	4611      	mov	r1, r2
 800e616:	9201      	str	r2, [sp, #4]
 800e618:	f000 f836 	bl	800e688 <_malloc_r>
 800e61c:	9a01      	ldr	r2, [sp, #4]
 800e61e:	4605      	mov	r5, r0
 800e620:	b930      	cbnz	r0, 800e630 <_calloc_r+0x24>
 800e622:	4628      	mov	r0, r5
 800e624:	b003      	add	sp, #12
 800e626:	bd30      	pop	{r4, r5, pc}
 800e628:	220c      	movs	r2, #12
 800e62a:	6002      	str	r2, [r0, #0]
 800e62c:	2500      	movs	r5, #0
 800e62e:	e7f8      	b.n	800e622 <_calloc_r+0x16>
 800e630:	4621      	mov	r1, r4
 800e632:	f000 fb99 	bl	800ed68 <memset>
 800e636:	e7f4      	b.n	800e622 <_calloc_r+0x16>

0800e638 <free>:
 800e638:	4b02      	ldr	r3, [pc, #8]	; (800e644 <free+0xc>)
 800e63a:	4601      	mov	r1, r0
 800e63c:	6818      	ldr	r0, [r3, #0]
 800e63e:	f000 bc2d 	b.w	800ee9c <_free_r>
 800e642:	bf00      	nop
 800e644:	20000368 	.word	0x20000368

0800e648 <sbrk_aligned>:
 800e648:	b570      	push	{r4, r5, r6, lr}
 800e64a:	4e0e      	ldr	r6, [pc, #56]	; (800e684 <sbrk_aligned+0x3c>)
 800e64c:	460c      	mov	r4, r1
 800e64e:	6831      	ldr	r1, [r6, #0]
 800e650:	4605      	mov	r5, r0
 800e652:	b911      	cbnz	r1, 800e65a <sbrk_aligned+0x12>
 800e654:	f000 fbc4 	bl	800ede0 <_sbrk_r>
 800e658:	6030      	str	r0, [r6, #0]
 800e65a:	4621      	mov	r1, r4
 800e65c:	4628      	mov	r0, r5
 800e65e:	f000 fbbf 	bl	800ede0 <_sbrk_r>
 800e662:	1c43      	adds	r3, r0, #1
 800e664:	d00a      	beq.n	800e67c <sbrk_aligned+0x34>
 800e666:	1cc4      	adds	r4, r0, #3
 800e668:	f024 0403 	bic.w	r4, r4, #3
 800e66c:	42a0      	cmp	r0, r4
 800e66e:	d007      	beq.n	800e680 <sbrk_aligned+0x38>
 800e670:	1a21      	subs	r1, r4, r0
 800e672:	4628      	mov	r0, r5
 800e674:	f000 fbb4 	bl	800ede0 <_sbrk_r>
 800e678:	3001      	adds	r0, #1
 800e67a:	d101      	bne.n	800e680 <sbrk_aligned+0x38>
 800e67c:	f04f 34ff 	mov.w	r4, #4294967295
 800e680:	4620      	mov	r0, r4
 800e682:	bd70      	pop	{r4, r5, r6, pc}
 800e684:	20000c9c 	.word	0x20000c9c

0800e688 <_malloc_r>:
 800e688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e68c:	1ccd      	adds	r5, r1, #3
 800e68e:	f025 0503 	bic.w	r5, r5, #3
 800e692:	3508      	adds	r5, #8
 800e694:	2d0c      	cmp	r5, #12
 800e696:	bf38      	it	cc
 800e698:	250c      	movcc	r5, #12
 800e69a:	2d00      	cmp	r5, #0
 800e69c:	4607      	mov	r7, r0
 800e69e:	db01      	blt.n	800e6a4 <_malloc_r+0x1c>
 800e6a0:	42a9      	cmp	r1, r5
 800e6a2:	d905      	bls.n	800e6b0 <_malloc_r+0x28>
 800e6a4:	230c      	movs	r3, #12
 800e6a6:	603b      	str	r3, [r7, #0]
 800e6a8:	2600      	movs	r6, #0
 800e6aa:	4630      	mov	r0, r6
 800e6ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800e784 <_malloc_r+0xfc>
 800e6b4:	f000 f868 	bl	800e788 <__malloc_lock>
 800e6b8:	f8d8 3000 	ldr.w	r3, [r8]
 800e6bc:	461c      	mov	r4, r3
 800e6be:	bb5c      	cbnz	r4, 800e718 <_malloc_r+0x90>
 800e6c0:	4629      	mov	r1, r5
 800e6c2:	4638      	mov	r0, r7
 800e6c4:	f7ff ffc0 	bl	800e648 <sbrk_aligned>
 800e6c8:	1c43      	adds	r3, r0, #1
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	d155      	bne.n	800e77a <_malloc_r+0xf2>
 800e6ce:	f8d8 4000 	ldr.w	r4, [r8]
 800e6d2:	4626      	mov	r6, r4
 800e6d4:	2e00      	cmp	r6, #0
 800e6d6:	d145      	bne.n	800e764 <_malloc_r+0xdc>
 800e6d8:	2c00      	cmp	r4, #0
 800e6da:	d048      	beq.n	800e76e <_malloc_r+0xe6>
 800e6dc:	6823      	ldr	r3, [r4, #0]
 800e6de:	4631      	mov	r1, r6
 800e6e0:	4638      	mov	r0, r7
 800e6e2:	eb04 0903 	add.w	r9, r4, r3
 800e6e6:	f000 fb7b 	bl	800ede0 <_sbrk_r>
 800e6ea:	4581      	cmp	r9, r0
 800e6ec:	d13f      	bne.n	800e76e <_malloc_r+0xe6>
 800e6ee:	6821      	ldr	r1, [r4, #0]
 800e6f0:	1a6d      	subs	r5, r5, r1
 800e6f2:	4629      	mov	r1, r5
 800e6f4:	4638      	mov	r0, r7
 800e6f6:	f7ff ffa7 	bl	800e648 <sbrk_aligned>
 800e6fa:	3001      	adds	r0, #1
 800e6fc:	d037      	beq.n	800e76e <_malloc_r+0xe6>
 800e6fe:	6823      	ldr	r3, [r4, #0]
 800e700:	442b      	add	r3, r5
 800e702:	6023      	str	r3, [r4, #0]
 800e704:	f8d8 3000 	ldr.w	r3, [r8]
 800e708:	2b00      	cmp	r3, #0
 800e70a:	d038      	beq.n	800e77e <_malloc_r+0xf6>
 800e70c:	685a      	ldr	r2, [r3, #4]
 800e70e:	42a2      	cmp	r2, r4
 800e710:	d12b      	bne.n	800e76a <_malloc_r+0xe2>
 800e712:	2200      	movs	r2, #0
 800e714:	605a      	str	r2, [r3, #4]
 800e716:	e00f      	b.n	800e738 <_malloc_r+0xb0>
 800e718:	6822      	ldr	r2, [r4, #0]
 800e71a:	1b52      	subs	r2, r2, r5
 800e71c:	d41f      	bmi.n	800e75e <_malloc_r+0xd6>
 800e71e:	2a0b      	cmp	r2, #11
 800e720:	d917      	bls.n	800e752 <_malloc_r+0xca>
 800e722:	1961      	adds	r1, r4, r5
 800e724:	42a3      	cmp	r3, r4
 800e726:	6025      	str	r5, [r4, #0]
 800e728:	bf18      	it	ne
 800e72a:	6059      	strne	r1, [r3, #4]
 800e72c:	6863      	ldr	r3, [r4, #4]
 800e72e:	bf08      	it	eq
 800e730:	f8c8 1000 	streq.w	r1, [r8]
 800e734:	5162      	str	r2, [r4, r5]
 800e736:	604b      	str	r3, [r1, #4]
 800e738:	4638      	mov	r0, r7
 800e73a:	f104 060b 	add.w	r6, r4, #11
 800e73e:	f000 f829 	bl	800e794 <__malloc_unlock>
 800e742:	f026 0607 	bic.w	r6, r6, #7
 800e746:	1d23      	adds	r3, r4, #4
 800e748:	1af2      	subs	r2, r6, r3
 800e74a:	d0ae      	beq.n	800e6aa <_malloc_r+0x22>
 800e74c:	1b9b      	subs	r3, r3, r6
 800e74e:	50a3      	str	r3, [r4, r2]
 800e750:	e7ab      	b.n	800e6aa <_malloc_r+0x22>
 800e752:	42a3      	cmp	r3, r4
 800e754:	6862      	ldr	r2, [r4, #4]
 800e756:	d1dd      	bne.n	800e714 <_malloc_r+0x8c>
 800e758:	f8c8 2000 	str.w	r2, [r8]
 800e75c:	e7ec      	b.n	800e738 <_malloc_r+0xb0>
 800e75e:	4623      	mov	r3, r4
 800e760:	6864      	ldr	r4, [r4, #4]
 800e762:	e7ac      	b.n	800e6be <_malloc_r+0x36>
 800e764:	4634      	mov	r4, r6
 800e766:	6876      	ldr	r6, [r6, #4]
 800e768:	e7b4      	b.n	800e6d4 <_malloc_r+0x4c>
 800e76a:	4613      	mov	r3, r2
 800e76c:	e7cc      	b.n	800e708 <_malloc_r+0x80>
 800e76e:	230c      	movs	r3, #12
 800e770:	603b      	str	r3, [r7, #0]
 800e772:	4638      	mov	r0, r7
 800e774:	f000 f80e 	bl	800e794 <__malloc_unlock>
 800e778:	e797      	b.n	800e6aa <_malloc_r+0x22>
 800e77a:	6025      	str	r5, [r4, #0]
 800e77c:	e7dc      	b.n	800e738 <_malloc_r+0xb0>
 800e77e:	605b      	str	r3, [r3, #4]
 800e780:	deff      	udf	#255	; 0xff
 800e782:	bf00      	nop
 800e784:	20000c98 	.word	0x20000c98

0800e788 <__malloc_lock>:
 800e788:	4801      	ldr	r0, [pc, #4]	; (800e790 <__malloc_lock+0x8>)
 800e78a:	f000 bb76 	b.w	800ee7a <__retarget_lock_acquire_recursive>
 800e78e:	bf00      	nop
 800e790:	20000de0 	.word	0x20000de0

0800e794 <__malloc_unlock>:
 800e794:	4801      	ldr	r0, [pc, #4]	; (800e79c <__malloc_unlock+0x8>)
 800e796:	f000 bb71 	b.w	800ee7c <__retarget_lock_release_recursive>
 800e79a:	bf00      	nop
 800e79c:	20000de0 	.word	0x20000de0

0800e7a0 <__sflush_r>:
 800e7a0:	898a      	ldrh	r2, [r1, #12]
 800e7a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7a6:	4605      	mov	r5, r0
 800e7a8:	0710      	lsls	r0, r2, #28
 800e7aa:	460c      	mov	r4, r1
 800e7ac:	d458      	bmi.n	800e860 <__sflush_r+0xc0>
 800e7ae:	684b      	ldr	r3, [r1, #4]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	dc05      	bgt.n	800e7c0 <__sflush_r+0x20>
 800e7b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	dc02      	bgt.n	800e7c0 <__sflush_r+0x20>
 800e7ba:	2000      	movs	r0, #0
 800e7bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7c2:	2e00      	cmp	r6, #0
 800e7c4:	d0f9      	beq.n	800e7ba <__sflush_r+0x1a>
 800e7c6:	2300      	movs	r3, #0
 800e7c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e7cc:	682f      	ldr	r7, [r5, #0]
 800e7ce:	6a21      	ldr	r1, [r4, #32]
 800e7d0:	602b      	str	r3, [r5, #0]
 800e7d2:	d032      	beq.n	800e83a <__sflush_r+0x9a>
 800e7d4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e7d6:	89a3      	ldrh	r3, [r4, #12]
 800e7d8:	075a      	lsls	r2, r3, #29
 800e7da:	d505      	bpl.n	800e7e8 <__sflush_r+0x48>
 800e7dc:	6863      	ldr	r3, [r4, #4]
 800e7de:	1ac0      	subs	r0, r0, r3
 800e7e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e7e2:	b10b      	cbz	r3, 800e7e8 <__sflush_r+0x48>
 800e7e4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e7e6:	1ac0      	subs	r0, r0, r3
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e7ee:	6a21      	ldr	r1, [r4, #32]
 800e7f0:	4628      	mov	r0, r5
 800e7f2:	47b0      	blx	r6
 800e7f4:	1c43      	adds	r3, r0, #1
 800e7f6:	89a3      	ldrh	r3, [r4, #12]
 800e7f8:	d106      	bne.n	800e808 <__sflush_r+0x68>
 800e7fa:	6829      	ldr	r1, [r5, #0]
 800e7fc:	291d      	cmp	r1, #29
 800e7fe:	d82b      	bhi.n	800e858 <__sflush_r+0xb8>
 800e800:	4a29      	ldr	r2, [pc, #164]	; (800e8a8 <__sflush_r+0x108>)
 800e802:	410a      	asrs	r2, r1
 800e804:	07d6      	lsls	r6, r2, #31
 800e806:	d427      	bmi.n	800e858 <__sflush_r+0xb8>
 800e808:	2200      	movs	r2, #0
 800e80a:	6062      	str	r2, [r4, #4]
 800e80c:	04d9      	lsls	r1, r3, #19
 800e80e:	6922      	ldr	r2, [r4, #16]
 800e810:	6022      	str	r2, [r4, #0]
 800e812:	d504      	bpl.n	800e81e <__sflush_r+0x7e>
 800e814:	1c42      	adds	r2, r0, #1
 800e816:	d101      	bne.n	800e81c <__sflush_r+0x7c>
 800e818:	682b      	ldr	r3, [r5, #0]
 800e81a:	b903      	cbnz	r3, 800e81e <__sflush_r+0x7e>
 800e81c:	6560      	str	r0, [r4, #84]	; 0x54
 800e81e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e820:	602f      	str	r7, [r5, #0]
 800e822:	2900      	cmp	r1, #0
 800e824:	d0c9      	beq.n	800e7ba <__sflush_r+0x1a>
 800e826:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e82a:	4299      	cmp	r1, r3
 800e82c:	d002      	beq.n	800e834 <__sflush_r+0x94>
 800e82e:	4628      	mov	r0, r5
 800e830:	f000 fb34 	bl	800ee9c <_free_r>
 800e834:	2000      	movs	r0, #0
 800e836:	6360      	str	r0, [r4, #52]	; 0x34
 800e838:	e7c0      	b.n	800e7bc <__sflush_r+0x1c>
 800e83a:	2301      	movs	r3, #1
 800e83c:	4628      	mov	r0, r5
 800e83e:	47b0      	blx	r6
 800e840:	1c41      	adds	r1, r0, #1
 800e842:	d1c8      	bne.n	800e7d6 <__sflush_r+0x36>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d0c5      	beq.n	800e7d6 <__sflush_r+0x36>
 800e84a:	2b1d      	cmp	r3, #29
 800e84c:	d001      	beq.n	800e852 <__sflush_r+0xb2>
 800e84e:	2b16      	cmp	r3, #22
 800e850:	d101      	bne.n	800e856 <__sflush_r+0xb6>
 800e852:	602f      	str	r7, [r5, #0]
 800e854:	e7b1      	b.n	800e7ba <__sflush_r+0x1a>
 800e856:	89a3      	ldrh	r3, [r4, #12]
 800e858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e85c:	81a3      	strh	r3, [r4, #12]
 800e85e:	e7ad      	b.n	800e7bc <__sflush_r+0x1c>
 800e860:	690f      	ldr	r7, [r1, #16]
 800e862:	2f00      	cmp	r7, #0
 800e864:	d0a9      	beq.n	800e7ba <__sflush_r+0x1a>
 800e866:	0793      	lsls	r3, r2, #30
 800e868:	680e      	ldr	r6, [r1, #0]
 800e86a:	bf08      	it	eq
 800e86c:	694b      	ldreq	r3, [r1, #20]
 800e86e:	600f      	str	r7, [r1, #0]
 800e870:	bf18      	it	ne
 800e872:	2300      	movne	r3, #0
 800e874:	eba6 0807 	sub.w	r8, r6, r7
 800e878:	608b      	str	r3, [r1, #8]
 800e87a:	f1b8 0f00 	cmp.w	r8, #0
 800e87e:	dd9c      	ble.n	800e7ba <__sflush_r+0x1a>
 800e880:	6a21      	ldr	r1, [r4, #32]
 800e882:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e884:	4643      	mov	r3, r8
 800e886:	463a      	mov	r2, r7
 800e888:	4628      	mov	r0, r5
 800e88a:	47b0      	blx	r6
 800e88c:	2800      	cmp	r0, #0
 800e88e:	dc06      	bgt.n	800e89e <__sflush_r+0xfe>
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e896:	81a3      	strh	r3, [r4, #12]
 800e898:	f04f 30ff 	mov.w	r0, #4294967295
 800e89c:	e78e      	b.n	800e7bc <__sflush_r+0x1c>
 800e89e:	4407      	add	r7, r0
 800e8a0:	eba8 0800 	sub.w	r8, r8, r0
 800e8a4:	e7e9      	b.n	800e87a <__sflush_r+0xda>
 800e8a6:	bf00      	nop
 800e8a8:	dfbffffe 	.word	0xdfbffffe

0800e8ac <_fflush_r>:
 800e8ac:	b538      	push	{r3, r4, r5, lr}
 800e8ae:	690b      	ldr	r3, [r1, #16]
 800e8b0:	4605      	mov	r5, r0
 800e8b2:	460c      	mov	r4, r1
 800e8b4:	b913      	cbnz	r3, 800e8bc <_fflush_r+0x10>
 800e8b6:	2500      	movs	r5, #0
 800e8b8:	4628      	mov	r0, r5
 800e8ba:	bd38      	pop	{r3, r4, r5, pc}
 800e8bc:	b118      	cbz	r0, 800e8c6 <_fflush_r+0x1a>
 800e8be:	6a03      	ldr	r3, [r0, #32]
 800e8c0:	b90b      	cbnz	r3, 800e8c6 <_fflush_r+0x1a>
 800e8c2:	f000 f8bb 	bl	800ea3c <__sinit>
 800e8c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d0f3      	beq.n	800e8b6 <_fflush_r+0xa>
 800e8ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e8d0:	07d0      	lsls	r0, r2, #31
 800e8d2:	d404      	bmi.n	800e8de <_fflush_r+0x32>
 800e8d4:	0599      	lsls	r1, r3, #22
 800e8d6:	d402      	bmi.n	800e8de <_fflush_r+0x32>
 800e8d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8da:	f000 face 	bl	800ee7a <__retarget_lock_acquire_recursive>
 800e8de:	4628      	mov	r0, r5
 800e8e0:	4621      	mov	r1, r4
 800e8e2:	f7ff ff5d 	bl	800e7a0 <__sflush_r>
 800e8e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e8e8:	07da      	lsls	r2, r3, #31
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	d4e4      	bmi.n	800e8b8 <_fflush_r+0xc>
 800e8ee:	89a3      	ldrh	r3, [r4, #12]
 800e8f0:	059b      	lsls	r3, r3, #22
 800e8f2:	d4e1      	bmi.n	800e8b8 <_fflush_r+0xc>
 800e8f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e8f6:	f000 fac1 	bl	800ee7c <__retarget_lock_release_recursive>
 800e8fa:	e7dd      	b.n	800e8b8 <_fflush_r+0xc>

0800e8fc <fflush>:
 800e8fc:	4601      	mov	r1, r0
 800e8fe:	b920      	cbnz	r0, 800e90a <fflush+0xe>
 800e900:	4a04      	ldr	r2, [pc, #16]	; (800e914 <fflush+0x18>)
 800e902:	4905      	ldr	r1, [pc, #20]	; (800e918 <fflush+0x1c>)
 800e904:	4805      	ldr	r0, [pc, #20]	; (800e91c <fflush+0x20>)
 800e906:	f000 b8b1 	b.w	800ea6c <_fwalk_sglue>
 800e90a:	4b05      	ldr	r3, [pc, #20]	; (800e920 <fflush+0x24>)
 800e90c:	6818      	ldr	r0, [r3, #0]
 800e90e:	f7ff bfcd 	b.w	800e8ac <_fflush_r>
 800e912:	bf00      	nop
 800e914:	20000310 	.word	0x20000310
 800e918:	0800e8ad 	.word	0x0800e8ad
 800e91c:	2000031c 	.word	0x2000031c
 800e920:	20000368 	.word	0x20000368

0800e924 <std>:
 800e924:	2300      	movs	r3, #0
 800e926:	b510      	push	{r4, lr}
 800e928:	4604      	mov	r4, r0
 800e92a:	e9c0 3300 	strd	r3, r3, [r0]
 800e92e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e932:	6083      	str	r3, [r0, #8]
 800e934:	8181      	strh	r1, [r0, #12]
 800e936:	6643      	str	r3, [r0, #100]	; 0x64
 800e938:	81c2      	strh	r2, [r0, #14]
 800e93a:	6183      	str	r3, [r0, #24]
 800e93c:	4619      	mov	r1, r3
 800e93e:	2208      	movs	r2, #8
 800e940:	305c      	adds	r0, #92	; 0x5c
 800e942:	f000 fa11 	bl	800ed68 <memset>
 800e946:	4b0d      	ldr	r3, [pc, #52]	; (800e97c <std+0x58>)
 800e948:	6263      	str	r3, [r4, #36]	; 0x24
 800e94a:	4b0d      	ldr	r3, [pc, #52]	; (800e980 <std+0x5c>)
 800e94c:	62a3      	str	r3, [r4, #40]	; 0x28
 800e94e:	4b0d      	ldr	r3, [pc, #52]	; (800e984 <std+0x60>)
 800e950:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e952:	4b0d      	ldr	r3, [pc, #52]	; (800e988 <std+0x64>)
 800e954:	6323      	str	r3, [r4, #48]	; 0x30
 800e956:	4b0d      	ldr	r3, [pc, #52]	; (800e98c <std+0x68>)
 800e958:	6224      	str	r4, [r4, #32]
 800e95a:	429c      	cmp	r4, r3
 800e95c:	d006      	beq.n	800e96c <std+0x48>
 800e95e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800e962:	4294      	cmp	r4, r2
 800e964:	d002      	beq.n	800e96c <std+0x48>
 800e966:	33d0      	adds	r3, #208	; 0xd0
 800e968:	429c      	cmp	r4, r3
 800e96a:	d105      	bne.n	800e978 <std+0x54>
 800e96c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e974:	f000 ba80 	b.w	800ee78 <__retarget_lock_init_recursive>
 800e978:	bd10      	pop	{r4, pc}
 800e97a:	bf00      	nop
 800e97c:	0800eb85 	.word	0x0800eb85
 800e980:	0800eba7 	.word	0x0800eba7
 800e984:	0800ebdf 	.word	0x0800ebdf
 800e988:	0800ec03 	.word	0x0800ec03
 800e98c:	20000ca0 	.word	0x20000ca0

0800e990 <stdio_exit_handler>:
 800e990:	4a02      	ldr	r2, [pc, #8]	; (800e99c <stdio_exit_handler+0xc>)
 800e992:	4903      	ldr	r1, [pc, #12]	; (800e9a0 <stdio_exit_handler+0x10>)
 800e994:	4803      	ldr	r0, [pc, #12]	; (800e9a4 <stdio_exit_handler+0x14>)
 800e996:	f000 b869 	b.w	800ea6c <_fwalk_sglue>
 800e99a:	bf00      	nop
 800e99c:	20000310 	.word	0x20000310
 800e9a0:	0800e8ad 	.word	0x0800e8ad
 800e9a4:	2000031c 	.word	0x2000031c

0800e9a8 <cleanup_stdio>:
 800e9a8:	6841      	ldr	r1, [r0, #4]
 800e9aa:	4b0c      	ldr	r3, [pc, #48]	; (800e9dc <cleanup_stdio+0x34>)
 800e9ac:	4299      	cmp	r1, r3
 800e9ae:	b510      	push	{r4, lr}
 800e9b0:	4604      	mov	r4, r0
 800e9b2:	d001      	beq.n	800e9b8 <cleanup_stdio+0x10>
 800e9b4:	f7ff ff7a 	bl	800e8ac <_fflush_r>
 800e9b8:	68a1      	ldr	r1, [r4, #8]
 800e9ba:	4b09      	ldr	r3, [pc, #36]	; (800e9e0 <cleanup_stdio+0x38>)
 800e9bc:	4299      	cmp	r1, r3
 800e9be:	d002      	beq.n	800e9c6 <cleanup_stdio+0x1e>
 800e9c0:	4620      	mov	r0, r4
 800e9c2:	f7ff ff73 	bl	800e8ac <_fflush_r>
 800e9c6:	68e1      	ldr	r1, [r4, #12]
 800e9c8:	4b06      	ldr	r3, [pc, #24]	; (800e9e4 <cleanup_stdio+0x3c>)
 800e9ca:	4299      	cmp	r1, r3
 800e9cc:	d004      	beq.n	800e9d8 <cleanup_stdio+0x30>
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e9d4:	f7ff bf6a 	b.w	800e8ac <_fflush_r>
 800e9d8:	bd10      	pop	{r4, pc}
 800e9da:	bf00      	nop
 800e9dc:	20000ca0 	.word	0x20000ca0
 800e9e0:	20000d08 	.word	0x20000d08
 800e9e4:	20000d70 	.word	0x20000d70

0800e9e8 <global_stdio_init.part.0>:
 800e9e8:	b510      	push	{r4, lr}
 800e9ea:	4b0b      	ldr	r3, [pc, #44]	; (800ea18 <global_stdio_init.part.0+0x30>)
 800e9ec:	4c0b      	ldr	r4, [pc, #44]	; (800ea1c <global_stdio_init.part.0+0x34>)
 800e9ee:	4a0c      	ldr	r2, [pc, #48]	; (800ea20 <global_stdio_init.part.0+0x38>)
 800e9f0:	601a      	str	r2, [r3, #0]
 800e9f2:	4620      	mov	r0, r4
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	2104      	movs	r1, #4
 800e9f8:	f7ff ff94 	bl	800e924 <std>
 800e9fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800ea00:	2201      	movs	r2, #1
 800ea02:	2109      	movs	r1, #9
 800ea04:	f7ff ff8e 	bl	800e924 <std>
 800ea08:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800ea0c:	2202      	movs	r2, #2
 800ea0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea12:	2112      	movs	r1, #18
 800ea14:	f7ff bf86 	b.w	800e924 <std>
 800ea18:	20000dd8 	.word	0x20000dd8
 800ea1c:	20000ca0 	.word	0x20000ca0
 800ea20:	0800e991 	.word	0x0800e991

0800ea24 <__sfp_lock_acquire>:
 800ea24:	4801      	ldr	r0, [pc, #4]	; (800ea2c <__sfp_lock_acquire+0x8>)
 800ea26:	f000 ba28 	b.w	800ee7a <__retarget_lock_acquire_recursive>
 800ea2a:	bf00      	nop
 800ea2c:	20000de1 	.word	0x20000de1

0800ea30 <__sfp_lock_release>:
 800ea30:	4801      	ldr	r0, [pc, #4]	; (800ea38 <__sfp_lock_release+0x8>)
 800ea32:	f000 ba23 	b.w	800ee7c <__retarget_lock_release_recursive>
 800ea36:	bf00      	nop
 800ea38:	20000de1 	.word	0x20000de1

0800ea3c <__sinit>:
 800ea3c:	b510      	push	{r4, lr}
 800ea3e:	4604      	mov	r4, r0
 800ea40:	f7ff fff0 	bl	800ea24 <__sfp_lock_acquire>
 800ea44:	6a23      	ldr	r3, [r4, #32]
 800ea46:	b11b      	cbz	r3, 800ea50 <__sinit+0x14>
 800ea48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ea4c:	f7ff bff0 	b.w	800ea30 <__sfp_lock_release>
 800ea50:	4b04      	ldr	r3, [pc, #16]	; (800ea64 <__sinit+0x28>)
 800ea52:	6223      	str	r3, [r4, #32]
 800ea54:	4b04      	ldr	r3, [pc, #16]	; (800ea68 <__sinit+0x2c>)
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d1f5      	bne.n	800ea48 <__sinit+0xc>
 800ea5c:	f7ff ffc4 	bl	800e9e8 <global_stdio_init.part.0>
 800ea60:	e7f2      	b.n	800ea48 <__sinit+0xc>
 800ea62:	bf00      	nop
 800ea64:	0800e9a9 	.word	0x0800e9a9
 800ea68:	20000dd8 	.word	0x20000dd8

0800ea6c <_fwalk_sglue>:
 800ea6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ea70:	4607      	mov	r7, r0
 800ea72:	4688      	mov	r8, r1
 800ea74:	4614      	mov	r4, r2
 800ea76:	2600      	movs	r6, #0
 800ea78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ea7c:	f1b9 0901 	subs.w	r9, r9, #1
 800ea80:	d505      	bpl.n	800ea8e <_fwalk_sglue+0x22>
 800ea82:	6824      	ldr	r4, [r4, #0]
 800ea84:	2c00      	cmp	r4, #0
 800ea86:	d1f7      	bne.n	800ea78 <_fwalk_sglue+0xc>
 800ea88:	4630      	mov	r0, r6
 800ea8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea8e:	89ab      	ldrh	r3, [r5, #12]
 800ea90:	2b01      	cmp	r3, #1
 800ea92:	d907      	bls.n	800eaa4 <_fwalk_sglue+0x38>
 800ea94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ea98:	3301      	adds	r3, #1
 800ea9a:	d003      	beq.n	800eaa4 <_fwalk_sglue+0x38>
 800ea9c:	4629      	mov	r1, r5
 800ea9e:	4638      	mov	r0, r7
 800eaa0:	47c0      	blx	r8
 800eaa2:	4306      	orrs	r6, r0
 800eaa4:	3568      	adds	r5, #104	; 0x68
 800eaa6:	e7e9      	b.n	800ea7c <_fwalk_sglue+0x10>

0800eaa8 <iprintf>:
 800eaa8:	b40f      	push	{r0, r1, r2, r3}
 800eaaa:	b507      	push	{r0, r1, r2, lr}
 800eaac:	4906      	ldr	r1, [pc, #24]	; (800eac8 <iprintf+0x20>)
 800eaae:	ab04      	add	r3, sp, #16
 800eab0:	6808      	ldr	r0, [r1, #0]
 800eab2:	f853 2b04 	ldr.w	r2, [r3], #4
 800eab6:	6881      	ldr	r1, [r0, #8]
 800eab8:	9301      	str	r3, [sp, #4]
 800eaba:	f000 fa65 	bl	800ef88 <_vfiprintf_r>
 800eabe:	b003      	add	sp, #12
 800eac0:	f85d eb04 	ldr.w	lr, [sp], #4
 800eac4:	b004      	add	sp, #16
 800eac6:	4770      	bx	lr
 800eac8:	20000368 	.word	0x20000368

0800eacc <_puts_r>:
 800eacc:	6a03      	ldr	r3, [r0, #32]
 800eace:	b570      	push	{r4, r5, r6, lr}
 800ead0:	6884      	ldr	r4, [r0, #8]
 800ead2:	4605      	mov	r5, r0
 800ead4:	460e      	mov	r6, r1
 800ead6:	b90b      	cbnz	r3, 800eadc <_puts_r+0x10>
 800ead8:	f7ff ffb0 	bl	800ea3c <__sinit>
 800eadc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eade:	07db      	lsls	r3, r3, #31
 800eae0:	d405      	bmi.n	800eaee <_puts_r+0x22>
 800eae2:	89a3      	ldrh	r3, [r4, #12]
 800eae4:	0598      	lsls	r0, r3, #22
 800eae6:	d402      	bmi.n	800eaee <_puts_r+0x22>
 800eae8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eaea:	f000 f9c6 	bl	800ee7a <__retarget_lock_acquire_recursive>
 800eaee:	89a3      	ldrh	r3, [r4, #12]
 800eaf0:	0719      	lsls	r1, r3, #28
 800eaf2:	d513      	bpl.n	800eb1c <_puts_r+0x50>
 800eaf4:	6923      	ldr	r3, [r4, #16]
 800eaf6:	b18b      	cbz	r3, 800eb1c <_puts_r+0x50>
 800eaf8:	3e01      	subs	r6, #1
 800eafa:	68a3      	ldr	r3, [r4, #8]
 800eafc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800eb00:	3b01      	subs	r3, #1
 800eb02:	60a3      	str	r3, [r4, #8]
 800eb04:	b9e9      	cbnz	r1, 800eb42 <_puts_r+0x76>
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	da2e      	bge.n	800eb68 <_puts_r+0x9c>
 800eb0a:	4622      	mov	r2, r4
 800eb0c:	210a      	movs	r1, #10
 800eb0e:	4628      	mov	r0, r5
 800eb10:	f000 f87b 	bl	800ec0a <__swbuf_r>
 800eb14:	3001      	adds	r0, #1
 800eb16:	d007      	beq.n	800eb28 <_puts_r+0x5c>
 800eb18:	250a      	movs	r5, #10
 800eb1a:	e007      	b.n	800eb2c <_puts_r+0x60>
 800eb1c:	4621      	mov	r1, r4
 800eb1e:	4628      	mov	r0, r5
 800eb20:	f000 f8b0 	bl	800ec84 <__swsetup_r>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d0e7      	beq.n	800eaf8 <_puts_r+0x2c>
 800eb28:	f04f 35ff 	mov.w	r5, #4294967295
 800eb2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eb2e:	07da      	lsls	r2, r3, #31
 800eb30:	d405      	bmi.n	800eb3e <_puts_r+0x72>
 800eb32:	89a3      	ldrh	r3, [r4, #12]
 800eb34:	059b      	lsls	r3, r3, #22
 800eb36:	d402      	bmi.n	800eb3e <_puts_r+0x72>
 800eb38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800eb3a:	f000 f99f 	bl	800ee7c <__retarget_lock_release_recursive>
 800eb3e:	4628      	mov	r0, r5
 800eb40:	bd70      	pop	{r4, r5, r6, pc}
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	da04      	bge.n	800eb50 <_puts_r+0x84>
 800eb46:	69a2      	ldr	r2, [r4, #24]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	dc06      	bgt.n	800eb5a <_puts_r+0x8e>
 800eb4c:	290a      	cmp	r1, #10
 800eb4e:	d004      	beq.n	800eb5a <_puts_r+0x8e>
 800eb50:	6823      	ldr	r3, [r4, #0]
 800eb52:	1c5a      	adds	r2, r3, #1
 800eb54:	6022      	str	r2, [r4, #0]
 800eb56:	7019      	strb	r1, [r3, #0]
 800eb58:	e7cf      	b.n	800eafa <_puts_r+0x2e>
 800eb5a:	4622      	mov	r2, r4
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f000 f854 	bl	800ec0a <__swbuf_r>
 800eb62:	3001      	adds	r0, #1
 800eb64:	d1c9      	bne.n	800eafa <_puts_r+0x2e>
 800eb66:	e7df      	b.n	800eb28 <_puts_r+0x5c>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	250a      	movs	r5, #10
 800eb6c:	1c5a      	adds	r2, r3, #1
 800eb6e:	6022      	str	r2, [r4, #0]
 800eb70:	701d      	strb	r5, [r3, #0]
 800eb72:	e7db      	b.n	800eb2c <_puts_r+0x60>

0800eb74 <puts>:
 800eb74:	4b02      	ldr	r3, [pc, #8]	; (800eb80 <puts+0xc>)
 800eb76:	4601      	mov	r1, r0
 800eb78:	6818      	ldr	r0, [r3, #0]
 800eb7a:	f7ff bfa7 	b.w	800eacc <_puts_r>
 800eb7e:	bf00      	nop
 800eb80:	20000368 	.word	0x20000368

0800eb84 <__sread>:
 800eb84:	b510      	push	{r4, lr}
 800eb86:	460c      	mov	r4, r1
 800eb88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb8c:	f000 f916 	bl	800edbc <_read_r>
 800eb90:	2800      	cmp	r0, #0
 800eb92:	bfab      	itete	ge
 800eb94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb96:	89a3      	ldrhlt	r3, [r4, #12]
 800eb98:	181b      	addge	r3, r3, r0
 800eb9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb9e:	bfac      	ite	ge
 800eba0:	6563      	strge	r3, [r4, #84]	; 0x54
 800eba2:	81a3      	strhlt	r3, [r4, #12]
 800eba4:	bd10      	pop	{r4, pc}

0800eba6 <__swrite>:
 800eba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebaa:	461f      	mov	r7, r3
 800ebac:	898b      	ldrh	r3, [r1, #12]
 800ebae:	05db      	lsls	r3, r3, #23
 800ebb0:	4605      	mov	r5, r0
 800ebb2:	460c      	mov	r4, r1
 800ebb4:	4616      	mov	r6, r2
 800ebb6:	d505      	bpl.n	800ebc4 <__swrite+0x1e>
 800ebb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebbc:	2302      	movs	r3, #2
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f000 f8ea 	bl	800ed98 <_lseek_r>
 800ebc4:	89a3      	ldrh	r3, [r4, #12]
 800ebc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebce:	81a3      	strh	r3, [r4, #12]
 800ebd0:	4632      	mov	r2, r6
 800ebd2:	463b      	mov	r3, r7
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebda:	f000 b911 	b.w	800ee00 <_write_r>

0800ebde <__sseek>:
 800ebde:	b510      	push	{r4, lr}
 800ebe0:	460c      	mov	r4, r1
 800ebe2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebe6:	f000 f8d7 	bl	800ed98 <_lseek_r>
 800ebea:	1c43      	adds	r3, r0, #1
 800ebec:	89a3      	ldrh	r3, [r4, #12]
 800ebee:	bf15      	itete	ne
 800ebf0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebfa:	81a3      	strheq	r3, [r4, #12]
 800ebfc:	bf18      	it	ne
 800ebfe:	81a3      	strhne	r3, [r4, #12]
 800ec00:	bd10      	pop	{r4, pc}

0800ec02 <__sclose>:
 800ec02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec06:	f000 b8b7 	b.w	800ed78 <_close_r>

0800ec0a <__swbuf_r>:
 800ec0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec0c:	460e      	mov	r6, r1
 800ec0e:	4614      	mov	r4, r2
 800ec10:	4605      	mov	r5, r0
 800ec12:	b118      	cbz	r0, 800ec1c <__swbuf_r+0x12>
 800ec14:	6a03      	ldr	r3, [r0, #32]
 800ec16:	b90b      	cbnz	r3, 800ec1c <__swbuf_r+0x12>
 800ec18:	f7ff ff10 	bl	800ea3c <__sinit>
 800ec1c:	69a3      	ldr	r3, [r4, #24]
 800ec1e:	60a3      	str	r3, [r4, #8]
 800ec20:	89a3      	ldrh	r3, [r4, #12]
 800ec22:	071a      	lsls	r2, r3, #28
 800ec24:	d525      	bpl.n	800ec72 <__swbuf_r+0x68>
 800ec26:	6923      	ldr	r3, [r4, #16]
 800ec28:	b31b      	cbz	r3, 800ec72 <__swbuf_r+0x68>
 800ec2a:	6823      	ldr	r3, [r4, #0]
 800ec2c:	6922      	ldr	r2, [r4, #16]
 800ec2e:	1a98      	subs	r0, r3, r2
 800ec30:	6963      	ldr	r3, [r4, #20]
 800ec32:	b2f6      	uxtb	r6, r6
 800ec34:	4283      	cmp	r3, r0
 800ec36:	4637      	mov	r7, r6
 800ec38:	dc04      	bgt.n	800ec44 <__swbuf_r+0x3a>
 800ec3a:	4621      	mov	r1, r4
 800ec3c:	4628      	mov	r0, r5
 800ec3e:	f7ff fe35 	bl	800e8ac <_fflush_r>
 800ec42:	b9e0      	cbnz	r0, 800ec7e <__swbuf_r+0x74>
 800ec44:	68a3      	ldr	r3, [r4, #8]
 800ec46:	3b01      	subs	r3, #1
 800ec48:	60a3      	str	r3, [r4, #8]
 800ec4a:	6823      	ldr	r3, [r4, #0]
 800ec4c:	1c5a      	adds	r2, r3, #1
 800ec4e:	6022      	str	r2, [r4, #0]
 800ec50:	701e      	strb	r6, [r3, #0]
 800ec52:	6962      	ldr	r2, [r4, #20]
 800ec54:	1c43      	adds	r3, r0, #1
 800ec56:	429a      	cmp	r2, r3
 800ec58:	d004      	beq.n	800ec64 <__swbuf_r+0x5a>
 800ec5a:	89a3      	ldrh	r3, [r4, #12]
 800ec5c:	07db      	lsls	r3, r3, #31
 800ec5e:	d506      	bpl.n	800ec6e <__swbuf_r+0x64>
 800ec60:	2e0a      	cmp	r6, #10
 800ec62:	d104      	bne.n	800ec6e <__swbuf_r+0x64>
 800ec64:	4621      	mov	r1, r4
 800ec66:	4628      	mov	r0, r5
 800ec68:	f7ff fe20 	bl	800e8ac <_fflush_r>
 800ec6c:	b938      	cbnz	r0, 800ec7e <__swbuf_r+0x74>
 800ec6e:	4638      	mov	r0, r7
 800ec70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec72:	4621      	mov	r1, r4
 800ec74:	4628      	mov	r0, r5
 800ec76:	f000 f805 	bl	800ec84 <__swsetup_r>
 800ec7a:	2800      	cmp	r0, #0
 800ec7c:	d0d5      	beq.n	800ec2a <__swbuf_r+0x20>
 800ec7e:	f04f 37ff 	mov.w	r7, #4294967295
 800ec82:	e7f4      	b.n	800ec6e <__swbuf_r+0x64>

0800ec84 <__swsetup_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4b2a      	ldr	r3, [pc, #168]	; (800ed30 <__swsetup_r+0xac>)
 800ec88:	4605      	mov	r5, r0
 800ec8a:	6818      	ldr	r0, [r3, #0]
 800ec8c:	460c      	mov	r4, r1
 800ec8e:	b118      	cbz	r0, 800ec98 <__swsetup_r+0x14>
 800ec90:	6a03      	ldr	r3, [r0, #32]
 800ec92:	b90b      	cbnz	r3, 800ec98 <__swsetup_r+0x14>
 800ec94:	f7ff fed2 	bl	800ea3c <__sinit>
 800ec98:	89a3      	ldrh	r3, [r4, #12]
 800ec9a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec9e:	0718      	lsls	r0, r3, #28
 800eca0:	d422      	bmi.n	800ece8 <__swsetup_r+0x64>
 800eca2:	06d9      	lsls	r1, r3, #27
 800eca4:	d407      	bmi.n	800ecb6 <__swsetup_r+0x32>
 800eca6:	2309      	movs	r3, #9
 800eca8:	602b      	str	r3, [r5, #0]
 800ecaa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ecae:	81a3      	strh	r3, [r4, #12]
 800ecb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ecb4:	e034      	b.n	800ed20 <__swsetup_r+0x9c>
 800ecb6:	0758      	lsls	r0, r3, #29
 800ecb8:	d512      	bpl.n	800ece0 <__swsetup_r+0x5c>
 800ecba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecbc:	b141      	cbz	r1, 800ecd0 <__swsetup_r+0x4c>
 800ecbe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecc2:	4299      	cmp	r1, r3
 800ecc4:	d002      	beq.n	800eccc <__swsetup_r+0x48>
 800ecc6:	4628      	mov	r0, r5
 800ecc8:	f000 f8e8 	bl	800ee9c <_free_r>
 800eccc:	2300      	movs	r3, #0
 800ecce:	6363      	str	r3, [r4, #52]	; 0x34
 800ecd0:	89a3      	ldrh	r3, [r4, #12]
 800ecd2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ecd6:	81a3      	strh	r3, [r4, #12]
 800ecd8:	2300      	movs	r3, #0
 800ecda:	6063      	str	r3, [r4, #4]
 800ecdc:	6923      	ldr	r3, [r4, #16]
 800ecde:	6023      	str	r3, [r4, #0]
 800ece0:	89a3      	ldrh	r3, [r4, #12]
 800ece2:	f043 0308 	orr.w	r3, r3, #8
 800ece6:	81a3      	strh	r3, [r4, #12]
 800ece8:	6923      	ldr	r3, [r4, #16]
 800ecea:	b94b      	cbnz	r3, 800ed00 <__swsetup_r+0x7c>
 800ecec:	89a3      	ldrh	r3, [r4, #12]
 800ecee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ecf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ecf6:	d003      	beq.n	800ed00 <__swsetup_r+0x7c>
 800ecf8:	4621      	mov	r1, r4
 800ecfa:	4628      	mov	r0, r5
 800ecfc:	f000 fc14 	bl	800f528 <__smakebuf_r>
 800ed00:	89a0      	ldrh	r0, [r4, #12]
 800ed02:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ed06:	f010 0301 	ands.w	r3, r0, #1
 800ed0a:	d00a      	beq.n	800ed22 <__swsetup_r+0x9e>
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	60a3      	str	r3, [r4, #8]
 800ed10:	6963      	ldr	r3, [r4, #20]
 800ed12:	425b      	negs	r3, r3
 800ed14:	61a3      	str	r3, [r4, #24]
 800ed16:	6923      	ldr	r3, [r4, #16]
 800ed18:	b943      	cbnz	r3, 800ed2c <__swsetup_r+0xa8>
 800ed1a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ed1e:	d1c4      	bne.n	800ecaa <__swsetup_r+0x26>
 800ed20:	bd38      	pop	{r3, r4, r5, pc}
 800ed22:	0781      	lsls	r1, r0, #30
 800ed24:	bf58      	it	pl
 800ed26:	6963      	ldrpl	r3, [r4, #20]
 800ed28:	60a3      	str	r3, [r4, #8]
 800ed2a:	e7f4      	b.n	800ed16 <__swsetup_r+0x92>
 800ed2c:	2000      	movs	r0, #0
 800ed2e:	e7f7      	b.n	800ed20 <__swsetup_r+0x9c>
 800ed30:	20000368 	.word	0x20000368

0800ed34 <memmove>:
 800ed34:	4288      	cmp	r0, r1
 800ed36:	b510      	push	{r4, lr}
 800ed38:	eb01 0402 	add.w	r4, r1, r2
 800ed3c:	d902      	bls.n	800ed44 <memmove+0x10>
 800ed3e:	4284      	cmp	r4, r0
 800ed40:	4623      	mov	r3, r4
 800ed42:	d807      	bhi.n	800ed54 <memmove+0x20>
 800ed44:	1e43      	subs	r3, r0, #1
 800ed46:	42a1      	cmp	r1, r4
 800ed48:	d008      	beq.n	800ed5c <memmove+0x28>
 800ed4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed4e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed52:	e7f8      	b.n	800ed46 <memmove+0x12>
 800ed54:	4402      	add	r2, r0
 800ed56:	4601      	mov	r1, r0
 800ed58:	428a      	cmp	r2, r1
 800ed5a:	d100      	bne.n	800ed5e <memmove+0x2a>
 800ed5c:	bd10      	pop	{r4, pc}
 800ed5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed62:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed66:	e7f7      	b.n	800ed58 <memmove+0x24>

0800ed68 <memset>:
 800ed68:	4402      	add	r2, r0
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	4293      	cmp	r3, r2
 800ed6e:	d100      	bne.n	800ed72 <memset+0xa>
 800ed70:	4770      	bx	lr
 800ed72:	f803 1b01 	strb.w	r1, [r3], #1
 800ed76:	e7f9      	b.n	800ed6c <memset+0x4>

0800ed78 <_close_r>:
 800ed78:	b538      	push	{r3, r4, r5, lr}
 800ed7a:	4d06      	ldr	r5, [pc, #24]	; (800ed94 <_close_r+0x1c>)
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	4604      	mov	r4, r0
 800ed80:	4608      	mov	r0, r1
 800ed82:	602b      	str	r3, [r5, #0]
 800ed84:	f7fa f821 	bl	8008dca <_close>
 800ed88:	1c43      	adds	r3, r0, #1
 800ed8a:	d102      	bne.n	800ed92 <_close_r+0x1a>
 800ed8c:	682b      	ldr	r3, [r5, #0]
 800ed8e:	b103      	cbz	r3, 800ed92 <_close_r+0x1a>
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	bd38      	pop	{r3, r4, r5, pc}
 800ed94:	20000ddc 	.word	0x20000ddc

0800ed98 <_lseek_r>:
 800ed98:	b538      	push	{r3, r4, r5, lr}
 800ed9a:	4d07      	ldr	r5, [pc, #28]	; (800edb8 <_lseek_r+0x20>)
 800ed9c:	4604      	mov	r4, r0
 800ed9e:	4608      	mov	r0, r1
 800eda0:	4611      	mov	r1, r2
 800eda2:	2200      	movs	r2, #0
 800eda4:	602a      	str	r2, [r5, #0]
 800eda6:	461a      	mov	r2, r3
 800eda8:	f7fa f836 	bl	8008e18 <_lseek>
 800edac:	1c43      	adds	r3, r0, #1
 800edae:	d102      	bne.n	800edb6 <_lseek_r+0x1e>
 800edb0:	682b      	ldr	r3, [r5, #0]
 800edb2:	b103      	cbz	r3, 800edb6 <_lseek_r+0x1e>
 800edb4:	6023      	str	r3, [r4, #0]
 800edb6:	bd38      	pop	{r3, r4, r5, pc}
 800edb8:	20000ddc 	.word	0x20000ddc

0800edbc <_read_r>:
 800edbc:	b538      	push	{r3, r4, r5, lr}
 800edbe:	4d07      	ldr	r5, [pc, #28]	; (800eddc <_read_r+0x20>)
 800edc0:	4604      	mov	r4, r0
 800edc2:	4608      	mov	r0, r1
 800edc4:	4611      	mov	r1, r2
 800edc6:	2200      	movs	r2, #0
 800edc8:	602a      	str	r2, [r5, #0]
 800edca:	461a      	mov	r2, r3
 800edcc:	f7f9 ffc4 	bl	8008d58 <_read>
 800edd0:	1c43      	adds	r3, r0, #1
 800edd2:	d102      	bne.n	800edda <_read_r+0x1e>
 800edd4:	682b      	ldr	r3, [r5, #0]
 800edd6:	b103      	cbz	r3, 800edda <_read_r+0x1e>
 800edd8:	6023      	str	r3, [r4, #0]
 800edda:	bd38      	pop	{r3, r4, r5, pc}
 800eddc:	20000ddc 	.word	0x20000ddc

0800ede0 <_sbrk_r>:
 800ede0:	b538      	push	{r3, r4, r5, lr}
 800ede2:	4d06      	ldr	r5, [pc, #24]	; (800edfc <_sbrk_r+0x1c>)
 800ede4:	2300      	movs	r3, #0
 800ede6:	4604      	mov	r4, r0
 800ede8:	4608      	mov	r0, r1
 800edea:	602b      	str	r3, [r5, #0]
 800edec:	f7fa f822 	bl	8008e34 <_sbrk>
 800edf0:	1c43      	adds	r3, r0, #1
 800edf2:	d102      	bne.n	800edfa <_sbrk_r+0x1a>
 800edf4:	682b      	ldr	r3, [r5, #0]
 800edf6:	b103      	cbz	r3, 800edfa <_sbrk_r+0x1a>
 800edf8:	6023      	str	r3, [r4, #0]
 800edfa:	bd38      	pop	{r3, r4, r5, pc}
 800edfc:	20000ddc 	.word	0x20000ddc

0800ee00 <_write_r>:
 800ee00:	b538      	push	{r3, r4, r5, lr}
 800ee02:	4d07      	ldr	r5, [pc, #28]	; (800ee20 <_write_r+0x20>)
 800ee04:	4604      	mov	r4, r0
 800ee06:	4608      	mov	r0, r1
 800ee08:	4611      	mov	r1, r2
 800ee0a:	2200      	movs	r2, #0
 800ee0c:	602a      	str	r2, [r5, #0]
 800ee0e:	461a      	mov	r2, r3
 800ee10:	f7f9 ffbf 	bl	8008d92 <_write>
 800ee14:	1c43      	adds	r3, r0, #1
 800ee16:	d102      	bne.n	800ee1e <_write_r+0x1e>
 800ee18:	682b      	ldr	r3, [r5, #0]
 800ee1a:	b103      	cbz	r3, 800ee1e <_write_r+0x1e>
 800ee1c:	6023      	str	r3, [r4, #0]
 800ee1e:	bd38      	pop	{r3, r4, r5, pc}
 800ee20:	20000ddc 	.word	0x20000ddc

0800ee24 <__errno>:
 800ee24:	4b01      	ldr	r3, [pc, #4]	; (800ee2c <__errno+0x8>)
 800ee26:	6818      	ldr	r0, [r3, #0]
 800ee28:	4770      	bx	lr
 800ee2a:	bf00      	nop
 800ee2c:	20000368 	.word	0x20000368

0800ee30 <__libc_init_array>:
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	4d0d      	ldr	r5, [pc, #52]	; (800ee68 <__libc_init_array+0x38>)
 800ee34:	4c0d      	ldr	r4, [pc, #52]	; (800ee6c <__libc_init_array+0x3c>)
 800ee36:	1b64      	subs	r4, r4, r5
 800ee38:	10a4      	asrs	r4, r4, #2
 800ee3a:	2600      	movs	r6, #0
 800ee3c:	42a6      	cmp	r6, r4
 800ee3e:	d109      	bne.n	800ee54 <__libc_init_array+0x24>
 800ee40:	4d0b      	ldr	r5, [pc, #44]	; (800ee70 <__libc_init_array+0x40>)
 800ee42:	4c0c      	ldr	r4, [pc, #48]	; (800ee74 <__libc_init_array+0x44>)
 800ee44:	f000 fbce 	bl	800f5e4 <_init>
 800ee48:	1b64      	subs	r4, r4, r5
 800ee4a:	10a4      	asrs	r4, r4, #2
 800ee4c:	2600      	movs	r6, #0
 800ee4e:	42a6      	cmp	r6, r4
 800ee50:	d105      	bne.n	800ee5e <__libc_init_array+0x2e>
 800ee52:	bd70      	pop	{r4, r5, r6, pc}
 800ee54:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee58:	4798      	blx	r3
 800ee5a:	3601      	adds	r6, #1
 800ee5c:	e7ee      	b.n	800ee3c <__libc_init_array+0xc>
 800ee5e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ee62:	4798      	blx	r3
 800ee64:	3601      	adds	r6, #1
 800ee66:	e7f2      	b.n	800ee4e <__libc_init_array+0x1e>
 800ee68:	0800fba4 	.word	0x0800fba4
 800ee6c:	0800fba4 	.word	0x0800fba4
 800ee70:	0800fba4 	.word	0x0800fba4
 800ee74:	0800fba8 	.word	0x0800fba8

0800ee78 <__retarget_lock_init_recursive>:
 800ee78:	4770      	bx	lr

0800ee7a <__retarget_lock_acquire_recursive>:
 800ee7a:	4770      	bx	lr

0800ee7c <__retarget_lock_release_recursive>:
 800ee7c:	4770      	bx	lr

0800ee7e <memcpy>:
 800ee7e:	440a      	add	r2, r1
 800ee80:	4291      	cmp	r1, r2
 800ee82:	f100 33ff 	add.w	r3, r0, #4294967295
 800ee86:	d100      	bne.n	800ee8a <memcpy+0xc>
 800ee88:	4770      	bx	lr
 800ee8a:	b510      	push	{r4, lr}
 800ee8c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ee90:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ee94:	4291      	cmp	r1, r2
 800ee96:	d1f9      	bne.n	800ee8c <memcpy+0xe>
 800ee98:	bd10      	pop	{r4, pc}
	...

0800ee9c <_free_r>:
 800ee9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ee9e:	2900      	cmp	r1, #0
 800eea0:	d044      	beq.n	800ef2c <_free_r+0x90>
 800eea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eea6:	9001      	str	r0, [sp, #4]
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f1a1 0404 	sub.w	r4, r1, #4
 800eeae:	bfb8      	it	lt
 800eeb0:	18e4      	addlt	r4, r4, r3
 800eeb2:	f7ff fc69 	bl	800e788 <__malloc_lock>
 800eeb6:	4a1e      	ldr	r2, [pc, #120]	; (800ef30 <_free_r+0x94>)
 800eeb8:	9801      	ldr	r0, [sp, #4]
 800eeba:	6813      	ldr	r3, [r2, #0]
 800eebc:	b933      	cbnz	r3, 800eecc <_free_r+0x30>
 800eebe:	6063      	str	r3, [r4, #4]
 800eec0:	6014      	str	r4, [r2, #0]
 800eec2:	b003      	add	sp, #12
 800eec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800eec8:	f7ff bc64 	b.w	800e794 <__malloc_unlock>
 800eecc:	42a3      	cmp	r3, r4
 800eece:	d908      	bls.n	800eee2 <_free_r+0x46>
 800eed0:	6825      	ldr	r5, [r4, #0]
 800eed2:	1961      	adds	r1, r4, r5
 800eed4:	428b      	cmp	r3, r1
 800eed6:	bf01      	itttt	eq
 800eed8:	6819      	ldreq	r1, [r3, #0]
 800eeda:	685b      	ldreq	r3, [r3, #4]
 800eedc:	1949      	addeq	r1, r1, r5
 800eede:	6021      	streq	r1, [r4, #0]
 800eee0:	e7ed      	b.n	800eebe <_free_r+0x22>
 800eee2:	461a      	mov	r2, r3
 800eee4:	685b      	ldr	r3, [r3, #4]
 800eee6:	b10b      	cbz	r3, 800eeec <_free_r+0x50>
 800eee8:	42a3      	cmp	r3, r4
 800eeea:	d9fa      	bls.n	800eee2 <_free_r+0x46>
 800eeec:	6811      	ldr	r1, [r2, #0]
 800eeee:	1855      	adds	r5, r2, r1
 800eef0:	42a5      	cmp	r5, r4
 800eef2:	d10b      	bne.n	800ef0c <_free_r+0x70>
 800eef4:	6824      	ldr	r4, [r4, #0]
 800eef6:	4421      	add	r1, r4
 800eef8:	1854      	adds	r4, r2, r1
 800eefa:	42a3      	cmp	r3, r4
 800eefc:	6011      	str	r1, [r2, #0]
 800eefe:	d1e0      	bne.n	800eec2 <_free_r+0x26>
 800ef00:	681c      	ldr	r4, [r3, #0]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	6053      	str	r3, [r2, #4]
 800ef06:	440c      	add	r4, r1
 800ef08:	6014      	str	r4, [r2, #0]
 800ef0a:	e7da      	b.n	800eec2 <_free_r+0x26>
 800ef0c:	d902      	bls.n	800ef14 <_free_r+0x78>
 800ef0e:	230c      	movs	r3, #12
 800ef10:	6003      	str	r3, [r0, #0]
 800ef12:	e7d6      	b.n	800eec2 <_free_r+0x26>
 800ef14:	6825      	ldr	r5, [r4, #0]
 800ef16:	1961      	adds	r1, r4, r5
 800ef18:	428b      	cmp	r3, r1
 800ef1a:	bf04      	itt	eq
 800ef1c:	6819      	ldreq	r1, [r3, #0]
 800ef1e:	685b      	ldreq	r3, [r3, #4]
 800ef20:	6063      	str	r3, [r4, #4]
 800ef22:	bf04      	itt	eq
 800ef24:	1949      	addeq	r1, r1, r5
 800ef26:	6021      	streq	r1, [r4, #0]
 800ef28:	6054      	str	r4, [r2, #4]
 800ef2a:	e7ca      	b.n	800eec2 <_free_r+0x26>
 800ef2c:	b003      	add	sp, #12
 800ef2e:	bd30      	pop	{r4, r5, pc}
 800ef30:	20000c98 	.word	0x20000c98

0800ef34 <__sfputc_r>:
 800ef34:	6893      	ldr	r3, [r2, #8]
 800ef36:	3b01      	subs	r3, #1
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	b410      	push	{r4}
 800ef3c:	6093      	str	r3, [r2, #8]
 800ef3e:	da08      	bge.n	800ef52 <__sfputc_r+0x1e>
 800ef40:	6994      	ldr	r4, [r2, #24]
 800ef42:	42a3      	cmp	r3, r4
 800ef44:	db01      	blt.n	800ef4a <__sfputc_r+0x16>
 800ef46:	290a      	cmp	r1, #10
 800ef48:	d103      	bne.n	800ef52 <__sfputc_r+0x1e>
 800ef4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef4e:	f7ff be5c 	b.w	800ec0a <__swbuf_r>
 800ef52:	6813      	ldr	r3, [r2, #0]
 800ef54:	1c58      	adds	r0, r3, #1
 800ef56:	6010      	str	r0, [r2, #0]
 800ef58:	7019      	strb	r1, [r3, #0]
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ef60:	4770      	bx	lr

0800ef62 <__sfputs_r>:
 800ef62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef64:	4606      	mov	r6, r0
 800ef66:	460f      	mov	r7, r1
 800ef68:	4614      	mov	r4, r2
 800ef6a:	18d5      	adds	r5, r2, r3
 800ef6c:	42ac      	cmp	r4, r5
 800ef6e:	d101      	bne.n	800ef74 <__sfputs_r+0x12>
 800ef70:	2000      	movs	r0, #0
 800ef72:	e007      	b.n	800ef84 <__sfputs_r+0x22>
 800ef74:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef78:	463a      	mov	r2, r7
 800ef7a:	4630      	mov	r0, r6
 800ef7c:	f7ff ffda 	bl	800ef34 <__sfputc_r>
 800ef80:	1c43      	adds	r3, r0, #1
 800ef82:	d1f3      	bne.n	800ef6c <__sfputs_r+0xa>
 800ef84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ef88 <_vfiprintf_r>:
 800ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef8c:	460d      	mov	r5, r1
 800ef8e:	b09d      	sub	sp, #116	; 0x74
 800ef90:	4614      	mov	r4, r2
 800ef92:	4698      	mov	r8, r3
 800ef94:	4606      	mov	r6, r0
 800ef96:	b118      	cbz	r0, 800efa0 <_vfiprintf_r+0x18>
 800ef98:	6a03      	ldr	r3, [r0, #32]
 800ef9a:	b90b      	cbnz	r3, 800efa0 <_vfiprintf_r+0x18>
 800ef9c:	f7ff fd4e 	bl	800ea3c <__sinit>
 800efa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efa2:	07d9      	lsls	r1, r3, #31
 800efa4:	d405      	bmi.n	800efb2 <_vfiprintf_r+0x2a>
 800efa6:	89ab      	ldrh	r3, [r5, #12]
 800efa8:	059a      	lsls	r2, r3, #22
 800efaa:	d402      	bmi.n	800efb2 <_vfiprintf_r+0x2a>
 800efac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efae:	f7ff ff64 	bl	800ee7a <__retarget_lock_acquire_recursive>
 800efb2:	89ab      	ldrh	r3, [r5, #12]
 800efb4:	071b      	lsls	r3, r3, #28
 800efb6:	d501      	bpl.n	800efbc <_vfiprintf_r+0x34>
 800efb8:	692b      	ldr	r3, [r5, #16]
 800efba:	b99b      	cbnz	r3, 800efe4 <_vfiprintf_r+0x5c>
 800efbc:	4629      	mov	r1, r5
 800efbe:	4630      	mov	r0, r6
 800efc0:	f7ff fe60 	bl	800ec84 <__swsetup_r>
 800efc4:	b170      	cbz	r0, 800efe4 <_vfiprintf_r+0x5c>
 800efc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800efc8:	07dc      	lsls	r4, r3, #31
 800efca:	d504      	bpl.n	800efd6 <_vfiprintf_r+0x4e>
 800efcc:	f04f 30ff 	mov.w	r0, #4294967295
 800efd0:	b01d      	add	sp, #116	; 0x74
 800efd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efd6:	89ab      	ldrh	r3, [r5, #12]
 800efd8:	0598      	lsls	r0, r3, #22
 800efda:	d4f7      	bmi.n	800efcc <_vfiprintf_r+0x44>
 800efdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800efde:	f7ff ff4d 	bl	800ee7c <__retarget_lock_release_recursive>
 800efe2:	e7f3      	b.n	800efcc <_vfiprintf_r+0x44>
 800efe4:	2300      	movs	r3, #0
 800efe6:	9309      	str	r3, [sp, #36]	; 0x24
 800efe8:	2320      	movs	r3, #32
 800efea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800efee:	f8cd 800c 	str.w	r8, [sp, #12]
 800eff2:	2330      	movs	r3, #48	; 0x30
 800eff4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800f1a8 <_vfiprintf_r+0x220>
 800eff8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800effc:	f04f 0901 	mov.w	r9, #1
 800f000:	4623      	mov	r3, r4
 800f002:	469a      	mov	sl, r3
 800f004:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f008:	b10a      	cbz	r2, 800f00e <_vfiprintf_r+0x86>
 800f00a:	2a25      	cmp	r2, #37	; 0x25
 800f00c:	d1f9      	bne.n	800f002 <_vfiprintf_r+0x7a>
 800f00e:	ebba 0b04 	subs.w	fp, sl, r4
 800f012:	d00b      	beq.n	800f02c <_vfiprintf_r+0xa4>
 800f014:	465b      	mov	r3, fp
 800f016:	4622      	mov	r2, r4
 800f018:	4629      	mov	r1, r5
 800f01a:	4630      	mov	r0, r6
 800f01c:	f7ff ffa1 	bl	800ef62 <__sfputs_r>
 800f020:	3001      	adds	r0, #1
 800f022:	f000 80a9 	beq.w	800f178 <_vfiprintf_r+0x1f0>
 800f026:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f028:	445a      	add	r2, fp
 800f02a:	9209      	str	r2, [sp, #36]	; 0x24
 800f02c:	f89a 3000 	ldrb.w	r3, [sl]
 800f030:	2b00      	cmp	r3, #0
 800f032:	f000 80a1 	beq.w	800f178 <_vfiprintf_r+0x1f0>
 800f036:	2300      	movs	r3, #0
 800f038:	f04f 32ff 	mov.w	r2, #4294967295
 800f03c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f040:	f10a 0a01 	add.w	sl, sl, #1
 800f044:	9304      	str	r3, [sp, #16]
 800f046:	9307      	str	r3, [sp, #28]
 800f048:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f04c:	931a      	str	r3, [sp, #104]	; 0x68
 800f04e:	4654      	mov	r4, sl
 800f050:	2205      	movs	r2, #5
 800f052:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f056:	4854      	ldr	r0, [pc, #336]	; (800f1a8 <_vfiprintf_r+0x220>)
 800f058:	f7f1 f8d2 	bl	8000200 <memchr>
 800f05c:	9a04      	ldr	r2, [sp, #16]
 800f05e:	b9d8      	cbnz	r0, 800f098 <_vfiprintf_r+0x110>
 800f060:	06d1      	lsls	r1, r2, #27
 800f062:	bf44      	itt	mi
 800f064:	2320      	movmi	r3, #32
 800f066:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f06a:	0713      	lsls	r3, r2, #28
 800f06c:	bf44      	itt	mi
 800f06e:	232b      	movmi	r3, #43	; 0x2b
 800f070:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f074:	f89a 3000 	ldrb.w	r3, [sl]
 800f078:	2b2a      	cmp	r3, #42	; 0x2a
 800f07a:	d015      	beq.n	800f0a8 <_vfiprintf_r+0x120>
 800f07c:	9a07      	ldr	r2, [sp, #28]
 800f07e:	4654      	mov	r4, sl
 800f080:	2000      	movs	r0, #0
 800f082:	f04f 0c0a 	mov.w	ip, #10
 800f086:	4621      	mov	r1, r4
 800f088:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f08c:	3b30      	subs	r3, #48	; 0x30
 800f08e:	2b09      	cmp	r3, #9
 800f090:	d94d      	bls.n	800f12e <_vfiprintf_r+0x1a6>
 800f092:	b1b0      	cbz	r0, 800f0c2 <_vfiprintf_r+0x13a>
 800f094:	9207      	str	r2, [sp, #28]
 800f096:	e014      	b.n	800f0c2 <_vfiprintf_r+0x13a>
 800f098:	eba0 0308 	sub.w	r3, r0, r8
 800f09c:	fa09 f303 	lsl.w	r3, r9, r3
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	9304      	str	r3, [sp, #16]
 800f0a4:	46a2      	mov	sl, r4
 800f0a6:	e7d2      	b.n	800f04e <_vfiprintf_r+0xc6>
 800f0a8:	9b03      	ldr	r3, [sp, #12]
 800f0aa:	1d19      	adds	r1, r3, #4
 800f0ac:	681b      	ldr	r3, [r3, #0]
 800f0ae:	9103      	str	r1, [sp, #12]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	bfbb      	ittet	lt
 800f0b4:	425b      	neglt	r3, r3
 800f0b6:	f042 0202 	orrlt.w	r2, r2, #2
 800f0ba:	9307      	strge	r3, [sp, #28]
 800f0bc:	9307      	strlt	r3, [sp, #28]
 800f0be:	bfb8      	it	lt
 800f0c0:	9204      	strlt	r2, [sp, #16]
 800f0c2:	7823      	ldrb	r3, [r4, #0]
 800f0c4:	2b2e      	cmp	r3, #46	; 0x2e
 800f0c6:	d10c      	bne.n	800f0e2 <_vfiprintf_r+0x15a>
 800f0c8:	7863      	ldrb	r3, [r4, #1]
 800f0ca:	2b2a      	cmp	r3, #42	; 0x2a
 800f0cc:	d134      	bne.n	800f138 <_vfiprintf_r+0x1b0>
 800f0ce:	9b03      	ldr	r3, [sp, #12]
 800f0d0:	1d1a      	adds	r2, r3, #4
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	9203      	str	r2, [sp, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	bfb8      	it	lt
 800f0da:	f04f 33ff 	movlt.w	r3, #4294967295
 800f0de:	3402      	adds	r4, #2
 800f0e0:	9305      	str	r3, [sp, #20]
 800f0e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800f1b8 <_vfiprintf_r+0x230>
 800f0e6:	7821      	ldrb	r1, [r4, #0]
 800f0e8:	2203      	movs	r2, #3
 800f0ea:	4650      	mov	r0, sl
 800f0ec:	f7f1 f888 	bl	8000200 <memchr>
 800f0f0:	b138      	cbz	r0, 800f102 <_vfiprintf_r+0x17a>
 800f0f2:	9b04      	ldr	r3, [sp, #16]
 800f0f4:	eba0 000a 	sub.w	r0, r0, sl
 800f0f8:	2240      	movs	r2, #64	; 0x40
 800f0fa:	4082      	lsls	r2, r0
 800f0fc:	4313      	orrs	r3, r2
 800f0fe:	3401      	adds	r4, #1
 800f100:	9304      	str	r3, [sp, #16]
 800f102:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f106:	4829      	ldr	r0, [pc, #164]	; (800f1ac <_vfiprintf_r+0x224>)
 800f108:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f10c:	2206      	movs	r2, #6
 800f10e:	f7f1 f877 	bl	8000200 <memchr>
 800f112:	2800      	cmp	r0, #0
 800f114:	d03f      	beq.n	800f196 <_vfiprintf_r+0x20e>
 800f116:	4b26      	ldr	r3, [pc, #152]	; (800f1b0 <_vfiprintf_r+0x228>)
 800f118:	bb1b      	cbnz	r3, 800f162 <_vfiprintf_r+0x1da>
 800f11a:	9b03      	ldr	r3, [sp, #12]
 800f11c:	3307      	adds	r3, #7
 800f11e:	f023 0307 	bic.w	r3, r3, #7
 800f122:	3308      	adds	r3, #8
 800f124:	9303      	str	r3, [sp, #12]
 800f126:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f128:	443b      	add	r3, r7
 800f12a:	9309      	str	r3, [sp, #36]	; 0x24
 800f12c:	e768      	b.n	800f000 <_vfiprintf_r+0x78>
 800f12e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f132:	460c      	mov	r4, r1
 800f134:	2001      	movs	r0, #1
 800f136:	e7a6      	b.n	800f086 <_vfiprintf_r+0xfe>
 800f138:	2300      	movs	r3, #0
 800f13a:	3401      	adds	r4, #1
 800f13c:	9305      	str	r3, [sp, #20]
 800f13e:	4619      	mov	r1, r3
 800f140:	f04f 0c0a 	mov.w	ip, #10
 800f144:	4620      	mov	r0, r4
 800f146:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f14a:	3a30      	subs	r2, #48	; 0x30
 800f14c:	2a09      	cmp	r2, #9
 800f14e:	d903      	bls.n	800f158 <_vfiprintf_r+0x1d0>
 800f150:	2b00      	cmp	r3, #0
 800f152:	d0c6      	beq.n	800f0e2 <_vfiprintf_r+0x15a>
 800f154:	9105      	str	r1, [sp, #20]
 800f156:	e7c4      	b.n	800f0e2 <_vfiprintf_r+0x15a>
 800f158:	fb0c 2101 	mla	r1, ip, r1, r2
 800f15c:	4604      	mov	r4, r0
 800f15e:	2301      	movs	r3, #1
 800f160:	e7f0      	b.n	800f144 <_vfiprintf_r+0x1bc>
 800f162:	ab03      	add	r3, sp, #12
 800f164:	9300      	str	r3, [sp, #0]
 800f166:	462a      	mov	r2, r5
 800f168:	4b12      	ldr	r3, [pc, #72]	; (800f1b4 <_vfiprintf_r+0x22c>)
 800f16a:	a904      	add	r1, sp, #16
 800f16c:	4630      	mov	r0, r6
 800f16e:	f3af 8000 	nop.w
 800f172:	4607      	mov	r7, r0
 800f174:	1c78      	adds	r0, r7, #1
 800f176:	d1d6      	bne.n	800f126 <_vfiprintf_r+0x19e>
 800f178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f17a:	07d9      	lsls	r1, r3, #31
 800f17c:	d405      	bmi.n	800f18a <_vfiprintf_r+0x202>
 800f17e:	89ab      	ldrh	r3, [r5, #12]
 800f180:	059a      	lsls	r2, r3, #22
 800f182:	d402      	bmi.n	800f18a <_vfiprintf_r+0x202>
 800f184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f186:	f7ff fe79 	bl	800ee7c <__retarget_lock_release_recursive>
 800f18a:	89ab      	ldrh	r3, [r5, #12]
 800f18c:	065b      	lsls	r3, r3, #25
 800f18e:	f53f af1d 	bmi.w	800efcc <_vfiprintf_r+0x44>
 800f192:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f194:	e71c      	b.n	800efd0 <_vfiprintf_r+0x48>
 800f196:	ab03      	add	r3, sp, #12
 800f198:	9300      	str	r3, [sp, #0]
 800f19a:	462a      	mov	r2, r5
 800f19c:	4b05      	ldr	r3, [pc, #20]	; (800f1b4 <_vfiprintf_r+0x22c>)
 800f19e:	a904      	add	r1, sp, #16
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	f000 f879 	bl	800f298 <_printf_i>
 800f1a6:	e7e4      	b.n	800f172 <_vfiprintf_r+0x1ea>
 800f1a8:	0800fb68 	.word	0x0800fb68
 800f1ac:	0800fb72 	.word	0x0800fb72
 800f1b0:	00000000 	.word	0x00000000
 800f1b4:	0800ef63 	.word	0x0800ef63
 800f1b8:	0800fb6e 	.word	0x0800fb6e

0800f1bc <_printf_common>:
 800f1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1c0:	4616      	mov	r6, r2
 800f1c2:	4699      	mov	r9, r3
 800f1c4:	688a      	ldr	r2, [r1, #8]
 800f1c6:	690b      	ldr	r3, [r1, #16]
 800f1c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f1cc:	4293      	cmp	r3, r2
 800f1ce:	bfb8      	it	lt
 800f1d0:	4613      	movlt	r3, r2
 800f1d2:	6033      	str	r3, [r6, #0]
 800f1d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f1d8:	4607      	mov	r7, r0
 800f1da:	460c      	mov	r4, r1
 800f1dc:	b10a      	cbz	r2, 800f1e2 <_printf_common+0x26>
 800f1de:	3301      	adds	r3, #1
 800f1e0:	6033      	str	r3, [r6, #0]
 800f1e2:	6823      	ldr	r3, [r4, #0]
 800f1e4:	0699      	lsls	r1, r3, #26
 800f1e6:	bf42      	ittt	mi
 800f1e8:	6833      	ldrmi	r3, [r6, #0]
 800f1ea:	3302      	addmi	r3, #2
 800f1ec:	6033      	strmi	r3, [r6, #0]
 800f1ee:	6825      	ldr	r5, [r4, #0]
 800f1f0:	f015 0506 	ands.w	r5, r5, #6
 800f1f4:	d106      	bne.n	800f204 <_printf_common+0x48>
 800f1f6:	f104 0a19 	add.w	sl, r4, #25
 800f1fa:	68e3      	ldr	r3, [r4, #12]
 800f1fc:	6832      	ldr	r2, [r6, #0]
 800f1fe:	1a9b      	subs	r3, r3, r2
 800f200:	42ab      	cmp	r3, r5
 800f202:	dc26      	bgt.n	800f252 <_printf_common+0x96>
 800f204:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f208:	1e13      	subs	r3, r2, #0
 800f20a:	6822      	ldr	r2, [r4, #0]
 800f20c:	bf18      	it	ne
 800f20e:	2301      	movne	r3, #1
 800f210:	0692      	lsls	r2, r2, #26
 800f212:	d42b      	bmi.n	800f26c <_printf_common+0xb0>
 800f214:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f218:	4649      	mov	r1, r9
 800f21a:	4638      	mov	r0, r7
 800f21c:	47c0      	blx	r8
 800f21e:	3001      	adds	r0, #1
 800f220:	d01e      	beq.n	800f260 <_printf_common+0xa4>
 800f222:	6823      	ldr	r3, [r4, #0]
 800f224:	6922      	ldr	r2, [r4, #16]
 800f226:	f003 0306 	and.w	r3, r3, #6
 800f22a:	2b04      	cmp	r3, #4
 800f22c:	bf02      	ittt	eq
 800f22e:	68e5      	ldreq	r5, [r4, #12]
 800f230:	6833      	ldreq	r3, [r6, #0]
 800f232:	1aed      	subeq	r5, r5, r3
 800f234:	68a3      	ldr	r3, [r4, #8]
 800f236:	bf0c      	ite	eq
 800f238:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f23c:	2500      	movne	r5, #0
 800f23e:	4293      	cmp	r3, r2
 800f240:	bfc4      	itt	gt
 800f242:	1a9b      	subgt	r3, r3, r2
 800f244:	18ed      	addgt	r5, r5, r3
 800f246:	2600      	movs	r6, #0
 800f248:	341a      	adds	r4, #26
 800f24a:	42b5      	cmp	r5, r6
 800f24c:	d11a      	bne.n	800f284 <_printf_common+0xc8>
 800f24e:	2000      	movs	r0, #0
 800f250:	e008      	b.n	800f264 <_printf_common+0xa8>
 800f252:	2301      	movs	r3, #1
 800f254:	4652      	mov	r2, sl
 800f256:	4649      	mov	r1, r9
 800f258:	4638      	mov	r0, r7
 800f25a:	47c0      	blx	r8
 800f25c:	3001      	adds	r0, #1
 800f25e:	d103      	bne.n	800f268 <_printf_common+0xac>
 800f260:	f04f 30ff 	mov.w	r0, #4294967295
 800f264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f268:	3501      	adds	r5, #1
 800f26a:	e7c6      	b.n	800f1fa <_printf_common+0x3e>
 800f26c:	18e1      	adds	r1, r4, r3
 800f26e:	1c5a      	adds	r2, r3, #1
 800f270:	2030      	movs	r0, #48	; 0x30
 800f272:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f276:	4422      	add	r2, r4
 800f278:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f27c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f280:	3302      	adds	r3, #2
 800f282:	e7c7      	b.n	800f214 <_printf_common+0x58>
 800f284:	2301      	movs	r3, #1
 800f286:	4622      	mov	r2, r4
 800f288:	4649      	mov	r1, r9
 800f28a:	4638      	mov	r0, r7
 800f28c:	47c0      	blx	r8
 800f28e:	3001      	adds	r0, #1
 800f290:	d0e6      	beq.n	800f260 <_printf_common+0xa4>
 800f292:	3601      	adds	r6, #1
 800f294:	e7d9      	b.n	800f24a <_printf_common+0x8e>
	...

0800f298 <_printf_i>:
 800f298:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f29c:	7e0f      	ldrb	r7, [r1, #24]
 800f29e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f2a0:	2f78      	cmp	r7, #120	; 0x78
 800f2a2:	4691      	mov	r9, r2
 800f2a4:	4680      	mov	r8, r0
 800f2a6:	460c      	mov	r4, r1
 800f2a8:	469a      	mov	sl, r3
 800f2aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f2ae:	d807      	bhi.n	800f2c0 <_printf_i+0x28>
 800f2b0:	2f62      	cmp	r7, #98	; 0x62
 800f2b2:	d80a      	bhi.n	800f2ca <_printf_i+0x32>
 800f2b4:	2f00      	cmp	r7, #0
 800f2b6:	f000 80d4 	beq.w	800f462 <_printf_i+0x1ca>
 800f2ba:	2f58      	cmp	r7, #88	; 0x58
 800f2bc:	f000 80c0 	beq.w	800f440 <_printf_i+0x1a8>
 800f2c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f2c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f2c8:	e03a      	b.n	800f340 <_printf_i+0xa8>
 800f2ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f2ce:	2b15      	cmp	r3, #21
 800f2d0:	d8f6      	bhi.n	800f2c0 <_printf_i+0x28>
 800f2d2:	a101      	add	r1, pc, #4	; (adr r1, 800f2d8 <_printf_i+0x40>)
 800f2d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f2d8:	0800f331 	.word	0x0800f331
 800f2dc:	0800f345 	.word	0x0800f345
 800f2e0:	0800f2c1 	.word	0x0800f2c1
 800f2e4:	0800f2c1 	.word	0x0800f2c1
 800f2e8:	0800f2c1 	.word	0x0800f2c1
 800f2ec:	0800f2c1 	.word	0x0800f2c1
 800f2f0:	0800f345 	.word	0x0800f345
 800f2f4:	0800f2c1 	.word	0x0800f2c1
 800f2f8:	0800f2c1 	.word	0x0800f2c1
 800f2fc:	0800f2c1 	.word	0x0800f2c1
 800f300:	0800f2c1 	.word	0x0800f2c1
 800f304:	0800f449 	.word	0x0800f449
 800f308:	0800f371 	.word	0x0800f371
 800f30c:	0800f403 	.word	0x0800f403
 800f310:	0800f2c1 	.word	0x0800f2c1
 800f314:	0800f2c1 	.word	0x0800f2c1
 800f318:	0800f46b 	.word	0x0800f46b
 800f31c:	0800f2c1 	.word	0x0800f2c1
 800f320:	0800f371 	.word	0x0800f371
 800f324:	0800f2c1 	.word	0x0800f2c1
 800f328:	0800f2c1 	.word	0x0800f2c1
 800f32c:	0800f40b 	.word	0x0800f40b
 800f330:	682b      	ldr	r3, [r5, #0]
 800f332:	1d1a      	adds	r2, r3, #4
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	602a      	str	r2, [r5, #0]
 800f338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f33c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f340:	2301      	movs	r3, #1
 800f342:	e09f      	b.n	800f484 <_printf_i+0x1ec>
 800f344:	6820      	ldr	r0, [r4, #0]
 800f346:	682b      	ldr	r3, [r5, #0]
 800f348:	0607      	lsls	r7, r0, #24
 800f34a:	f103 0104 	add.w	r1, r3, #4
 800f34e:	6029      	str	r1, [r5, #0]
 800f350:	d501      	bpl.n	800f356 <_printf_i+0xbe>
 800f352:	681e      	ldr	r6, [r3, #0]
 800f354:	e003      	b.n	800f35e <_printf_i+0xc6>
 800f356:	0646      	lsls	r6, r0, #25
 800f358:	d5fb      	bpl.n	800f352 <_printf_i+0xba>
 800f35a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800f35e:	2e00      	cmp	r6, #0
 800f360:	da03      	bge.n	800f36a <_printf_i+0xd2>
 800f362:	232d      	movs	r3, #45	; 0x2d
 800f364:	4276      	negs	r6, r6
 800f366:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f36a:	485a      	ldr	r0, [pc, #360]	; (800f4d4 <_printf_i+0x23c>)
 800f36c:	230a      	movs	r3, #10
 800f36e:	e012      	b.n	800f396 <_printf_i+0xfe>
 800f370:	682b      	ldr	r3, [r5, #0]
 800f372:	6820      	ldr	r0, [r4, #0]
 800f374:	1d19      	adds	r1, r3, #4
 800f376:	6029      	str	r1, [r5, #0]
 800f378:	0605      	lsls	r5, r0, #24
 800f37a:	d501      	bpl.n	800f380 <_printf_i+0xe8>
 800f37c:	681e      	ldr	r6, [r3, #0]
 800f37e:	e002      	b.n	800f386 <_printf_i+0xee>
 800f380:	0641      	lsls	r1, r0, #25
 800f382:	d5fb      	bpl.n	800f37c <_printf_i+0xe4>
 800f384:	881e      	ldrh	r6, [r3, #0]
 800f386:	4853      	ldr	r0, [pc, #332]	; (800f4d4 <_printf_i+0x23c>)
 800f388:	2f6f      	cmp	r7, #111	; 0x6f
 800f38a:	bf0c      	ite	eq
 800f38c:	2308      	moveq	r3, #8
 800f38e:	230a      	movne	r3, #10
 800f390:	2100      	movs	r1, #0
 800f392:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f396:	6865      	ldr	r5, [r4, #4]
 800f398:	60a5      	str	r5, [r4, #8]
 800f39a:	2d00      	cmp	r5, #0
 800f39c:	bfa2      	ittt	ge
 800f39e:	6821      	ldrge	r1, [r4, #0]
 800f3a0:	f021 0104 	bicge.w	r1, r1, #4
 800f3a4:	6021      	strge	r1, [r4, #0]
 800f3a6:	b90e      	cbnz	r6, 800f3ac <_printf_i+0x114>
 800f3a8:	2d00      	cmp	r5, #0
 800f3aa:	d04b      	beq.n	800f444 <_printf_i+0x1ac>
 800f3ac:	4615      	mov	r5, r2
 800f3ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800f3b2:	fb03 6711 	mls	r7, r3, r1, r6
 800f3b6:	5dc7      	ldrb	r7, [r0, r7]
 800f3b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f3bc:	4637      	mov	r7, r6
 800f3be:	42bb      	cmp	r3, r7
 800f3c0:	460e      	mov	r6, r1
 800f3c2:	d9f4      	bls.n	800f3ae <_printf_i+0x116>
 800f3c4:	2b08      	cmp	r3, #8
 800f3c6:	d10b      	bne.n	800f3e0 <_printf_i+0x148>
 800f3c8:	6823      	ldr	r3, [r4, #0]
 800f3ca:	07de      	lsls	r6, r3, #31
 800f3cc:	d508      	bpl.n	800f3e0 <_printf_i+0x148>
 800f3ce:	6923      	ldr	r3, [r4, #16]
 800f3d0:	6861      	ldr	r1, [r4, #4]
 800f3d2:	4299      	cmp	r1, r3
 800f3d4:	bfde      	ittt	le
 800f3d6:	2330      	movle	r3, #48	; 0x30
 800f3d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f3dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f3e0:	1b52      	subs	r2, r2, r5
 800f3e2:	6122      	str	r2, [r4, #16]
 800f3e4:	f8cd a000 	str.w	sl, [sp]
 800f3e8:	464b      	mov	r3, r9
 800f3ea:	aa03      	add	r2, sp, #12
 800f3ec:	4621      	mov	r1, r4
 800f3ee:	4640      	mov	r0, r8
 800f3f0:	f7ff fee4 	bl	800f1bc <_printf_common>
 800f3f4:	3001      	adds	r0, #1
 800f3f6:	d14a      	bne.n	800f48e <_printf_i+0x1f6>
 800f3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800f3fc:	b004      	add	sp, #16
 800f3fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f402:	6823      	ldr	r3, [r4, #0]
 800f404:	f043 0320 	orr.w	r3, r3, #32
 800f408:	6023      	str	r3, [r4, #0]
 800f40a:	4833      	ldr	r0, [pc, #204]	; (800f4d8 <_printf_i+0x240>)
 800f40c:	2778      	movs	r7, #120	; 0x78
 800f40e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f412:	6823      	ldr	r3, [r4, #0]
 800f414:	6829      	ldr	r1, [r5, #0]
 800f416:	061f      	lsls	r7, r3, #24
 800f418:	f851 6b04 	ldr.w	r6, [r1], #4
 800f41c:	d402      	bmi.n	800f424 <_printf_i+0x18c>
 800f41e:	065f      	lsls	r7, r3, #25
 800f420:	bf48      	it	mi
 800f422:	b2b6      	uxthmi	r6, r6
 800f424:	07df      	lsls	r7, r3, #31
 800f426:	bf48      	it	mi
 800f428:	f043 0320 	orrmi.w	r3, r3, #32
 800f42c:	6029      	str	r1, [r5, #0]
 800f42e:	bf48      	it	mi
 800f430:	6023      	strmi	r3, [r4, #0]
 800f432:	b91e      	cbnz	r6, 800f43c <_printf_i+0x1a4>
 800f434:	6823      	ldr	r3, [r4, #0]
 800f436:	f023 0320 	bic.w	r3, r3, #32
 800f43a:	6023      	str	r3, [r4, #0]
 800f43c:	2310      	movs	r3, #16
 800f43e:	e7a7      	b.n	800f390 <_printf_i+0xf8>
 800f440:	4824      	ldr	r0, [pc, #144]	; (800f4d4 <_printf_i+0x23c>)
 800f442:	e7e4      	b.n	800f40e <_printf_i+0x176>
 800f444:	4615      	mov	r5, r2
 800f446:	e7bd      	b.n	800f3c4 <_printf_i+0x12c>
 800f448:	682b      	ldr	r3, [r5, #0]
 800f44a:	6826      	ldr	r6, [r4, #0]
 800f44c:	6961      	ldr	r1, [r4, #20]
 800f44e:	1d18      	adds	r0, r3, #4
 800f450:	6028      	str	r0, [r5, #0]
 800f452:	0635      	lsls	r5, r6, #24
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	d501      	bpl.n	800f45c <_printf_i+0x1c4>
 800f458:	6019      	str	r1, [r3, #0]
 800f45a:	e002      	b.n	800f462 <_printf_i+0x1ca>
 800f45c:	0670      	lsls	r0, r6, #25
 800f45e:	d5fb      	bpl.n	800f458 <_printf_i+0x1c0>
 800f460:	8019      	strh	r1, [r3, #0]
 800f462:	2300      	movs	r3, #0
 800f464:	6123      	str	r3, [r4, #16]
 800f466:	4615      	mov	r5, r2
 800f468:	e7bc      	b.n	800f3e4 <_printf_i+0x14c>
 800f46a:	682b      	ldr	r3, [r5, #0]
 800f46c:	1d1a      	adds	r2, r3, #4
 800f46e:	602a      	str	r2, [r5, #0]
 800f470:	681d      	ldr	r5, [r3, #0]
 800f472:	6862      	ldr	r2, [r4, #4]
 800f474:	2100      	movs	r1, #0
 800f476:	4628      	mov	r0, r5
 800f478:	f7f0 fec2 	bl	8000200 <memchr>
 800f47c:	b108      	cbz	r0, 800f482 <_printf_i+0x1ea>
 800f47e:	1b40      	subs	r0, r0, r5
 800f480:	6060      	str	r0, [r4, #4]
 800f482:	6863      	ldr	r3, [r4, #4]
 800f484:	6123      	str	r3, [r4, #16]
 800f486:	2300      	movs	r3, #0
 800f488:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f48c:	e7aa      	b.n	800f3e4 <_printf_i+0x14c>
 800f48e:	6923      	ldr	r3, [r4, #16]
 800f490:	462a      	mov	r2, r5
 800f492:	4649      	mov	r1, r9
 800f494:	4640      	mov	r0, r8
 800f496:	47d0      	blx	sl
 800f498:	3001      	adds	r0, #1
 800f49a:	d0ad      	beq.n	800f3f8 <_printf_i+0x160>
 800f49c:	6823      	ldr	r3, [r4, #0]
 800f49e:	079b      	lsls	r3, r3, #30
 800f4a0:	d413      	bmi.n	800f4ca <_printf_i+0x232>
 800f4a2:	68e0      	ldr	r0, [r4, #12]
 800f4a4:	9b03      	ldr	r3, [sp, #12]
 800f4a6:	4298      	cmp	r0, r3
 800f4a8:	bfb8      	it	lt
 800f4aa:	4618      	movlt	r0, r3
 800f4ac:	e7a6      	b.n	800f3fc <_printf_i+0x164>
 800f4ae:	2301      	movs	r3, #1
 800f4b0:	4632      	mov	r2, r6
 800f4b2:	4649      	mov	r1, r9
 800f4b4:	4640      	mov	r0, r8
 800f4b6:	47d0      	blx	sl
 800f4b8:	3001      	adds	r0, #1
 800f4ba:	d09d      	beq.n	800f3f8 <_printf_i+0x160>
 800f4bc:	3501      	adds	r5, #1
 800f4be:	68e3      	ldr	r3, [r4, #12]
 800f4c0:	9903      	ldr	r1, [sp, #12]
 800f4c2:	1a5b      	subs	r3, r3, r1
 800f4c4:	42ab      	cmp	r3, r5
 800f4c6:	dcf2      	bgt.n	800f4ae <_printf_i+0x216>
 800f4c8:	e7eb      	b.n	800f4a2 <_printf_i+0x20a>
 800f4ca:	2500      	movs	r5, #0
 800f4cc:	f104 0619 	add.w	r6, r4, #25
 800f4d0:	e7f5      	b.n	800f4be <_printf_i+0x226>
 800f4d2:	bf00      	nop
 800f4d4:	0800fb79 	.word	0x0800fb79
 800f4d8:	0800fb8a 	.word	0x0800fb8a

0800f4dc <__swhatbuf_r>:
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	460c      	mov	r4, r1
 800f4e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f4e4:	2900      	cmp	r1, #0
 800f4e6:	b096      	sub	sp, #88	; 0x58
 800f4e8:	4615      	mov	r5, r2
 800f4ea:	461e      	mov	r6, r3
 800f4ec:	da0d      	bge.n	800f50a <__swhatbuf_r+0x2e>
 800f4ee:	89a3      	ldrh	r3, [r4, #12]
 800f4f0:	f013 0f80 	tst.w	r3, #128	; 0x80
 800f4f4:	f04f 0100 	mov.w	r1, #0
 800f4f8:	bf0c      	ite	eq
 800f4fa:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800f4fe:	2340      	movne	r3, #64	; 0x40
 800f500:	2000      	movs	r0, #0
 800f502:	6031      	str	r1, [r6, #0]
 800f504:	602b      	str	r3, [r5, #0]
 800f506:	b016      	add	sp, #88	; 0x58
 800f508:	bd70      	pop	{r4, r5, r6, pc}
 800f50a:	466a      	mov	r2, sp
 800f50c:	f000 f848 	bl	800f5a0 <_fstat_r>
 800f510:	2800      	cmp	r0, #0
 800f512:	dbec      	blt.n	800f4ee <__swhatbuf_r+0x12>
 800f514:	9901      	ldr	r1, [sp, #4]
 800f516:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800f51a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800f51e:	4259      	negs	r1, r3
 800f520:	4159      	adcs	r1, r3
 800f522:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f526:	e7eb      	b.n	800f500 <__swhatbuf_r+0x24>

0800f528 <__smakebuf_r>:
 800f528:	898b      	ldrh	r3, [r1, #12]
 800f52a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f52c:	079d      	lsls	r5, r3, #30
 800f52e:	4606      	mov	r6, r0
 800f530:	460c      	mov	r4, r1
 800f532:	d507      	bpl.n	800f544 <__smakebuf_r+0x1c>
 800f534:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f538:	6023      	str	r3, [r4, #0]
 800f53a:	6123      	str	r3, [r4, #16]
 800f53c:	2301      	movs	r3, #1
 800f53e:	6163      	str	r3, [r4, #20]
 800f540:	b002      	add	sp, #8
 800f542:	bd70      	pop	{r4, r5, r6, pc}
 800f544:	ab01      	add	r3, sp, #4
 800f546:	466a      	mov	r2, sp
 800f548:	f7ff ffc8 	bl	800f4dc <__swhatbuf_r>
 800f54c:	9900      	ldr	r1, [sp, #0]
 800f54e:	4605      	mov	r5, r0
 800f550:	4630      	mov	r0, r6
 800f552:	f7ff f899 	bl	800e688 <_malloc_r>
 800f556:	b948      	cbnz	r0, 800f56c <__smakebuf_r+0x44>
 800f558:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f55c:	059a      	lsls	r2, r3, #22
 800f55e:	d4ef      	bmi.n	800f540 <__smakebuf_r+0x18>
 800f560:	f023 0303 	bic.w	r3, r3, #3
 800f564:	f043 0302 	orr.w	r3, r3, #2
 800f568:	81a3      	strh	r3, [r4, #12]
 800f56a:	e7e3      	b.n	800f534 <__smakebuf_r+0xc>
 800f56c:	89a3      	ldrh	r3, [r4, #12]
 800f56e:	6020      	str	r0, [r4, #0]
 800f570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f574:	81a3      	strh	r3, [r4, #12]
 800f576:	9b00      	ldr	r3, [sp, #0]
 800f578:	6163      	str	r3, [r4, #20]
 800f57a:	9b01      	ldr	r3, [sp, #4]
 800f57c:	6120      	str	r0, [r4, #16]
 800f57e:	b15b      	cbz	r3, 800f598 <__smakebuf_r+0x70>
 800f580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f584:	4630      	mov	r0, r6
 800f586:	f000 f81d 	bl	800f5c4 <_isatty_r>
 800f58a:	b128      	cbz	r0, 800f598 <__smakebuf_r+0x70>
 800f58c:	89a3      	ldrh	r3, [r4, #12]
 800f58e:	f023 0303 	bic.w	r3, r3, #3
 800f592:	f043 0301 	orr.w	r3, r3, #1
 800f596:	81a3      	strh	r3, [r4, #12]
 800f598:	89a3      	ldrh	r3, [r4, #12]
 800f59a:	431d      	orrs	r5, r3
 800f59c:	81a5      	strh	r5, [r4, #12]
 800f59e:	e7cf      	b.n	800f540 <__smakebuf_r+0x18>

0800f5a0 <_fstat_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d07      	ldr	r5, [pc, #28]	; (800f5c0 <_fstat_r+0x20>)
 800f5a4:	2300      	movs	r3, #0
 800f5a6:	4604      	mov	r4, r0
 800f5a8:	4608      	mov	r0, r1
 800f5aa:	4611      	mov	r1, r2
 800f5ac:	602b      	str	r3, [r5, #0]
 800f5ae:	f7f9 fc18 	bl	8008de2 <_fstat>
 800f5b2:	1c43      	adds	r3, r0, #1
 800f5b4:	d102      	bne.n	800f5bc <_fstat_r+0x1c>
 800f5b6:	682b      	ldr	r3, [r5, #0]
 800f5b8:	b103      	cbz	r3, 800f5bc <_fstat_r+0x1c>
 800f5ba:	6023      	str	r3, [r4, #0]
 800f5bc:	bd38      	pop	{r3, r4, r5, pc}
 800f5be:	bf00      	nop
 800f5c0:	20000ddc 	.word	0x20000ddc

0800f5c4 <_isatty_r>:
 800f5c4:	b538      	push	{r3, r4, r5, lr}
 800f5c6:	4d06      	ldr	r5, [pc, #24]	; (800f5e0 <_isatty_r+0x1c>)
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	4608      	mov	r0, r1
 800f5ce:	602b      	str	r3, [r5, #0]
 800f5d0:	f7f9 fc17 	bl	8008e02 <_isatty>
 800f5d4:	1c43      	adds	r3, r0, #1
 800f5d6:	d102      	bne.n	800f5de <_isatty_r+0x1a>
 800f5d8:	682b      	ldr	r3, [r5, #0]
 800f5da:	b103      	cbz	r3, 800f5de <_isatty_r+0x1a>
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	bd38      	pop	{r3, r4, r5, pc}
 800f5e0:	20000ddc 	.word	0x20000ddc

0800f5e4 <_init>:
 800f5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5e6:	bf00      	nop
 800f5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5ea:	bc08      	pop	{r3}
 800f5ec:	469e      	mov	lr, r3
 800f5ee:	4770      	bx	lr

0800f5f0 <_fini>:
 800f5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f5f2:	bf00      	nop
 800f5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f5f6:	bc08      	pop	{r3}
 800f5f8:	469e      	mov	lr, r3
 800f5fa:	4770      	bx	lr
